# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:15
msgid "Newton's Method"
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:17
msgid ""
"Loops are often used in programs that compute numerical results by "
"starting with an approximate answer and iteratively improving it."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:20
msgid ""
"For example, one way of computing square roots is Newton's method.  "
"Suppose that you want to know the square root of ``n``. If you start with"
" almost any approximation, you can compute a better approximation with "
"the following formula:"
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:29
msgid ""
"Execute this algorithm a few times using your calculator.  Can you see "
"why each iteration brings your estimate a little closer?  One of the "
"amazing properties of this particular algorithm is how quickly it "
"converges to an accurate answer."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:34
msgid ""
"The following implementation of Newton's method requires two parameters."
"  The first is the value whose square root will be approximated.  The "
"second is the number of times to iterate the calculation yielding a "
"better result."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:52
msgid ""
"You may have noticed that the second and third calls to ``newtonSqrt`` in"
" the previous example both returned the same value for the square root of"
" 10.  Using 10 iterations instead of 5 did not improve the the value.  In"
" general, Newton's algorithm will eventually reach a point where the new "
"approximation is no better than the previous.  At that point, we could "
"simply stop. In other words, by repeatedly applying this formula until "
"the better approximation gets close enough to the previous one, we can "
"write a function for computing the square root that uses the number of "
"iterations necessary and no more."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:56
msgid ""
"This implementation, shown in codelens, uses a ``while`` condition to "
"execute until the approximation is no longer changing.  Each time through"
" the loop we compute a \"better\" approximation using the formula "
"described earlier.  As long as the \"better\" is different, we try again."
"  Step through the program and watch the approximations get closer and "
"closer."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:73
msgid ""
"The ``while`` statement shown above uses comparison of two floating point"
" numbers in the condition.  Since floating point numbers are themselves "
"approximation of real numbers in mathematics, it is often better to "
"compare for a result that is within some small threshold of the value you"
" are looking for."
msgstr ""

