# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:15
msgid "The ``while`` Statement"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:24
msgid ""
"There is another Python statement that can also be used to build an "
"iteration.  It is called the ``while`` statement. The ``while`` statement"
" provides a much more general mechanism for iterating.  Similar to the "
"``if`` statement, it uses a boolean expression to control the flow of "
"execution.  The body of while will be repeated as long as the controlling"
" boolean expression evaluates to ``True``."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:28
msgid "The following figure shows the flow of control."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:32
msgid ""
"We can use the ``while`` loop to create any type of iteration we wish, "
"including anything that we have previously done with a ``for`` loop.  For"
" example, the program in the previous section could be rewritten using "
"``while``. Instead of relying on the ``range`` function to produce the "
"numbers for our summation, we will need to produce them ourselves.  To to"
" this, we will create a variable called ``aNumber`` and initialize it to "
"1, the first number in the summation.  Every iteration will add "
"``aNumber`` to the running total until all the values have been used. In "
"order to control the iteration, we must create a boolean expression that "
"evaluates to ``True`` as long as we want to keep adding values to our "
"running total.  In this case, as long as ``aNumber`` is less than or "
"equal to the bound, we should keep going."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:38
msgid ""
"Here is a new version of the summation program that uses a while "
"statement."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:58
msgid ""
"You can almost read the ``while`` statement as if it were in natural "
"language. It means, while ``aNumber`` is less than or equal to "
"``aBound``, continue executing the body of the loop. Within the body, "
"each time, update ``theSum`` using the accumulator pattern and increment "
"``aNumber``. After the body of the loop, we go back up to the condition "
"of the ``while`` and reevaluate it.  When ``aNumber`` becomes greater "
"than ``aBound``, the condition fails and flow of control continues to the"
" ``return`` statement."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:62
msgid ""
"The same program in codelens will allow you to observe the flow of "
"execution."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:80
msgid "The names of the variables have been chosen to help readability."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:82
msgid "More formally, here is the flow of execution for a ``while`` statement:"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:84
msgid "Evaluate the condition, yielding ``False`` or ``True``."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:85
msgid ""
"If the condition is ``False``, exit the ``while`` statement and continue "
"execution at the next statement."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:87
msgid ""
"If the condition is ``True``, execute each of the statements in the body "
"and then go back to step 1."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:90
msgid ""
"The body consists of all of the statements below the header with the same"
" indentation."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:93
msgid ""
"This type of flow is called a **loop** because the third step loops back "
"around to the top. Notice that if the condition is ``False`` the first "
"time through the loop, the statements inside the loop are never executed."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:97
msgid ""
"The body of the loop should change the value of one or more variables so "
"that eventually the condition becomes ``False`` and the loop terminates. "
"Otherwise the loop will repeat forever. This is called an **infinite "
"loop**. An endless source of amusement for computer scientists is the "
"observation that the directions written on the back of the shampoo bottle"
" (lather, rinse, repeat) create an infinite loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:104
msgid ""
"In the case shown above, we can prove that the loop terminates because we"
" know that the value of ``aBound`` is finite, and we can see that the "
"value of ``aNumber`` increments each time through the loop, so eventually"
" it will have to exceed ``aBound``. In other cases, it is not so easy to "
"tell."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:111
msgid ""
"Introduction of the while statement causes us to think about the types of"
" iteration we have seen.  The ``for`` statement will always iterate "
"through a sequence of values like the list of names for the party or the "
"list of numbers created by ``range``.  Since we know that it will iterate"
" once for each value in the collection, it is often said that a ``for`` "
"loop creates a **definite iteration** because we definitely know how many"
" times we are going to iterate.  On the other hand, the ``while`` "
"statement is dependent on a condition that needs to evaluate to ``False``"
" in order for the loop to terminate.  Since we do not necessarily know "
"when this will happen, it creates what we call **indefinite iteration**."
"  Indefinite iteration simply means that we don't know how many times we "
"will repeat but eventually the condition controlling the iteration will "
"fail and the iteration will stop. (Unless we have an infinite loop which "
"is of course a problem)"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:117
msgid ""
"What you will notice here is that the ``while`` loop is more work for you"
" --- the programmer --- than the equivalent ``for`` loop.  When using a "
"``while`` loop you have to control the loop variable yourself.  You give "
"it an initial value, test for completion, and then make sure you change "
"something in the body so that the loop terminates."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:123
msgid ""
"So why have two kinds of loop if ``for`` looks easier?  This next example"
" shows an indefinite iteration where we need the extra power that we get "
"from the ``while`` loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:129
msgid ""
"This workspace is provided for your convenience.  You can use this "
"activecode window to try out anything you like."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:134
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:143
msgid "iter-3-1: True or False: You can rewrite any for-loop as a while-loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:156
msgid ""
"iter-3-2: The following code contains an infinite loop.  Which is the "
"best explanation for why the loop does not terminate?"
msgstr ""

