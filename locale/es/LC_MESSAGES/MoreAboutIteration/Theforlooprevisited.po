# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:15
msgid "The ``for`` loop revisited"
msgstr ""

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:17
msgid ""
"Recall that the ``for`` loop processes each item in a list.  Each item in"
" turn is (re-)assigned to the loop variable, and the body of the loop is "
"executed. We saw this example in an earlier chapter."
msgstr ""

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:26
msgid ""
"for f in [\"Joe\", \"Amy\", \"Brad\", \"Angelina\", \"Zuki\", \"Thandi\","
" \"Paris\"]:\n"
"    print(\"Hi\", f, \"Please come to my party on Saturday\")"
msgstr ""

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:27
msgid ""
"We have also seen iteration paired with the update idea to form the "
"accumulator pattern.  For example, to compute the sum of the first n "
"integers, we could create a for loop using the ``range`` to produce the "
"numbers 1 through n. Using the accumulator pattern, we can start with a "
"running total variable initialized to 0 and on each iteration, add the "
"current value of the loop variable.  A function to compute this sum is "
"shown below."
msgstr ""

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:44
msgid ""
"def sumTo(aBound):\n"
"    theSum = 0\n"
"    for aNumber in range(1, aBound + 1):\n"
"        theSum = theSum + aNumber\n"
"\n"
"    return theSum\n"
"\n"
"print(sumTo(4))\n"
"\n"
"print(sumTo(1000))"
msgstr ""

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:45
msgid ""
"To review, the variable ``theSum`` is called the accumulator.  It is "
"initialized to zero before we start the loop.  The loop variable, "
"``aNumber`` will take on the values produced by the ``range(1, aBound + "
"1)`` function call.  Note that this produces all the integers from 1 up "
"to the value of ``aBound``.  If we had not added 1 to ``aBound``, the "
"range would have stopped one value short since ``range`` does not include"
" the upper bound."
msgstr ""

#: ../../_sources/MoreAboutIteration/Theforlooprevisited.rst:47
msgid ""
"The assignment statement, ``theSum = theSum + aNumber``, updates "
"``theSum`` each time through the loop.  This accumulates the running "
"total.  Finally, we return the value of the accumulator."
msgstr ""

