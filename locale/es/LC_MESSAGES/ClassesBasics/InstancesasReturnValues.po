# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:11
msgid "Instances as Return Values"
msgstr ""

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:13
msgid ""
"Functions and methods can return objects.  This is actually nothing new "
"since everything in Python is an object and we have been returning values"
" for quite some time.  The difference here is that we want to have the "
"method create an object using the constructor and then return it as the "
"value of the method."
msgstr ""

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:18
msgid ""
"Suppose you have a point object and wish to find the midpoint halfway "
"between it and some other target point.  We would like to write a method,"
" call it ``halfway`` that takes another ``Point`` as a parameter and "
"returns the ``Point`` that is halfway between the point and the target."
msgstr ""

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:57
msgid ""
"class Point:\n"
"\n"
"    def __init__(self, initX, initY):\n"
"        \"\"\" Create a new point at the given coordinates. \"\"\"\n"
"        self.x = initX\n"
"        self.y = initY\n"
"\n"
"    def getX(self):\n"
"        return self.x\n"
"\n"
"    def getY(self):\n"
"        return self.y\n"
"\n"
"    def distanceFromOrigin(self):\n"
"        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n"
"\n"
"    def __str__(self):\n"
"        return \"x=\" + str(self.x) + \", y=\" + str(self.y)\n"
"\n"
"    def halfway(self, target):\n"
"         mx = (self.x + target.x) / 2\n"
"         my = (self.y + target.y) / 2\n"
"         return Point(mx, my)\n"
"\n"
"p = Point(3, 4)\n"
"q = Point(5, 12)\n"
"mid = p.halfway(q)\n"
"\n"
"print(mid)\n"
"print(mid.getX())\n"
"print(mid.getY())"
msgstr ""

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:58
msgid ""
"The resulting Point, ``mid``, has an x value of 4 and a y value of 8.  We"
" can also use any other methods since ``mid`` is a ``Point`` object."
msgstr ""

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:65
msgid ""
"This workspace is provided for your convenience.  You can use this "
"activecode window to try out anything you like."
msgstr ""

#: ../../_sources/ClassesBasics/InstancesasReturnValues.rst:67
msgid "\n"
msgstr ""

