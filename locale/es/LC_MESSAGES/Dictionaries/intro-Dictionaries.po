# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:15
msgid "Dictionaries"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:20
msgid ""
"All of the compound data types we have studied in detail so far --- "
"strings, lists, and tuples --- are sequential collections.  This means "
"that the items in the collection are ordered from left to right and they "
"use integers as indices to access the values they contain."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:25
msgid ""
"**Dictionaries** are a different kind of collection. They are Python's "
"built-in **mapping type**. A map is an unordered, associative collection."
"  The association, or mapping, is from a **key**, which can be any "
"immutable type, to a **value**, which can be any Python data object."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:30
msgid ""
"As an example, we will create a dictionary to translate English words "
"into Spanish. For this dictionary, the keys are strings and the values "
"will also be strings."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:33
msgid ""
"One way to create a dictionary is to start with the empty dictionary and "
"add **key-value pairs**. The empty dictionary is denoted ``{}``"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:43
msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp12_dict1\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(chp12_dict1)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp12_dict1_trace = {\"code\": \"eng2sp = {}\\neng2sp['one'] = "
"'uno'\\neng2sp['two'] = 'dos'\\neng2sp['three'] = 'tres'\", \"trace\": "
"[{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\","
" \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"eng2sp\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"eng2sp\": [\"REF\", 1]}, \"heap\": {\"1\": [\"DICT\"]}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"eng2sp\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"eng2sp\": [\"REF\", 1]}, "
"\"heap\": {\"1\": [\"DICT\", [\"one\", \"uno\"]]}, \"line\": 3, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"eng2sp\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"eng2sp\": [\"REF\", 1]}, \"heap\": {\"1\": [\"DICT\", "
"[\"two\", \"dos\"], [\"one\", \"uno\"]]}, \"line\": 4, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"eng2sp\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"eng2sp\": [\"REF\", 1]}, \"heap\": {\"1\": [\"DICT\", [\"three\", "
"\"tres\"], [\"two\", \"dos\"], [\"one\", \"uno\"]]}, \"line\": 4, "
"\"event\": \"return\"}]};\n"
"var chp12_dict1_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp12_dict1_vis = new "
"ExecutionVisualizer('chp12_dict1',chp12_dict1_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp12_dict1_vis,'chp12_dict1');\n"
"        styleButtons('chp12_dict1');\n"
"        allVisualizers.push(chp12_dict1_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"chp12_dict1_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp12_dict1_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'chp12_dict1'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp12_dict1_vis) {\n"
"        chp12_dict1_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:44
msgid ""
"The first assignment creates an empty dictionary named ``eng2sp``.  The "
"other assignments add new key-value pairs to the dictionary.  The left "
"hand side gives the dictionary and the key being associated.  The right "
"hand side gives the value being associated with that key. We can print "
"the current value of the dictionary in the usual way. The key-value pairs"
" of the dictionary are separated by commas. Each pair contains a key and "
"a value separated by a colon."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:51
msgid ""
"The order of the pairs may not be what you expected. Python uses complex "
"algorithms, designed for very fast access, to determine where the key-"
"value pairs are stored in a dictionary. For our purposes we can think of "
"this ordering as unpredictable."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:56
msgid ""
"Another way to create a dictionary is to provide a list of key-value "
"pairs using the same syntax as the previous output."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:64
msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp12_dict2\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(chp12_dict2)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp12_dict2_trace = {\"code\": \"eng2sp = {'three': 'tres', 'one': "
"'uno', 'two': 'dos'}\\nprint(eng2sp)\", \"trace\": [{\"ordered_globals\":"
" [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"eng2sp\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"eng2sp\": [\"REF\", 1]}, \"heap\": {\"1\": [\"DICT\", [\"three\", "
"\"tres\"], [\"two\", \"dos\"], [\"one\", \"uno\"]]}, \"line\": 2, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"eng2sp\"], "
"\"stdout\": \"{'three': 'tres', 'two': 'dos', 'one': 'uno'}\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"eng2sp\": [\"REF\", 1]}, \"heap\": {\"1\": [\"DICT\", [\"three\", "
"\"tres\"], [\"two\", \"dos\"], [\"one\", \"uno\"]]}, \"line\": 2, "
"\"event\": \"return\"}]};\n"
"var chp12_dict2_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp12_dict2_vis = new "
"ExecutionVisualizer('chp12_dict2',chp12_dict2_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp12_dict2_vis,'chp12_dict2');\n"
"        styleButtons('chp12_dict2');\n"
"        allVisualizers.push(chp12_dict2_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"chp12_dict2_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp12_dict2_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'chp12_dict2'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp12_dict2_vis) {\n"
"        chp12_dict2_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:65
msgid ""
"It doesn't matter what order we write the pairs. The values in a "
"dictionary are accessed with keys, not with indices, so there is no need "
"to care about ordering."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:69
msgid "Here is how we use a key to look up the corresponding value."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:79
msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp12_dict3\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(chp12_dict3)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp12_dict3_trace = {\"code\": \"eng2sp = {'three': 'tres', 'one': "
"'uno', 'two': 'dos'}\\n\\nvalue = eng2sp['two']\\nprint(value)\", "
"\"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, "
"\"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"eng2sp\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"eng2sp\": [\"REF\", 1]}, "
"\"heap\": {\"1\": [\"DICT\", [\"three\", \"tres\"], [\"two\", \"dos\"], "
"[\"one\", \"uno\"]]}, \"line\": 3, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"eng2sp\", \"value\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"eng2sp\": [\"REF\", 1], \"value\": \"dos\"}, \"heap\": {\"1\": "
"[\"DICT\", [\"three\", \"tres\"], [\"two\", \"dos\"], [\"one\", "
"\"uno\"]]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\":"
" [\"eng2sp\", \"value\"], \"stdout\": \"dos\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"eng2sp\": "
"[\"REF\", 1], \"value\": \"dos\"}, \"heap\": {\"1\": [\"DICT\", "
"[\"three\", \"tres\"], [\"two\", \"dos\"], [\"one\", \"uno\"]]}, "
"\"line\": 4, \"event\": \"return\"}]};\n"
"var chp12_dict3_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp12_dict3_vis = new "
"ExecutionVisualizer('chp12_dict3',chp12_dict3_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp12_dict3_vis,'chp12_dict3');\n"
"        styleButtons('chp12_dict3');\n"
"        allVisualizers.push(chp12_dict3_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"chp12_dict3_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp12_dict3_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'chp12_dict3'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp12_dict3_vis) {\n"
"        chp12_dict3_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:80
msgid "The key ``'two'`` yields the value ``'dos'``."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:86
msgid ""
"This workspace is provided for your convenience.  You can use this "
"activecode window to try out anything you like."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:88
msgid "\n"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:91
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:102
msgid "False"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:102
msgid "True"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:102
msgid ""
"Dictionaries associate keys with values but there is no assumed order for"
" the entries."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:102
msgid ""
"Yes, dictionaries are associative collections meaning that they store "
"key-value pairs."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:100
msgid "dict-1-1: A dictionary is an unordered collection of key-value pairs."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "12"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "6"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "23"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "Error, you cannot use the index operator with a dictionary."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "12 is associated with the key cat."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "Yes, 6 is associated with the key dog."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid "23 is associated with the key elephant."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:122
msgid ""
"The [ ] operator, when used with a dictionary, will look up a value based"
" on its key."
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:115
msgid "dict-1-2: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:117
msgid ""
"mydict = {\"cat\":12, \"dog\":6, \"elephant\":23}\n"
"print(mydict[\"dog\"])"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:18
msgid "dictionary"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:18
msgid "mapping type"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:18
msgid "key"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:18
msgid "value"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:18
msgid "key-value pair"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:123
msgid "del statement"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:123
msgid "statement"
msgstr ""

#: ../../_sources/Dictionaries/intro-Dictionaries.rst:123
msgid "del"
msgstr ""

