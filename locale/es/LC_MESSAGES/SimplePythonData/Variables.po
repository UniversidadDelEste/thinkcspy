# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 14:52-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SimplePythonData/Variables.rst:15
msgid "Variables"
msgstr ""

msgid ""
"<div id=\"assignvid\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/assignment.png\">\n"
"    <source "
"src=\"http://media.interactivepython.org/thinkcsVideos/Variables.mov\" "
"type=\"video/mp4\"></source>\n"
"    <source "
"src=\"http://media.interactivepython.org/thinkcsVideos/Variables.webm\" "
"type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#assignvid_thumb').click(function(e) {\n"
"         $('#assignvid').show();\n"
"         $('#assignvid_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'assignvid'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#assignvid video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#assignvid video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'assignvid'});\n"
"      });\n"
"   });\n"
"</script>\n"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:24
msgid ""
"One of the most powerful features of a programming language is the "
"ability to manipulate **variables**. A variable is a name that refers to "
"a value."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:27
msgid ""
"**Assignment statements** create new variables and also give them values "
"to refer to."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:29
msgid ""
"message = \"What's up, Doc?\"\n"
"n = 17\n"
"pi = 3.14159"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:35
msgid ""
"This example makes three assignments. The first assigns the string value "
"``\"What's up, Doc?\"`` to a new variable named ``message``. The second "
"gives the integer ``17`` to ``n``, and the third assigns the floating-"
"point number ``3.14159`` to a variable called ``pi``."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:40
msgid ""
"The **assignment token**, ``=``, should not be confused with *equality* "
"(we will see later that equality uses the ``==`` token).  The assignment "
"statement links a *name*, on the left hand side of the operator, with a "
"*value*, on the right hand side.  This is why you will get an error if "
"you enter:"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:45
msgid "17 = n"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:51
msgid ""
"When reading or writing code, say to yourself \"n is assigned 17\" or \"n"
" gets the value 17\" or \"n is a reference to the object 17\" or \"n "
"refers to the object 17\".  Don't say \"n equals 17\"."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:54
msgid ""
"A common way to represent variables on paper is to write the name with an"
" arrow pointing to the variable's value. This kind of figure, known as a "
"**reference diagram**, is often called a **state snapshot** because it "
"shows what state each of the variables is in at a particular instant in "
"time.  (Think of it as the variable's state of mind). This diagram shows "
"the result of executing the assignment statements shown above."
msgstr ""

msgid ""
".. image:: SimplePythonData/Figures/refdiagram1.png\n"
"   :alt: Reference Diagram"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:63
msgid ""
"If you ask Python to evaluate a variable, it will produce the value that "
"is currently linked to the variable.  In other words, evaluating a "
"variable will give you the value that is referred to by the variable."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:78
msgid ""
"In each case the result is the value of the variable. To see this in even"
" more detail, we can run the program using codelens."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch02_9_codelens\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(ch02_9_codelens)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch02_9_codelens_trace = {\"code\": \"message = \\\"What's up, "
"Doc?\\\"\\nn = 17\\npi = "
"3.14159\\n\\nprint(message)\\nprint(n)\\nprint(pi)\", \"trace\": "
"[{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\","
" \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"message\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"message\": \"What's up, Doc?\"}, \"heap\": {}, \"line\": "
"2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"message\", \"n\"],"
" \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"message\": \"What's up, Doc?\", \"n\": 17}, \"heap\": {},"
" \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"message\", \"n\", \"pi\"], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"message\": "
"\"What's up, Doc?\", \"pi\": 3.1416, \"n\": 17}, \"heap\": {}, \"line\": "
"5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"message\", \"n\", "
"\"pi\"], \"stdout\": \"What's up, Doc?\\n\", \"func_name\": \"<module>\","
" \"stack_to_render\": [], \"globals\": {\"message\": \"What's up, Doc?\","
" \"pi\": 3.1416, \"n\": 17}, \"heap\": {}, \"line\": 6, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"message\", \"n\", \"pi\"], "
"\"stdout\": \"What's up, Doc?\\n17\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"message\": \"What's up, Doc?\", "
"\"pi\": 3.1416, \"n\": 17}, \"heap\": {}, \"line\": 7, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"message\", \"n\", \"pi\"], "
"\"stdout\": \"What's up, Doc?\\n17\\n3.14159\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"message\": "
"\"What's up, Doc?\", \"pi\": 3.1416, \"n\": 17}, \"heap\": {}, \"line\": "
"7, \"event\": \"return\"}]};\n"
"var ch02_9_codelens_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch02_9_codelens_vis = new "
"ExecutionVisualizer('ch02_9_codelens',ch02_9_codelens_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch02_9_codelens_vis,'ch02_9_codelens');\n"
"        styleButtons('ch02_9_codelens');\n"
"        allVisualizers.push(ch02_9_codelens_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"ch02_9_codelens_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch02_9_codelens_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'ch02_9_codelens'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch02_9_codelens_vis) {\n"
"        ch02_9_codelens_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:92
msgid ""
"Now, as you step through the statements, you can see the variables and "
"the values they reference as those references are created."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:99
msgid ""
"Variables also have types; again, we can ask the interpreter what they "
"are."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:114
msgid "The type of a variable is the type of the object it currently refers to."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:117
msgid ""
"We use variables in a program to \"remember\" things, like the current "
"score at the football game.  But variables are *variable*. This means "
"they can change over time, just like the scoreboard at a football game.  "
"You can assign a value to a variable, and later assign a different value "
"to the same variable."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:124
msgid ""
"This is different from math. In math, if you give `x` the value 3, it "
"cannot change to refer to a different value half-way through your "
"calculations!"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:128
msgid ""
"To see this, read and then run the following program. You'll notice we "
"change the value of `day` three times, and on the third assignment we "
"even give it a value that is of a different type."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch02_11\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (ch02_11)</span>"
" </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch02_11_trace = {\"code\": \"day = "
"\\\"Thursday\\\"\\nprint(day)\\nday = \\\"Friday\\\"\\nprint(day)\\nday ="
" 21\\nprint(day)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": "
"\"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"day\"], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"day\": "
"\"Thursday\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"day\"], \"stdout\": \"Thursday\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"day\": \"Thursday\"}, \"heap\": {}, \"line\": 3, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"day\"], \"stdout\": "
"\"Thursday\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"day\": \"Friday\"}, \"heap\": {}, \"line\": 4, \"event\":"
" \"step_line\"}, {\"ordered_globals\": [\"day\"], \"stdout\": "
"\"Thursday\\nFriday\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"day\": \"Friday\"}, \"heap\": "
"{}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"day\"], \"stdout\": \"Thursday\\nFriday\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"day\": 21}, "
"\"heap\": {}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"day\"], \"stdout\": "
"\"Thursday\\nFriday\\n21\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"day\": 21}, \"heap\": {}, "
"\"line\": 6, \"event\": \"return\"}]};\n"
"var ch02_11_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch02_11_vis = new ExecutionVisualizer('ch02_11',ch02_11_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch02_11_vis,'ch02_11');\n"
"        styleButtons('ch02_11');\n"
"        allVisualizers.push(ch02_11_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"ch02_11_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch02_11_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'ch02_11'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch02_11_vis) {\n"
"        ch02_11_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:146
msgid ""
"A great deal of programming is about having the computer remember things."
"  For example, we might want to keep track of the number of missed calls "
"on your phone.  Each time another call is missed, we will arrange to "
"update or change the variable so that it will always reflect the correct "
"value."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:150
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:163
msgid "data-4-1: What is printed when the following statements execute?"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:165
msgid ""
"day = \"Thursday\"\n"
"day = 32.5\n"
"day = 19\n"
"print(day)"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:173
msgid "keyword"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:173
msgid "underscore character"
msgstr ""

