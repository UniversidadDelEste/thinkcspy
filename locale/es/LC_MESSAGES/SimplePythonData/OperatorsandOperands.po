# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:15
msgid "Operators and Operands"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:17
msgid ""
"**Operators** are special tokens that represent computations like "
"addition, multiplication and division. The values the operator works on "
"are called **operands**."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:21
msgid ""
"The following are all legal Python expressions whose meaning is more or "
"less clear::"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:31
msgid ""
"The tokens ``+``, ``-``, and ``*``, and the use of parenthesis for "
"grouping, mean in Python what they mean in mathematics. The asterisk "
"(``*``) is the token for multiplication, and ``**`` is the token for "
"exponentiation. Addition, subtraction, multiplication, and exponentiation"
" all do what you expect."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:46
msgid ""
"When a variable name appears in the place of an operand, it is replaced "
"with the value that it refers to before the operation is performed. For "
"example, what if we wanted to convert 645 minutes into hours. In Python "
"3, division is denoted by the operator token ``/`` which always evaluates"
" to a floating point result."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:59
msgid ""
"What if, on the other hand, we had wanted to know how many *whole* hours "
"there are and how many minutes remain.  To help answer this question, "
"Python gives us a second flavor of the division operator.  This version, "
"called **integer division**, uses the token ``//``.  It always "
"*truncates* its result down to the next smallest integer (to the left on "
"the number line)."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:74
msgid ""
"Pay particular attention to the first two examples above.  Notice that "
"the result of floating point division is ``1.75`` but the result of the "
"integer division is simply ``1``. Take care that you choose the correct "
"flavor of the division operator.  If you're working with expressions "
"where you need floating point values, use the division operator ``/``.  "
"If you want an integer result, use ``//``."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:82
msgid ""
"The **modulus operator**, sometimes also called the **remainder "
"operator** or **integer remainder operator** works on integers (and "
"integer expressions) and yields the remainder when the first operand is "
"divided by the second. In Python, the modulus operator is a percent sign "
"(``%``). The syntax is the same as for other operators."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:96
msgid ""
"In the above example, 7 divided by 3 is 2 when we use integer division "
"and there is a remainder of 1."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:98
msgid ""
"The modulus operator turns out to be surprisingly useful. For example, "
"you can check whether one number is divisible by another---if ``x % y`` "
"is zero, then ``x`` is divisible by ``y``. Also, you can extract the "
"right-most digit or digits from a number.  For example, ``x % 10`` yields"
" the right-most digit of ``x`` (in base 10). Similarly ``x % 100`` yields"
" the last two digits."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:105
msgid ""
"Finally, returning to our time example, the remainder operator is "
"extremely useful for doing conversions, say from seconds, to hours, "
"minutes and seconds. If we start with a number of seconds, say 7684, the "
"following program uses integer division and remainder to convert to an "
"easier form.  Step through it to be sure you understand how the division "
"and remainder operators are being used to compute the correct values."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:119
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:132
msgid "data-7-1: What value is printed when the following statement executes?"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:151
msgid "data-7-2: What value is printed when the following statement executes?"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:169
msgid "data-7-3: What value is printed when the following statement executes?"
msgstr ""

