# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:15
msgid "Values and Data Types"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:17
msgid ""
"A **value** is one of the fundamental things --- like a word or a number "
"--- that a program manipulates. The values we have seen so far are ``5`` "
"(the result when we added ``2 + 3``), and ``\"Hello, World!\"``.  We "
"often refer to these values as **objects** and we will use the words "
"value and object interchangeably."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:22
msgid ""
"Actually, the 2 and the 3 that are part of the addition above are "
"values(objects) as well."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:24
msgid ""
"These objects are classified into different **classes**, or **data "
"types**: ``4`` is an *integer*, and ``\"Hello, World!\"`` is a *string*, "
"so-called because it contains a string or sequence of letters. You (and "
"the interpreter) can identify strings because they are enclosed in "
"quotation marks."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:29
msgid ""
"If you are not sure what class a value falls into, Python has a function "
"called **type** which can tell you."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:38
msgid ""
"print(type(\"Hello, World!\"))\n"
"print(type(17))\n"
"print(\"Hello, World\")"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:39
msgid ""
"Not surprisingly, strings belong to the class **str** and integers belong"
" to the class **int**."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:44
msgid ""
"When we show the value of a string using the ``print`` function, such as "
"in the third example above, the quotes are no longer present.  The value "
"of the string is the sequence of characters inside the quotes.  The "
"quotes are only necessary to help Python know what the value is."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:48
msgid ""
"In the Python shell, it is not necessary to use the ``print`` function to"
" see the values shown above.  The shell evaluates the Python function and"
" automatically prints the result.  For example, consider the shell "
"session shown below.  When we ask the shell to evaluate ``type(\"Hello, "
"World!\")``, it responds with the appropriate answer and then goes on to "
"display the prompt for the next use."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:54
msgid ""
"Python 3.1.2 (r312:79360M, Mar 24 2010, 01:33:18)\n"
"[GCC 4.0.1 (Apple Inc. build 5493)] on darwin\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more "
"information.\n"
">>> type(\"Hello, World!\")\n"
"<class 'str'>\n"
">>> type(17)\n"
"<class 'int'>\n"
">>> \"Hello, World\"\n"
"'Hello, World'\n"
">>>"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:65
msgid ""
"Note that in the last example, we simply ask the shell to evaluate the "
"string \"Hello, World\".  The result is as you might expect, the string "
"itself."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:67
msgid ""
"Continuing with our discussion of data types, numbers with a decimal "
"point belong to a class called **float**, because these numbers are "
"represented in a format called *floating-point*.  At this stage, you can "
"treat the words *class* and *type* interchangeably.  We'll come back to a"
" deeper understanding of what a class is in later chapters."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:78
msgid "print(type(3.2))"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:79
msgid ""
"What about values like ``\"17\"`` and ``\"3.2\"``? They look like "
"numbers, but they are in quotation marks like strings."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:87
msgid ""
"print(type(\"17\"))\n"
"print(type(\"3.2\"))"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:88
msgid "They're strings!"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:90
msgid ""
"Strings in Python can be enclosed in either single quotes (``'``) or "
"double quotes (``\"``), or three of each (``'''`` or ``\"\"\"``)"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:101
msgid ""
"print(type('This is a string.') )\n"
"print(type(\"And so is this.\") )\n"
"print(type(\"\"\"and this.\"\"\") )\n"
"print(type('''and even this...''') )"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:102
msgid ""
"Double quoted strings can contain single quotes inside them, as in "
"``\"Bruce's beard\"``, and single quoted strings can have double quotes "
"inside them, as in ``'The knights who say \"Ni!\"'``. Strings enclosed "
"with three occurrences of either quote symbol are called triple quoted "
"strings.  They can contain either single or double quotes:"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:114
msgid "print('''\"Oh no\", she exclaimed, \"Ben's bike is broken!\"''')"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:115
msgid "Triple quoted strings can even span multiple lines:"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:128
msgid ""
"message = \"\"\"This message will\n"
"span several\n"
"lines.\"\"\"\n"
"print(message)\n"
"\n"
"print(\"\"\"This message will span\n"
"several lines\n"
"of the text.\"\"\")"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:129
msgid ""
"Python doesn't care whether you use single or double quotes or the three-"
"of-a-kind quotes to surround your strings.  Once it has parsed the text "
"of your program or command, the way it stores the value is identical in "
"all cases, and the surrounding quotes are not part of the value."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:139
msgid ""
"print('This is a string.')\n"
"print(\"\"\"And so is this.\"\"\")"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:140
msgid ""
"So the Python language designers usually chose to surround their strings "
"by single quotes.  What do you think would happen if the string already "
"contained single quotes?"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:144
msgid ""
"When you type a large integer, you might be tempted to use commas between"
" groups of three digits, as in ``42,000``. This is not a legal integer in"
" Python, but it does mean something else, which is legal:"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:154
msgid ""
"print(42000)\n"
"print(42,000)"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:155
msgid ""
"Well, that's not what we expected at all! Because of the comma, Python "
"chose to treat this as a *pair* of values.     In fact, the print "
"function can print any number of values as long as you separate them by "
"commas.  Notice that the values are separated by spaces when they are "
"displayed."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:164
msgid ""
"print(42, 17, 56, 34, 11, 4.35, 32)\n"
"print(3.4, \"hello\", 45)"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:165
msgid ""
"Remember not to put commas or spaces in your integers, no matter how big "
"they are. Also revisit what we said in the previous chapter: formal "
"languages are strict, the notation is concise, and even the smallest "
"change might mean something quite different from what you intended."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:170
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid ""
"Print out the value and determine the data type based on the value "
"printed."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid "Use the type function."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid "Use it in a known equation and print the result."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid "Look at the declaration of the variable."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid ""
"You may be able to determine the data type based on the printed value, "
"but it may also be  deceptive, like when a string prints, there are no "
"quotes around it."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid "The type function will tell you the class the value belongs to."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid "Only numeric values can be used in equations."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:184
msgid "In Python variables are not declared."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:183
msgid "data-2-1: How can you determine the type of a variable?"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "Character"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "Integer"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "Float"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "String"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "It is not a single character."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "The data is not numeric."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "The value is not numeric with a decimal point."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:198
msgid "Strings can be enclosed in single quotes."
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:196
msgid "data-2-2: What is the data type of 'this is what kind of data'?"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:199
msgid "type converter functions"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:199
msgid "int"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:199
msgid "float"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:199
msgid "str"
msgstr ""

#: ../../_sources/SimplePythonData/ValuesandDataTypes.rst:199
msgid "truncation"
msgstr ""

