# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/PythonTurtle/Exercises.rst:11
msgid "Exercises"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:23
msgid "Write a program that prints ``We like Python's turtles!`` 100 times."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:32
msgid ""
"for i in range(100):\n"
"    print(\"We like Python's turtles!\")"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:59
msgid "Write a program that uses a for loop to print"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst
msgid "``One of the months of the year is January``"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst
msgid "``One of the months of the year is February``"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst
msgid "``One of the months of the year is March``"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst
msgid "etc ..."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:69
msgid ""
"for amonth in ['January', 'February', 'March', 'April', 'May', 'June', "
"'July', 'August', 'September', 'November', 'December']:\n"
"    print(\"One of the months of the year is\", amonth)"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:83
msgid "Assume you have a list of numbers ``12, 10, 32, 3, 66, 17, 42, 99, 20``"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:85
msgid "Write a loop that prints each of the numbers on a new line."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:86
msgid "Write a loop that prints each number and its square on a new line."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:98
msgid ""
"Use ``for`` loops to make a turtle draw these regular polygons (regular "
"means all sides the same lengths, all angles the same):"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:101
msgid "An equilateral triangle"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:102
msgid "A square"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:103
msgid "A hexagon (six sides)"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:104
msgid "An octagon (eight sides)"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:109
msgid ""
"# draw an equilateral triangle\n"
"import turtle\n"
"\n"
"wn = turtle.Screen()\n"
"norvig = turtle.Turtle()\n"
"\n"
"for i in range(3):\n"
"    norvig.forward(100)\n"
"\n"
"    # the angle of each vertice of a regular polygon\n"
"    # is 360 divided by the number of sides\n"
"    norvig.left(360/3)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:126
msgid ""
"# draw a square\n"
"import turtle\n"
"\n"
"wn = turtle.Screen()\n"
"kurzweil = turtle.Turtle()\n"
"\n"
"for i in range(4):\n"
"    kurzweil.forward(100)\n"
"    kurzweil.left(360/4)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:140
msgid ""
"# draw a hexagon\n"
"import turtle\n"
"\n"
"wn = turtle.Screen()\n"
"dijkstra = turtle.Turtle()\n"
"\n"
"for i in range(6):\n"
"    dijkstra.forward(100)\n"
"    dijkstra.left(360/6)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:154
msgid ""
"# draw an octogon\n"
"import turtle\n"
"\n"
"wn = turtle.Screen()\n"
"knuth = turtle.Turtle()\n"
"\n"
"for i in range(8):\n"
"    knuth.forward(75)\n"
"    knuth.left(360/8)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:179
msgid ""
"Write a program that asks the user for the number of sides, the length of"
" the side, the color, and the fill color of a regular polygon.  The "
"program should draw the polygon and then fill it in."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:193
msgid ""
"A drunk pirate makes a random turn and then takes 100 steps forward, "
"makes another random turn, takes another 100 steps, turns another random "
"amount, etc.  A social science student records the angle of each turn "
"before the next 100 steps are taken.  Her experimental data is ``160, "
"-43, 270, -97, -43, 200, -940, 17, -86``. (Positive angles are counter-"
"clockwise.)  Use a turtle to draw the path taken by our drunk friend.  "
"After the pirate is done walking, print the current heading."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:222
msgid ""
"import turtle\n"
"\n"
"wn = turtle.Screen()\n"
"lovelace = turtle.Turtle()\n"
"\n"
"# move the turtle forward a little so that the whole path fits on the "
"screen\n"
"lovelace.penup()\n"
"lovelace.forward(60)\n"
"\n"
"# now draw the drunk pirate's path\n"
"lovelace.pendown()\n"
"for angle in [160, -43, 270, -97, -43, 200, -940, 17, -86]:\n"
"\n"
"    # we use .left() so that positive angles are counter-clockwise\n"
"    # and negative angles are clockwise\n"
"    lovelace.left(angle)\n"
"    lovelace.forward(100)\n"
"\n"
"# the .heading() method gives us the turtle's current heading in degrees\n"
"print(\"The pirate's final heading was\", lovelace.heading())\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:246
msgid ""
"import turtle\n"
"wn = turtle.Screen()\n"
"tess = turtle.Turtle()\n"
"tess.right(90)\n"
"tess.left(3600)\n"
"tess.right(-90)\n"
"tess.left(3600)\n"
"tess.left(3645)\n"
"tess.forward(-100)"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:235
msgid ""
"On a piece of scratch paper, trace the following program and show the "
"drawing.  When you are done, press ``run`` and check your answer."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:258
msgid "Write a program to draw a shape like this:"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:261
msgid ".. image:: PythonTurtle/Figures/star.png"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:274
msgid ""
"import turtle\n"
"\n"
"turing = turtle.Turtle()\n"
"\n"
"for i in range(5):\n"
"    turing.forward(110)\n"
"    turing.left(216)"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:288
msgid "Write a program to draw a face of a clock that looks something like this:"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:291
msgid ".. image:: PythonTurtle/Figures/tess_clock1.png"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:302
msgid ""
"Write a program to draw some kind of picture.  Be creative and experiment"
" with the turtle methods provided in :ref:`turtle_methods`."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:320
msgid ""
"import turtle\n"
"\n"
"tanenbaum = turtle.Turtle()\n"
"\n"
"tanenbaum.hideturtle()\n"
"tanenbaum.speed(20)\n"
"\n"
"for i in range(350):\n"
"    tanenbaum.forward(i)\n"
"    tanenbaum.right(98)"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:334
msgid ""
"Create a turtle and assign it to a variable.  When you print its type, "
"what do you get?"
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:346
msgid ""
"A sprite is a simple spider shaped thing with n legs coming out from a "
"center point. The angle between each leg is 360 / n degrees."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:349
msgid ""
"Write a program to draw a sprite where the number of legs is provided by "
"the user."
msgstr ""

#: ../../_sources/PythonTurtle/Exercises.rst:380
msgid ""
"import turtle\n"
"\n"
"wn = turtle.Screen()\n"
"\n"
"babbage = turtle.Turtle()\n"
"babbage.shape(\"triangle\")\n"
"\n"
"n = int(input(\"How many legs should this sprite have? \"))\n"
"angle = 360 / n\n"
"\n"
"for i in range(n):\n"
"    # draw the leg\n"
"    babbage.right(angle)\n"
"    babbage.forward(65)\n"
"    babbage.stamp()\n"
"\n"
"    # go back to the middle and turn back around\n"
"    babbage.right(180)\n"
"    babbage.forward(65)\n"
"    babbage.right(180)\n"
"\n"
"babbage.shape(\"circle\")\n"
"\n"
"wn.exitonclick()"
msgstr ""

