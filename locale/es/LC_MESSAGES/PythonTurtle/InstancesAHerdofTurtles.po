# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:15
msgid "Instances --- A Herd of Turtles"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:17
msgid ""
"Just like we can have many different integers in a program, we can have "
"many turtles.  Each of them is an independent object and we call each one"
" an **instance** of the Turtle type (class).  Each instance has its own "
"attributes and methods --- so alex might draw with a thin black pen and "
"be at some position, while tess might be going in her own direction with "
"a fat pink pen.  So here is what happens when alex completes a square and"
" tess completes her triangle:"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:61
msgid ""
"\"Overall Tour\"; 1-31: Example03_Tour01_Line01; 1-3: "
"Example03_Tour01_Line02; 6-8: Example03_Tour01_Line03; 10: "
"Example03_Tour01_Line04; 6,10: Example03_Tour01_Line05; 12-17: "
"Example03_Tour01_Line06; 19-20: Example03_Tour01_Line07; 22-29: "
"Example03_Tour01_Line08; 31: Example03_Tour01_Line09;"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:61
msgid ""
"\"Line by Line Tour\"; 1: Example01_Tour02_Line01; 2: "
"Example01_Tour02_Line02; 3: Example02_Tour02_Line03; 6: "
"Example02_Tour02_Line04; 7: Example03_Tour02_Line05; 8: "
"Example03_Tour02_Line06; 10: Example01_Tour02_Line03; 6,10: "
"Example03_Tour01_Line05; 12-17: Example03_Tour02_Line09; 12-13: "
"Example03_Tour02_Line10; 12: Example03_Tour02_Line11; 13: "
"Example03_Tour02_Line12; 14-15: Example03_Tour02_Line13; 14: "
"Example03_Tour02_Line14; 15: Example03_Tour02_Line15; 16-17: "
"Example03_Tour02_Line16; 16: Example03_Tour02_Line17; 17: "
"Example03_Tour02_Line18; 19-20: Example03_Tour01_Line07; 19: "
"Example03_Tour02_Line20; 20: Example03_Tour02_Line21; 22-29: "
"Example03_Tour01_Line08; 10: Example03_Tour02_Line23; 22-23: "
"Example03_Tour02_Line24; 22: Example03_Tour02_Line25; 23: "
"Example03_Tour02_Line26; 24-25: Example03_Tour02_Line27; 26-27: "
"Example03_Tour02_Line28; 28-29: Example03_Tour02_Line29; 31: "
"Example02_Tour02_Line10;"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:61
msgid ""
"import turtle\n"
"wn = turtle.Screen()             # Set up the window and its attributes\n"
"wn.bgcolor(\"lightgreen\")\n"
"\n"
"\n"
"tess = turtle.Turtle()           # create tess and set some attributes\n"
"tess.color(\"hotpink\")\n"
"tess.pensize(5)\n"
"\n"
"alex = turtle.Turtle()           # create alex\n"
"\n"
"tess.forward(80)                 # Let tess draw an equilateral triangle\n"
"tess.left(120)\n"
"tess.forward(80)\n"
"tess.left(120)\n"
"tess.forward(80)\n"
"tess.left(120)                   # complete the triangle\n"
"\n"
"tess.right(180)                  # turn tess around\n"
"tess.forward(80)                 # move her away from the origin\n"
"\n"
"alex.forward(50)                 # make alex draw a square\n"
"alex.left(90)\n"
"alex.forward(50)\n"
"alex.left(90)\n"
"alex.forward(50)\n"
"alex.left(90)\n"
"alex.forward(50)\n"
"alex.left(90)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:62
msgid "Here are some *How to think like a computer scientist* observations:"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:64
msgid ""
"There are 360 degrees in a full circle.  If you add up all the turns that"
" a turtle makes, *no matter what steps occurred between the turns*, you "
"can easily figure out if they add up to some multiple of 360.  This "
"should convince you that alex is facing in exactly the same direction as "
"he was when he was first created. (Geometry conventions have 0 degrees "
"facing East and that is the case here too!)"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:70
msgid ""
"We could have left out the last turn for alex, but that would not have "
"been as satisfying.  If you're asked to draw a closed shape like a square"
" or a rectangle, it is a good idea to complete all the turns and to leave"
" the turtle back where it started, facing the same direction as it "
"started in. This makes reasoning about the program and composing chunks "
"of code into bigger programs easier for us humans!"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:76
msgid ""
"We did the same with tess: she drew her triangle and turned through a "
"full 360 degress.  Then we turned her around and moved her aside.  Even "
"the blank line 18 is a hint about how the programmer's *mental chunking* "
"is working: in big terms, tess' movements were chunked as \"draw the "
"triangle\"  (lines 12-17) and then \"move away from the origin\" (lines "
"19 and 20)."
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:81
msgid ""
"One of the key uses for comments is to record your mental chunking, and "
"big ideas.   They're not always explicit in the code."
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:83
msgid ""
"And, uh-huh, two turtles may not be enough for a herd, but you get the "
"idea!"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:86
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:96
msgid "True"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:96
msgid "False"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:96
msgid ""
"You can create and use as many turtles as you like.  As long as they have"
" different names, you can operate them independently, and make them move "
"in any order you like.  To convince yourself this is true, try "
"interleaving the instructions for alex and tess in ActiveCode box 3."
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:96
msgid ""
"You can create and use as many turtles as you like.  As long as they have"
" different names, you can operate them independently, and make them move "
"in any order you like.  If you are not totally convinced, try "
"interleaving the instructions for alex and tess in ActiveCode box 3."
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:95
msgid ""
"turtle-2-1: True or False: You can only have one active turtle at a time."
"  If you create a second one, you will no longer be able to access or use"
" the first."
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:97
msgid "**Mixed up programs**"
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:122
msgid ""
"\n"
"    <pre data-component=\"parsons\" id=\"3_6\">\n"
"        <span data-question>turtle-2-2: The following program has one "
"turtle, \"jamal\", draw a capital L in blue and then another, \"tina\", "
"draw a line to the west in orange as shown to the left, <img "
"src=\"../_static/TwoTurtles1.png\" width=\"150\" align=\"left\" "
"hspace=\"10\" vspace=\"5\" />.  The program should do all set-up, have "
"\"jamal\" draw the L, and then have \"tina\" draw the line.   Finally, it"
" should set the window to close when the user clicks in it.<br /><br "
"/><p>Drag the blocks of statements from the left column to the right "
"column and put them in the right order.  Then click on <i>Check Me</i> to"
" see if you are right. You will be told if any of the lines are in the "
"wrong order.</p></span>import turtle\n"
"wn = turtle.Screen()\n"
"---\n"
"jamal = turtle.Turtle()\n"
"jamal.pensize(10)\n"
"jamal.color(\"blue\")\n"
"jamal.right(90)\n"
"jamal.forward(150)\n"
"---\n"
"jamal.left(90)\n"
"jamal.forward(75)\n"
"---\n"
"tina = turtle.Turtle()\n"
"tina.pensize(10)\n"
"tina.color(\"orange\")\n"
"tina.left(180)\n"
"tina.forward(75)\n"
"---\n"
"wn.exitonclick()</pre>\n"
"    "
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:145
msgid ""
"\n"
"    <pre data-component=\"parsons\" id=\"3_7\">\n"
"        <span data-question>turtle-2-3: The following program has one "
"turtle, \"jamal\", draw a line to the north in blue and then another, "
"\"tina\", draw a line to the east in orange as shown to the left, <img "
"src=\"../_static/TwoTurtlesL.png\" width=\"150\" align=\"left\" "
"hspace=\"10\" vspace=\"5\" />.  The program should import the turtle "
"module, get the window to draw on, create the turtle \"jamal\", have it "
"draw a line to the north, then create the turtle \"tina\", and have it "
"draw a line to the east.  Finally, it should set the window to close when"
" the user clicks in it.<br /><br /><p>Drag the blocks of statements from "
"the left column to the right column and put them in the right order.  "
"Then click on <i>Check Me</i> to see if you are right. You will be told "
"if any of the lines are in the wrong order.</p></span>import turtle\n"
"---\n"
"wn = turtle.Screen()\n"
"---\n"
"jamal = turtle.Turtle()\n"
"jamal.color(\"blue\")\n"
"jamal.pensize(10)\n"
"---\n"
"jamal.left(90)\n"
"jamal.forward(150)\n"
"---\n"
"tina = turtle.Turtle()\n"
"tina.pensize(10)\n"
"tina.color(\"orange\")\n"
"tina.forward(150)\n"
"---\n"
"wn.exitonclick()</pre>\n"
"    "
msgstr ""

#: ../../_sources/PythonTurtle/InstancesAHerdofTurtles.rst:146
msgid "for loop"
msgstr ""

