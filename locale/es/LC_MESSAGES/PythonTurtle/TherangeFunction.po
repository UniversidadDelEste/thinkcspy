# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 14:52-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/PythonTurtle/TherangeFunction.rst:15
msgid "The range Function"
msgstr ""

msgid ""
"<div id=\"advrange\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/advrange.png\">\n"
"    <source "
"src=\"http://media.interactivepython.org/thinkcsVideos/AdvancedRange.mov\""
" type=\"video/mp4\"></source>\n"
"    <source "
"src=\"http://media.interactivepython.org/thinkcsVideos/AdvancedRange.webm\""
" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#advrange_thumb').click(function(e) {\n"
"         $('#advrange').show();\n"
"         $('#advrange_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': "
"'advrange'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#advrange video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#advrange video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': "
"'advrange'});\n"
"      });\n"
"   });\n"
"</script>\n"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:24
msgid ""
"In our simple example from the last section (shown again below), we used "
"a list of four integers to cause the iteration to happen four times.  We "
"said that we could have used any four values.  In fact, we even used four"
" colors."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:27
msgid ""
"import turtle            # set up alex\n"
"wn = turtle.Screen()\n"
"alex = turtle.Turtle()\n"
"\n"
"for i in [0, 1, 2, 3]:   # repeat four times\n"
"    alex.forward(50)\n"
"    alex.left(90)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:39
msgid ""
"It turns out that generating lists with a specific number of integers is "
"a very common thing to do, especially when you want to write simple ``for"
" loop`` controlled iteration.  Even though you can use any four items, or"
" any four integers for that matter, the conventional thing to do is to "
"use a list of integers starting with 0. In fact, these lists are so "
"popular that Python gives us special built-in ``range`` objects that can "
"deliver a sequence of values to the ``for`` loop.  The sequence provided "
"by ``range`` always starts with 0.  If you ask for ``range(4)``, then you"
" will get 4 values starting with 0.  In other words, 0, 1, 2, and finally"
" 3.  Notice that 4 is not included since we started with 0.  Likewise, "
"``range(10)`` provides 10 values, 0 through 9."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:46
msgid ""
"for i in range(4):\n"
"    # Executes the body with i = 0, then 1, then 2, then 3\n"
"for x in range(10):\n"
"    # sets x to each of ... [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:55
msgid "Computer scientists like to count from 0!"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:58
msgid "So to repeat something four times, a good Python programmer would do this:"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:60
msgid ""
"for i in range(4):\n"
"    alex.forward(50)\n"
"    alex.left(90)"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:67
msgid ""
"The `range <http://docs.python.org/py3k/library/functions "
".html?highlight=range#range>`_ function is actually a very powerful "
"function when it comes to creating sequences of integers.  It can take "
"one, two, or three parameters.  We have seen the simplest case of one "
"parameter such as ``range(4)`` which creates ``[0, 1, 2, 3]``. But what "
"if we really want to have the sequence ``[1, 2, 3, 4]``? We can do this "
"by using a two parameter version of ``range`` where the first parameter "
"is the starting point and the second parameter is the ending point.  The "
"evaluation of ``range(1,5)`` produces the desired sequence.  What "
"happened to the 5? In this case we interpret the parameters of the range "
"function to mean range(start,stop+1)."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:80
msgid ""
"Why in the world would range not just work like range(start, stop)?  "
"Think about it like this.  Because computer scientists like to start "
"counting at 0 instead of 1, ``range(N)`` produces a sequence of things "
"that is N long, but the consequence of this is that the final number of "
"the sequence is N-1.  In the case of start, stop it helps to simply think"
" that the sequence begins with start and continues as long as the number "
"is less than stop."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:88
msgid ""
"Here are a two examples for you to run.  Try them and then add another "
"line below to create a sequence starting at 10 and going up to 20 "
"(including 20)."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:99
msgid ""
"Codelens will help us to further understand the way range works.  In this"
" case, the variable ``i`` will take on values produced by the ``range`` "
"function."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:110
msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"rangeme\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (rangeme)</span>"
" </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var rangeme_trace = {\"code\": \"for i in range(10):\\n   print(i)\", "
"\"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, "
"\"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"i\": 0}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": \"0\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"i\": 0}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": \"0\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 1}, \"heap\":"
" {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"i\"], \"stdout\": \"0\\n1\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 1}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"i\": 2}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n1\\n2\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"i\": 2}, \"heap\": {}, \"line\": 1, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n1\\n2\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"i\": 3}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n1\\n2\\n3\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"i\": 3}, \"heap\": {}, \"line\": 1, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n1\\n2\\n3\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"i\": 4}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n1\\n2\\n3\\n4\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 4}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 5}, \"heap\": {}, \"line\":"
" 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 5}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 6}, \"heap\": {}, \"line\":"
" 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 6}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 7}, \"heap\": {}, \"line\":"
" 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 7}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 8}, \"heap\": {}, \"line\":"
" 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 8}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 9}, \"heap\": {}, \"line\":"
" 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 9}, \"heap\":"
" {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"i\"], \"stdout\": \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"i\": 9}, \"heap\": {}, \"line\": 1, \"event\": \"return\"}]};\n"
"var rangeme_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        rangeme_vis = new ExecutionVisualizer('rangeme',rangeme_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(rangeme_vis,'rangeme');\n"
"        styleButtons('rangeme');\n"
"        allVisualizers.push(rangeme_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"rangeme_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#rangeme_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'rangeme'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (rangeme_vis) {\n"
"        rangeme_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:111
msgid ""
"Finally, suppose we want to have a sequence of even numbers. How would we"
" do that?  Easy, we add another parameter, a step, that tells range what "
"to count by.  For even numbers we want to start at 0 and count by 2's.  "
"So if we wanted the first 10 even numbers we would use ``range(0,19,2)``."
"  The most general form of the range is ``range(start, stop, step)``.  "
"You can also create a sequence of numbers that starts big and gets "
"smaller by using a negative value for the step parameter."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:126
msgid "Try it in codelens."
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:132
msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"rangeme2\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(rangeme2)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var rangeme2_trace = {\"code\": \"for i in range(0, 20, 2):\\n   "
"print(i)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 0}, \"heap\":"
" {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"i\"], \"stdout\": \"0\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 0}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"i\": 2}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": \"0\\n2\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"i\": 2}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": \"0\\n2\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 4}, \"heap\":"
" {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"i\"], \"stdout\": \"0\\n2\\n4\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 4}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n2\\n4\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"i\": 6}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"i\": 6}, \"heap\": {}, \"line\": 1, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"i\": 8}, \"heap\": {}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n8\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 8}, \"heap\": {}, \"line\":"
" 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], \"stdout\":"
" \"0\\n2\\n4\\n6\\n8\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 10}, \"heap\": {}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], "
"\"stdout\": \"0\\n2\\n4\\n6\\n8\\n10\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 10}, \"heap\": {}, "
"\"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], "
"\"stdout\": \"0\\n2\\n4\\n6\\n8\\n10\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 12}, \"heap\": {}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], "
"\"stdout\": \"0\\n2\\n4\\n6\\n8\\n10\\n12\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 12}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n8\\n10\\n12\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 14}, \"heap\": {}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], "
"\"stdout\": \"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 14}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"i\": 16}, \"heap\": {}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"i\"], "
"\"stdout\": \"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 16}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 18}, "
"\"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 18}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"i\"], \"stdout\": "
"\"0\\n2\\n4\\n6\\n8\\n10\\n12\\n14\\n16\\n18\\n\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"i\": 18}, "
"\"heap\": {}, \"line\": 1, \"event\": \"return\"}]};\n"
"var rangeme2_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        rangeme2_vis = new ExecutionVisualizer('rangeme2',rangeme2_trace,"
"\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(rangeme2_vis,'rangeme2');\n"
"        styleButtons('rangeme2');\n"
"        allVisualizers.push(rangeme2_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"rangeme2_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#rangeme2_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'rangeme2'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (rangeme2_vis) {\n"
"        rangeme2_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:133
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:146
msgid ""
"turtle-8-1: In the command range(3, 10, 2), what does the second argument"
" (10) specify?"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:159
msgid "turtle-8-2: What command correctly generates the list [2, 5, 8]?"
msgstr ""

#: ../../_sources/PythonTurtle/TherangeFunction.rst:172
msgid ""
"turtle-8-3: What happens if you give range only one argument?  For "
"example: range(4)"
msgstr ""

