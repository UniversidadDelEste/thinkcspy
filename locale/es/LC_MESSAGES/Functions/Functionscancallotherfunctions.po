# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:15
msgid "Functions can Call Other Functions"
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:17
msgid ""
"It is important to understand that each of the functions we write can be "
"used and called from other functions we write.  This is one of the most "
"important ways that computer scientists take a large problem and break it"
" down into a group of smaller problems. This process of breaking a "
"problem into smaller subproblems is called **functional decomposition**."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:23
msgid ""
"Here's a simple example of functional decomposition using two functions. "
"The first function called ``square`` simply computes the square of a "
"given number. The second function called ``sum_of_squares`` makes use of "
"square to compute the sum of three numbers that have been squared."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:48
msgid ""
"Even though this is a pretty simple idea, in practice this example "
"illustrates many very important Python concepts, including local and "
"global variables along with parameter passing.  Note that when you step "
"through this example, codelens bolds line 1 and line 5 as the functions "
"are defined.  The body of square is not executed until it is called from "
"the ``sum_of_squares`` function for the first time on line 6.  Also "
"notice that when ``square`` is called there are two groups of local "
"variables, one for ``square`` and one for ``sum_of_squares``.  As you "
"step through you will notice that ``x``, and ``y`` are local variables in"
" both functions and may even have different values.  This illustrates "
"that even though they are named the same, they are in fact, very "
"different."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:59
msgid ""
"Now we will look at another example that uses two functions.  This "
"example illustrates an important computer science problem solving "
"technique called **generalization**.  Assume we want to write a function "
"to draw a square.  The generalization step is to realize that a square is"
" just a special kind of rectangle."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:65
msgid ""
"To draw a rectangle we need to be able to call a function with different "
"arguments for width and height.  Unlike the case of the square, we cannot"
" repeat the same thing 4 times, because the four sides are not equal. "
"However, it is the case that drawing the bottom and right sides are the "
"same sequence as drawing the top and left sides.  So we eventually come "
"up with this rather nice code that can draw a rectangle."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:82
msgid ""
"The parameter names are deliberately chosen as single letters to ensure "
"they're not misunderstood. In real programs, once you've had more "
"experience, we will insist on better variable names than this. The point "
"is that the program doesn't \"understand\" that you're drawing a "
"rectangle or that the parameters represent the width and the height.  "
"Concepts like rectangle, width, and height are meaningful for humans.  "
"They are not concepts that the program or the computer understands."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:88
msgid ""
"*Thinking like a computer scientist* involves looking for patterns and "
"relationships.  In the code above, we've done that to some extent.  We "
"did not just draw four sides. Instead, we spotted that we could draw the "
"rectangle as two halves and used a loop to repeat that pattern twice."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:93
msgid ""
"But now we might spot that a square is a special kind of rectangle.  A "
"square simply uses the same value for both the height and the width. We "
"already have a function that draws a rectangle, so we can use that to "
"draw our square."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:103
msgid "Here is the entire example with the necessary set up code."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:132
msgid "There are some points worth noting here:"
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:134
msgid "Functions can call other functions."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:135
msgid ""
"Rewriting `drawSquare` like this captures the relationship that we've "
"spotted."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:137
msgid ""
"A caller of this function might say `drawSquare(tess, 50)`.  The "
"parameters of this function, ``tx`` and ``sz``, are assigned the values "
"of the tess object, and the integer 50 respectively."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:140
msgid ""
"In the body of the function, ``tz`` and ``sz`` are just like any other "
"variable."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:141
msgid ""
"When the call is made to ``drawRectangle``, the values in variables "
"``tx`` and ``sz`` are fetched first, then the call happens.  So as we "
"enter the top of function `drawRectangle`, its variable ``t`` is assigned"
" the tess object, and ``w`` and ``h`` in that function are both given the"
" value 50."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:147
msgid ""
"So far, it may not be clear why it is worth the trouble to create all of "
"these new functions. Actually, there are a lot of reasons, but this "
"example demonstrates two:"
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:151
msgid ""
"Creating a new function gives you an opportunity to name a group of "
"statements. Functions can simplify a program by hiding a complex "
"computation behind a single command. The function (including its name) "
"can capture your mental chunking, or *abstraction*, of the problem."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:155
msgid ""
"Creating a new function can make a program smaller by eliminating "
"repetitive code."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:157
msgid ""
"Sometimes you can write functions that allow you to solve a specific "
"problem using a more general solution."
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:161
msgid "Lab"
msgstr ""

#: ../../_sources/Functions/Functionscancallotherfunctions.rst:163
msgid ""
"`Drawing a Circle <../Labs/lab04_01.html>`_ In this guided lab exercise "
"we will work through a simple problem solving exercise related to drawing"
" a circle with the turtle."
msgstr ""

