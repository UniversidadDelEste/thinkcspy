# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Functions/ProgramDevelopment.rst:15
msgid "Program Development"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:17
msgid ""
"At this point, you should be able to look at complete functions and tell "
"what they do. Also, if you have been doing the exercises, you have "
"written some small functions. As you write larger functions, you might "
"start to have more difficulty, especially with runtime and semantic "
"errors."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:22
msgid ""
"To deal with increasingly complex programs, we are going to suggest a "
"technique called **incremental development**. The goal of incremental "
"development is to avoid long debugging sessions by adding and testing "
"only a small amount of code at a time."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:27
msgid ""
"As an example, suppose you want to find the distance between two points, "
"given by the coordinates (x\\ :sub:`1`\\ , y\\ :sub:`1`\\ ) and (x\\ "
":sub:`2`\\ , y\\ :sub:`2`\\ ).  By the Pythagorean theorem, the distance "
"is:"
msgstr ""

msgid ""
".. image:: Functions/Figures/distance_formula.png\n"
"   :alt: Distance formula"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:34
msgid ""
"The first step is to consider what a ``distance`` function should look "
"like in Python. In other words, what are the inputs (parameters) and what"
" is the output (return value)?"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:38
msgid ""
"In this case, the two points are the inputs, which we can represent using"
" four parameters. The return value is the distance, which is a floating-"
"point value."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:41
msgid ""
"Already we can write an outline of the function that captures our "
"thinking so far."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:43
msgid ""
"def distance(x1, y1, x2, y2):\n"
"    return 0.0"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:48
msgid ""
"Obviously, this version of the function doesn't compute distances; it "
"always returns zero. But it is syntactically correct, and it will run, "
"which means that we can test it before we make it more complicated."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:52
msgid "To test the new function, we call it with sample values."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:62
msgid ""
"def distance(x1, y1, x2, y2):\n"
"    return 0.0\n"
"\n"
"print(distance(1, 2, 4, 6))"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:63
msgid ""
"We chose these values so that the horizontal distance equals 3 and the "
"vertical distance equals 4; that way, the result is 5 (the hypotenuse of "
"a 3-4-5 triangle). When testing a function, it is useful to know the "
"right answer."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:67
msgid ""
"At this point we have confirmed that the function is syntactically "
"correct, and we can start adding lines of code. After each incremental "
"change, we test the function again. If an error occurs at any point, we "
"know where it must be --- in the last line we added."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:72
msgid ""
"A logical first step in the computation is to find the differences x\\ "
":sub:`2`\\ - x\\ :sub:`1`\\  and y\\ :sub:`2`\\ - y\\ :sub:`1`\\ .  We "
"will store those values in temporary variables named ``dx`` and ``dy``."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:76
msgid ""
"def distance(x1, y1, x2, y2):\n"
"    dx = x2 - x1\n"
"    dy = y2 - y1\n"
"    return 0.0"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:84
msgid "Next we compute the sum of squares of ``dx`` and ``dy``."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:86
msgid ""
"def distance(x1, y1, x2, y2):\n"
"    dx = x2 - x1\n"
"    dy = y2 - y1\n"
"    dsquared = dx**2 + dy**2\n"
"    return 0.0"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:94
msgid ""
"Again, we could run the program at this stage and check the value of "
"``dsquared`` (which should be 25)."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:97
msgid ""
"Finally, using the fractional exponent ``0.5`` to find the square root, "
"we compute and return the result."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:111
msgid ""
"def distance(x1, y1, x2, y2):\n"
"    dx = x2 - x1\n"
"    dy = y2 - y1\n"
"    dsquared = dx**2 + dy**2\n"
"    result = dsquared**0.5\n"
"    return result\n"
"\n"
"print(distance(1, 2, 4, 6))"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:112
msgid ""
"If that works correctly, you are done. Otherwise, you might want to print"
" the value of ``result`` before the return statement."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:115
msgid ""
"When you start out, you might add only a line or two of code at a time. "
"As you gain more experience, you might find yourself writing and "
"debugging bigger conceptual chunks. As you improve your programming "
"skills you should find yourself managing bigger and bigger chunks: this "
"is very similar to the way we learned to read letters, syllables, words, "
"phrases, sentences, paragraphs, etc., or the way we learn to chunk music "
"--- from indvidual notes to chords, bars, phrases, and so on."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:122
msgid "The key aspects of the process are:"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:124
msgid ""
"Start with a working skeleton program and make small incremental changes."
" At any point, if there is an error, you will know exactly where it is."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:126
msgid ""
"Use temporary variables to hold intermediate values so that you can "
"easily inspect and check them."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:128
msgid ""
"Once the program is working, you might want to consolidate multiple "
"statements into compound expressions, but only do this if it does not "
"make the program more difficult to read."
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:133
msgid "composition"
msgstr ""

#: ../../_sources/Functions/ProgramDevelopment.rst:133
msgid "function composition"
msgstr ""

