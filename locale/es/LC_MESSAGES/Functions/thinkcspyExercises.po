# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Functions/thinkcspyExercises.rst:12
msgid "Exercises"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid "number"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:16
msgid "1"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:22
msgid ""
"Use the drawsquare function we wrote in this chapter in a program to draw"
" the image shown below. Assume each side is 20 units. (Hint: notice that "
"the turtle has already moved away from the ending point of the last "
"square when the program ends.)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/five_squares.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:49
msgid ""
"import turtle\n"
"\n"
"def drawSquare(t, sz):\n"
"    \"\"\"Get turtle t to draw a square of sz side\"\"\"\n"
"\n"
"    for i in range(4):\n"
"        t.forward(sz)\n"
"        t.left(90)\n"
"\n"
"wn = turtle.Screen()\n"
"wn.bgcolor(\"lightgreen\")\n"
"\n"
"alex = turtle.Turtle()\n"
"alex.color(\"pink\")\n"
"\n"
"drawSquare(alex,20)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:77
msgid ""
"import turtle\n"
"\n"
"def drawSquare(t, sz):\n"
"    \"\"\"Make turtle t draw a square of with side sz.\"\"\"\n"
"    for i in range(4):\n"
"        t.forward(sz)\n"
"        t.left(90)\n"
"\n"
"wn = turtle.Screen()       # Set up the window and its attributes\n"
"wn.bgcolor(\"lightgreen\")\n"
"\n"
"alex = turtle.Turtle()     # create alex\n"
"alex.color('hotpink')\n"
"alex.pensize(3)\n"
"\n"
"for i in range(5):\n"
"    drawSquare(alex, 20)   # Call the function to draw the square\n"
"    alex.penup()\n"
"    alex.forward(40)       # move alex to the starting position for the "
"next square\n"
"    alex.pendown()\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:87
msgid ""
"Write a program to draw this. Assume the innermost square is 20 units per"
" side, and each successive square is 20 units bigger, per side, than the "
"one inside it."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/nested_squares.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:93
#: ../../_sources/Functions/thinkcspyExercises.rst:108
#: ../../_sources/Functions/thinkcspyExercises.rst:143
#: ../../_sources/Functions/thinkcspyExercises.rst:156
#: ../../_sources/Functions/thinkcspyExercises.rst:210
#: ../../_sources/Functions/thinkcspyExercises.rst:300
#: ../../_sources/Functions/thinkcspyExercises.rst:332
#: ../../_sources/Functions/thinkcspyExercises.rst:344
#: ../../_sources/Functions/thinkcspyExercises.rst:373
#: ../../_sources/Functions/thinkcspyExercises.rst:520
msgid "\n"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:102
msgid ""
"Write a non-fruitful function ``drawPoly(someturtle, somesides, "
"somesize)`` which makes a turtle draw a regular polygon. When called with"
" ``drawPoly(tess, 8, 50)``, it will draw a shape like this:"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/regularpolygon.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:129
msgid ""
"import turtle\n"
"\n"
"def drawPoly(t, num_sides, side_length):\n"
"    for i in range(num_sides):\n"
"        t.forward(side_length)\n"
"        t.left(360/num_sides)\n"
"\n"
"wn = turtle.Screen()       # Set up the window and its attributes\n"
"wn.bgcolor(\"lightgreen\")\n"
"\n"
"tess = turtle.Turtle()\n"
"tess.color('hotpink')\n"
"tess.pensize(3)\n"
"\n"
"drawPoly(tess, 8, 50)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:139
msgid "Draw this pretty pattern."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/tess08.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:151
msgid "The two spirals in this picture differ only by the turn angle.  Draw both."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/tess_spirals.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:196
msgid ""
"import turtle\n"
"\n"
"def drawSpiral(t, angle):\n"
"    ''' takes a turtle, t, and an angle in degrees '''\n"
"    length = 1\n"
"    for i in range(84):\n"
"        t.forward(length)\n"
"        t.right(angle)\n"
"        length = length + 2\n"
"\n"
"\n"
"wn = turtle.Screen()       # Set up the window and its attributes\n"
"wn.bgcolor(\"lightgreen\")\n"
"\n"
"guido = turtle.Turtle()    # create guido\n"
"guido.color('blue')\n"
"\n"
"## draw the first spiral ##\n"
"# position guido\n"
"guido.penup()\n"
"guido.backward(110)\n"
"guido.pendown()\n"
"\n"
"# draw the spiral using a 90 degree turn angle\n"
"drawSpiral(guido, 90)\n"
"\n"
"\n"
"## draw the second spiral ##\n"
"# position guido\n"
"guido.home()\n"
"guido.penup()\n"
"guido.forward(90)\n"
"guido.pendown()\n"
"\n"
"drawSpiral(guido, 89)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:207
msgid ""
"Write a non-fruitful function ``drawEquitriangle(someturtle, somesize)`` "
"which calls ``drawPoly`` from the previous question to have its turtle "
"draw a equilateral triangle."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:219
msgid ""
"Write a fruitful function ``sumTo(n)`` that returns the sum of all "
"integer numbers up to and including `n`.   So ``sumTo(10)`` would be "
"``1+2+3...+10`` which would return the value 55.  Use the equation  (n * "
"(n + 1)) / 2."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:239
msgid ""
"def sumTo(n):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertAlmostEqual(sumTo(15),120.0,0,\"Tested sumTo on input "
"15\")\n"
"        self.assertAlmostEqual(sumTo(0),0.0,0,\"Tested sumTo on input "
"0\")\n"
"        self.assertAlmostEqual(sumTo(25),325.0,0,\"Tested sumTo on input "
"25\")\n"
"        self.assertAlmostEqual(sumTo(7),28.0,0,\"Tested sumTo on input "
"7\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:258
msgid ""
"from test import testEqual\n"
"\n"
"def sumTo(n):\n"
"    result = (n * (n + 1)) / 2\n"
"    return result\n"
"\n"
"# Now lets see how well this works\n"
"t = sumTo(0)\n"
"print(\"The sum from 1 to 0 is\",t)\n"
"t = sumTo(10)\n"
"print(\"The sum from 1 to 10 is\",t)\n"
"t = sumTo(5)\n"
"print(\"The sum from 1 to 5 is\",t)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:268
msgid ""
"Write a function `areaOfCircle(r)` which returns the area of a circle of "
"radius `r`.  Make sure you use the math module in your solution."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:287
msgid ""
"def areaOfCircle(r):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        "
"self.assertAlmostEqual(areaOfCircle(5.0),78.53981633974483,5,\"Tested "
"input: areaOfCircle(5.0)\")\n"
"        self.assertEqual(areaOfCircle(5.0),78.53981633974483,\"Tested "
"input: areaOfCirlce(5.0)\")\n"
"        self.assertEqual(areaOfCircle(0),0.0,\"Tested input: "
"areaOfCirlce(0)\")\n"
"        "
"self.assertAlmostEqual(areaOfCircle(31415.926535897932),3100627668.0299816,5,\"Tested"
" input: areaOfCirlce(31415.926535897932)\")\n"
"\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:296
msgid ""
"Write a non-fruitful function to draw a five pointed star, where the "
"length of each side is 100 units."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/star.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:314
msgid ""
"import turtle\n"
"\n"
"def drawFivePointStar(t):\n"
"    for i in range(5):\n"
"        t.forward(100)\n"
"        t.left(216)\n"
"\n"
"wolfram = turtle.Turtle()\n"
"drawFivePointStar(wolfram)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:324
msgid ""
"Extend your program above.  Draw five stars, but between each, pick up "
"the pen, move forward by 350 units, turn right by 144, put the pen down, "
"and draw the next star. You'll get something like this (note that you "
"will need to move to the left before drawing your first star in order to "
"fit everything in the window):"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst
msgid ".. image:: Functions/Figures/five_stars.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:330
msgid "What would it look like if you didn't pick up the pen?"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:341
msgid ""
"Extend the star function to draw an n pointed star.  (Hint: n must be an "
"odd number greater or equal to 3)."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:359
msgid ""
"import turtle\n"
"\n"
"def drawStar(t, n):\n"
"    for i in range(n):\n"
"        t.forward(100)\n"
"        t.left(180 - 180/n)\n"
"\n"
"stroustrup = turtle.Turtle()\n"
"drawStar(stroustrup, 7)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:369
msgid ""
"Write a function called drawSprite that will draw a sprite.  The function"
" will need parameters for the turtle, the number of legs, and the length "
"of the legs.  Invoke the function to create a sprite with 15 legs of "
"length 120."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:382
msgid ""
"Rewrite the function ``sumTo(n)`` that returns the sum of all integer "
"numbers up to and including `n`.   This time use the accumulator pattern."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:401
msgid ""
"def sumTo(n):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertEqual(sumTo(15),120,\"Tested sumTo on input 15\")\n"
"        self.assertEqual(sumTo(0),0,\"Tested sumTo on input 0\")\n"
"        self.assertEqual(sumTo(25),325,\"Tested sumTo on input 25\")\n"
"        self.assertEqual(sumTo(7),28,\"Tested sumTo on input 7\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:420
msgid ""
"def sumTo(n):\n"
"    sum = 0\n"
"    for i in range(1,n+1):\n"
"        sum = sum + i\n"
"    return sum\n"
"\n"
"# Now lets see how well this works\n"
"t = sumTo(0)\n"
"print(\"The sum from 1 to 0 is\",t)\n"
"t = sumTo(10)\n"
"print(\"The sum from 1 to 10 is\",t)\n"
"t = sumTo(5)\n"
"print(\"The sum from 1 to 5 is\",t)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:430
msgid ""
"Write a function called ``mySqrt`` that will approximate the square root "
"of a number, call it n, by using Newton's algorithm. Newton's approach is"
" an iterative guessing algorithm where the initial guess is n/2 and each "
"subsequent guess is computed using   the formula:  newguess = (1/2) * "
"(oldguess + (n/oldguess))."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:451
msgid ""
"def mySqrt(n):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertAlmostEqual(mySqrt(4.0),2.0,0,\"Tested mySqrt on input"
" 4.0\")\n"
"        self.assertAlmostEqual(mySqrt(9.0),3.0,4,\"Tested accuracy of "
"mySqrt on input 3.0\")\n"
"        self.assertAlmostEqual(mySqrt(36.0),6.0,5,\"Tested accuracy of "
"mySqrt on input 6.0\")\n"
"        self.assertAlmostEqual(mySqrt(100.0),10.0,4,\"Tested accuracy of "
"mySqrt on input 10.0. Try iterating more times.\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:460
msgid ""
"Write a function called ``myPi`` that will return an approximation of PI "
"(3.14159...).  Use the `Leibniz "
"<http://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80>`_ "
"approximation."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:468
msgid ""
"def myPi(iters):\n"
"    # Calculate an approximation of PI using the Leibniz\n"
"    # approximation with iters number of iterations\n"
"\n"
"    # your code here"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:490
msgid ""
"def myPi(iters):\n"
"    ''' Calculate an approximation of PI using the Leibniz\n"
"    approximation with iters number of iterations '''\n"
"    pi = 0\n"
"    sign = 1\n"
"    denominator = 1\n"
"    for i in range(iters):\n"
"        pi = pi + (sign/denominator)\n"
"        sign = sign * -1  # alternate positive and negative\n"
"        denominator = denominator + 2\n"
"\n"
"    pi = pi * 4.0\n"
"    return pi\n"
"\n"
"pi_approx = myPi(10000)\n"
"print(pi_approx)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:500
msgid ""
"Write a function called `myPi` that will return an approximation of PI "
"(3.14159...).  Use the `Madhava "
"<http://en.wikipedia.org/wiki/Madhava_of_Sangamagrama>`_ approximation."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:508
msgid ""
"def myPi(iters):\n"
"    # Calculate an approximation of PI using the Madhava\n"
"    # approximation with iters number of iterations\n"
"\n"
"    #your code here"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:516
msgid ""
"Write a function called `fancySquare` that will draw a square with fancy "
"corners (spites on the corners).  You should implement and use the "
"`drawSprite` function from above.  For an even more interesting look, how"
" about adding small triangles to the ends of the sprite legs."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:547
msgid ""
"import turtle\n"
"\n"
"def drawSprite(t, numlegs, leglength):\n"
"   angle = 360/numlegs\n"
"   for i in range(numlegs):\n"
"      t.forward(leglength)\n"
"      t.backward(leglength)\n"
"      t.left(angle)\n"
"\n"
"def drawFancySquare(t, sz, lgs, lgl):\n"
"   for i in range(4):\n"
"       t.forward(sz)\n"
"       drawSprite(t, lgs, lgl)\n"
"       t.left(90)\n"
"\n"
"wn = turtle.Screen()\n"
"wn.bgcolor(\"lightgreen\")\n"
"\n"
"alex = turtle.Turtle()\n"
"drawFancySquare(alex, 100, 10, 15)\n"
"\n"
"wn.exitonclick()"
msgstr ""

