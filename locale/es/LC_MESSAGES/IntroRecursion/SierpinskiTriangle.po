# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:15
msgid "Sierpinski Triangle"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:18
msgid ""
"Another fractal that exhibits the property of self-similarity is the "
"Sierpinski triangle. An example is shown in :ref:`Figure 3 "
"<fig_sierpinski>`. The Sierpinski triangle illustrates a three-way "
"recursive algorithm. The procedure for drawing a Sierpinski triangle by "
"hand is simple. Start with a single large triangle. Divide this large "
"triangle into four new triangles by connecting the midpoint of each side."
" Ignoring the middle triangle that you just created, apply the same "
"procedure to each of the three corner triangles. Each time you create a "
"new set of triangles, you recursively apply this procedure to the three "
"smaller corner triangles. You can continue to apply this procedure "
"indefinitely if you have a sharp enough pencil. Before you continue "
"reading, you may want to try drawing the Sierpinski triangle yourself, "
"using the method described."
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:37
msgid ".. image:: IntroRecursion/Figures/sierpinski.png"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:37
msgid "Figure 3: The Sierpinski Triangle"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:39
msgid ""
"Since we can continue to apply the algorithm indefinitely, what is the "
"base case? We will see that the base case is set arbitrarily as the "
"number of times we want to divide the triangle into pieces. Sometimes we "
"call this number the “degree” of the fractal. Each time we make a "
"recursive call, we subtract 1 from the degree until we reach 0. When we "
"reach a degree of 0, we stop making recursive calls. The code that "
"generated this Sierpinski Triangle is shown below."
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:98
msgid "data-caption='Drawing a Sierpinski Triangle'"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:98
msgid ""
"import turtle\n"
"\n"
"def drawTriangle(points,color,myTurtle):\n"
"    myTurtle.fillcolor(color)\n"
"    myTurtle.up()\n"
"    myTurtle.goto(points[0][0],points[0][1])\n"
"    myTurtle.down()\n"
"    myTurtle.begin_fill()\n"
"    myTurtle.goto(points[1][0],points[1][1])\n"
"    myTurtle.goto(points[2][0],points[2][1])\n"
"    myTurtle.goto(points[0][0],points[0][1])\n"
"    myTurtle.end_fill()\n"
"\n"
"def getMid(p1,p2):\n"
"    return ( (p1[0]+p2[0]) / 2, (p1[1] + p2[1]) / 2)\n"
"\n"
"def sierpinski(points,degree,myTurtle):\n"
"    colormap = ['blue','red','green','white','yellow',\n"
"                'violet','orange']\n"
"    drawTriangle(points,colormap[degree],myTurtle)\n"
"    if degree > 0:\n"
"        sierpinski([points[0],\n"
"                        getMid(points[0], points[1]),\n"
"                        getMid(points[0], points[2])],\n"
"                   degree-1, myTurtle)\n"
"        sierpinski([points[1],\n"
"                        getMid(points[0], points[1]),\n"
"                        getMid(points[1], points[2])],\n"
"                   degree-1, myTurtle)\n"
"        sierpinski([points[2],\n"
"                        getMid(points[2], points[1]),\n"
"                        getMid(points[0], points[2])],\n"
"                   degree-1, myTurtle)\n"
"\n"
"def main():\n"
"   myTurtle = turtle.Turtle()\n"
"   myWin = turtle.Screen()\n"
"   myPoints = [[-100,-50],[0,100],[100,-50]]\n"
"   sierpinski(myPoints,3,myTurtle)\n"
"   myWin.exitonclick()\n"
"\n"
"main()"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:99
msgid ""
"This program follows the ideas outlined above. The first thing "
"``sierpinski`` does is draw the outer triangle. Next, there are three "
"recursive calls, one for each of the new corner triangles we get when we "
"connect the midpoints."
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:104
msgid ""
"Look at the code and think about the order in which the triangles will be"
" drawn. While the exact order of the corners depends upon how the initial"
" set is specified, let’s assume that the corners are ordered lower left, "
"top, lower right. Because of the way the ``sierpinski`` function calls "
"itself, ``sierpinski`` works its way to the smallest allowed triangle in "
"the lower-left corner, and then begins to fill out the rest of the "
"triangles working back. Then it fills in the triangles in the top corner "
"by working toward the smallest, topmost triangle. Finally, it fills in "
"the lower-right corner, working its way toward the smallest triangle in "
"the lower right."
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:115
msgid ""
"Sometimes it is helpful to think of a recursive algorithm in terms of a "
"diagram of function calls. :ref:`Figure 4 <fig_stcalltree>` shows that "
"the recursive calls are always made going to the left. The active "
"functions are outlined in black, and the inactive function calls are in "
"gray. The farther you go toward the bottom of :ref:`Figure 4 "
"<fig_stcalltree>`, the smaller the triangles. The function finishes "
"drawing one level at a time; once it is finished with the bottom left it "
"moves to the bottom middle, and so on."
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:129
msgid ".. image:: IntroRecursion/Figures/stCallTree.png"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:129
msgid "Figure 4: Building a Sierpinski Triangle"
msgstr ""

#: ../../_sources/IntroRecursion/SierpinskiTriangle.rst:131
msgid ""
"The ``sierpinski`` function relies heavily on the ``getMid`` function. "
"``getMid`` takes as arguments two endpoints and returns the point halfway"
" between them. In addition, this program has a function that draws a "
"filled triangle using the ``begin_fill`` and ``end_fill`` turtle methods."
msgstr ""

