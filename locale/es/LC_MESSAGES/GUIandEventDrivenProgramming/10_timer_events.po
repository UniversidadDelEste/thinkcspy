# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:16
msgid "Timer Events"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:18
msgid ""
"GUI programs run an \"event loop\" that continuously receive events from "
"the operating system and \"dispatches\" those events to appropriate "
"callback functions. Nothing happens in a GUI program without an event. "
"The application logic for some problems requires that specific events "
"happen at some specific times. For this reason ``tkinter`` includes a "
"feature to generate events under software control. These are often "
"refered to as *timer events*."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:25
msgid ""
"Every widget has an ``after`` method that will generate an event at a "
"specific time interval from the time it is called. The method takes at "
"least 2 arguments: the amount of time (in milliseconds) to wait before "
"generating the event, and the callback function to call after the time "
"has elapsed. In the example below, the function ``a_callback_function`` "
"will be called one second (1000 milliseconds) after the timer-event was "
"created."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:42
msgid "Animations and Repeated Tasks"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:44
msgid ""
"If you want a specific task to be repeated on a regular interval, then "
"the callback function that performs the task should create a new timer "
"event each time it is called. The following example creates a callback "
"function that is called 30 times per second. (Note that 1/30th of a "
"second is 0.033 seconds, or 33 milliseconds.)"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:59
msgid ""
"A widget can have more than one timer event active at any time. In fact "
"there is no limit to the number of timer events you can create."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:62
msgid ""
"Note that you should never use a loop to repeat a task in a GUI program. "
"If you use a loop, the event-loop will be prevented from execution and no"
" events will be processed while the loop is running. Always use a timer "
"event for repeating a task, especially if a single execution of the task "
"takes a considerable amount of CPU time."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:69
msgid "Canceling Timer Events"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:71
msgid ""
"In some cases you may need to cancel a timer event to prevent it from "
"executing. This is straightforward using the ``after_cancel`` method. "
"Remember that a widget can have multiple active timers, so the "
"``after_cancel`` method requires one parameter which specifies which "
"timer event to cancel. If you need to cancel an event, you must capture "
"the return value from the call to ``after`` when you created the event. "
"Here is an example:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:91
msgid "Multiple Parameters to Timer Callbacks"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/10_timer_events.rst:93
msgid ""
"Timer callback function can have zero or more arguments passed to them "
"when they are called. You specify the arguments when you create the "
"event. This makes timer callback functions extremely flexible. Below is "
"an example of three different callback functions, each of which receives "
"a different number of arguments. You must specify the correct number of "
"arguments for the callback function when you create the timer event."
msgstr ""

