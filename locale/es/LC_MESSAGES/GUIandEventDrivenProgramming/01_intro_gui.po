# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:15
msgid "Graphical User Interfaces"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:17
msgid ""
"A **graphical user interface** (GUI) allows a user to interact with a "
"computer program using a pointing device that manipulates small pictures "
"on a computer screen. The small pictures are called ``icons`` or "
"``widgets``. Various types of pointing devices can be used, such as a "
"mouse, a stylus pen, or a human finger on a touch screen."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:23
msgid ""
"We refer to programs that use a **graphical user interface** as \"GUI "
"programs.\" A GUI program is very different from a program that uses a "
"**command line interface** which receives user input from typed "
"characters on a keyboard. Typically programs that use a **command line "
"interface** perform a series of tasks in a predetermined order and then "
"terminate. However, a GUI program creates the ``icons`` and ``widgets`` "
"that are displayed to a user and then it simply waits for the user to "
"interact with them. The order that tasks are performed by the program is "
"under the user's control -- not the program's control! This means a GUI "
"program must keep track of the \"state\" of its processing and respond "
"correctly to user commands that are given in any order the user chooses. "
"This style of programming is called \"event driven programming.\" In "
"fact, by definition, all *GUI programs* are *event-driven programs*."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:38
msgid "GUI Programming"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:40
msgid "An GUI program has the following structure:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:42
msgid ""
"Create the icons and widgets that are displayed to a user and organize "
"them inside a screen window."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:44
msgid "Define functions that will process user and application events."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:45
msgid "Associate specific user events with specific functions."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:46
msgid ""
"Start an infinite event-loop that processes user events. When a user "
"event happens, the event-loop calls the function associated with that "
"event."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:50
msgid ""
"A GUI program's interface is composed of ``widgets`` displayed in a "
"window. Your computer's **operating system** controls the creation and "
"manipulation of windows on your computer's display screen. The operating "
"system also controls the pointing devices on your computer, such as a "
"mouse or a touch screen. Therefore, your computer's operating system is "
"what recognizes events that happen in a window. Your operating system "
"sends events to your program in the order they are generated by a user. "
"Your program's event-loop responds to these events. All GUI programs have"
" the same event-loop, so there is an event-loop provided for you and it "
"looks something like this:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:77
msgid ""
"Again, you do not implement an event-loop in a GUI program. The event "
"loop has already been written for you. You make this event-loop work by "
"associating a function (which is called an ``event-handler`` or a "
"``callback function``) to a specific event. We will show you how to do "
"this in a few lessons. First, let's learn how to create a *GUI interface*"
" which is the ``widgets`` a user sees when a GUI program runs."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:85
msgid "GUI Programming Options"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:87
msgid ""
"Python does not implement GUI, event-driven-programming in its core "
"functionality. GUI programming is implemented using imported modules "
"which are often referred to as \"toolkits.\" Anyone can implement "
"external modules that facilitate GUI programming, and many people have. "
"Therefore you have many options available to you for GUI programming. A "
"partial list of options can be found at "
"https://docs.python.org/3/faq/gui.html. The following lessons explain how"
" to use the ``Tkinter`` toolkit to create GUI programs. Once you "
"understand how GUI programming works, you should be able to learn how to "
"use any of the other available toolkits without much difficulty."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:98
msgid "TKinter"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:100
msgid ""
"``TKinter`` is an abbreviation for \"TK interface\". \"TK\" is a platform"
" independent, customizable, and configurable GUI library. The Python "
"module ``TKinter`` allows Python programs to use the TK libraries. An "
"overview of TK can be found at "
"https://en.wikipedia.org/wiki/Tk_(software)_"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:106
msgid "Tkinter Pre-programmed Interfaces"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:108
msgid ""
"``Tkinter`` provides a set of standard GUI dialog boxes that can be used "
"with minimal programming. These are described in the next lesson. (A "
"*dialog box* is a small window on a computer screen in which a user is "
"prompted to provide information or select commands.)"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:114
msgid "Tkinter Custom Interfaces"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:116
msgid ""
"``Tkinter`` also provides the functionality to create any user interface "
"imaginable. To create a custom GUI program you basically do five things:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:119
msgid "Create instances of the widgets you want in your interface."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:120
msgid ""
"Define the layout of the widgets (i.e., the location and size of each "
"widget)."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:121
msgid ""
"Create functions that will perform your desired actions on user generated"
" events."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:122
msgid "Connect your functions to specific user events."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:123
msgid "Start a GUI event-loop."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:125
msgid "Each of these tasks are explain in detail in the following lessons."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:127
msgid ""
"Note: All coding examples in these lessons assume you are using Python "
"3.5 or greater."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:131
msgid "Hello World"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/01_intro_gui.rst:133
msgid ""
"Many programming languages are introduced to new users by showing them "
"how to display \"Hello world!\" on the screen. This is considered to be "
"the simplest possible program you can write in the language. In that "
"spirit, here is a GUI program that displays \"Hello World!:"
msgstr ""

