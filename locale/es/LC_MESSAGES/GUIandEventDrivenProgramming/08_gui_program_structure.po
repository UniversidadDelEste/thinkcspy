# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:15
msgid "The Design of GUI Programs"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:17
msgid ""
"For very simple GUI programs, no special program design is needed, as "
"demonstrated in the previous \"Hello World\" example programs. However, "
"any non-trivial GUI program will require extensive use of global "
"variables if the structure of the code does not use a Python ``class``. "
"You have learned in previous lessons that global variables are bad "
"because they make debugging programs more difficult. Therefore we want a "
"design for GUI programs that avoids global variables as much as possible."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:25
msgid ""
"To demonstrate this, let's look at two versions of a simple program that "
"increments a counter each time a user clicks a button. The first version "
"of this code does not use a ``class`` definition and requires that a "
"global variable called my_counter be used. This is because the label that"
" represents the counter is created in the ``create_user_interface`` "
"function but it must be accessed in the event handler function "
"``increment_counter``. In fact, the event handlers of a GUI program "
"almost always need access to multiple widgets in the program's interface "
"and the values can't be passed as parameters because an ``command`` "
"``event handler`` function receives no parameters and a ``bind`` ``event "
"handler`` function receives exactly one parameter -- an ``event object``."
" Study the following example and pay close attention to where the "
"``my_counter`` global variable is used."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:73
msgid ""
"Let's compare the above program to an identical application that is "
"designed as a Python ``class``. The ``class`` encapsulates all of the "
"values needed for the GUI interface and the ``event handlers`` and we "
"don't need global variables!"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:111
msgid "Notice the following about this design:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:113
msgid ""
"The application's window is created in the constructor (``__init__``) of "
"the ``CounterProgram`` class and then the interface widgets are created "
"by a call to ``create_widgets``."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:116
msgid ""
"The event handler, ``increment_counter`` can access the label "
"``self.my_counter`` using the object's attributes."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:118
msgid ""
"The code at \"global scope\" creates an instance of the class "
"``CounterProgram`` and starts the GUI event-loop."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/08_gui_program_structure.rst:121
msgid ""
"It is recommended that you develop all of your GUI programs as Python "
"Classes. For complex designs, a Python ``Class`` can help manage the "
"complexity of the code and the scoping of variables."
msgstr ""

