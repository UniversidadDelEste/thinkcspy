# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:16
msgid "Managing GUI Program Complexity"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:18
msgid ""
"As we explained in a previous lesson, GUI programs are best implemented "
"as Python classes because it allows you to manage the scope of the "
"variables in your GUI interface and callback functions. However, as GUI "
"programs become more complex, it can become overwhelming to implement "
"them as a single class. If a single class has over than 2,000 lines of "
"code it is probably getting too big to effectively manage. What are some "
"ways to effectively break down complex problems into manageable pieces?"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:26
msgid ""
"One of the most widely used ways to break down a GUI program into "
"manageable pieces is called the Model-View-Controller software design "
"pattern. This is often abbreviated as **MVC** (Model-View-Controller). It"
" divides a problem into three pieces:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:31
msgid ""
"Model - the *model* directly manages an application's data and logic. If "
"the model changes, the *model* sends commands to update the user's view."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:33
msgid ""
"View - the *view* presents the results of the application to the user. It"
" is in charge of all program output."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:35
msgid ""
"Controller - the *controller* accepts all user input and sends commands "
"to the model to change the model's state."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:38
msgid ""
"To says this in more general terms, the *controller* manages the "
"applications input, the *model* manages the application's \"state\" and "
"enforces application consistency, and the *view* updates the output, "
"which is what the user sees on the screen. This is basically identical to"
" what all computer processing is composed of, which is:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:48
msgid ""
"The MVC design pattern renames the pieces and restricted which part of "
"the code can talk to the other parts of code. For MVC design:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:55
msgid ""
"From the perspective of a GUI program, this means that the callback "
"functions, which are called when a user causes events, are the "
"*controller*, the *model* should perform all of the application logic, "
"and the building and modification of the GUI widgets composes the *view*."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:60
msgid ""
"Let's develop a Whack-a-mole game program using this design strategy. "
"Instead of creating one Python Class for the entire game, the code will "
"be developed as a set of cooperating objects. So where should we begin? I"
" would suggest that the same stages of development we used in the "
"previous lesson are a good approach, but we will create a separate Python"
" ``class`` for most of the stages. Let's walk through the code "
"development."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:68
msgid "Creating the *View*"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:70
msgid ""
"Let's create a Python ``class`` that builds the user interface for a "
"Whack-a-mole game. The emphasis for this code is the creation of the "
"widgets we need to display to the user. For this version let's allow the "
"moles to be placed at random locations inside the left frame. To do this "
"we must specify an exact size for the left frame. Otherwise the code is "
"the same as the previous version."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:82
msgid "Creating the *Model*"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:84
msgid ""
"The *model* for this Whack-a-mole game is fairly simple. We need to keep "
"a counter for the number of user hits on moles that are visible, and a "
"counter for the number of times a user clicks on a mole that is not "
"visible (or just clicks on the left frame and not a mole widget.)"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:90
msgid "Creating the *Controller*"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:92
msgid ""
"The *controller* receives user events and sends messages to the "
"*controller* to update the *model*'s state. For our Whack-a-mole game, we"
" have the following four basic commands we need to send to the *model*:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:96
msgid "A user clicked on something on the left frame."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:97
msgid ""
"The user wants to start a new game. (The user clicked on the \"Start\" "
"button.)"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:98
msgid ""
"The user wants to stop playing a game. (The user clicked on the \"Stop "
"button.)"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:99
msgid ""
"The user wants to quit the application. (The user clicked on the \"Quit\""
" button.)"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/12_model_view_controller.rst:101
msgid ""
"The *controller** needs to recognize these events and send them to "
"appropriate methods in the *model*. The *controller* needs to define "
"callback functions for these events and register the appropriate event "
"with the appropriate callback. Therefore, the *controller* needs access "
"to the widgets in the *view* object. This can easily be accomplished by "
"passing a reference to the *view* object to the *controller* when it is "
"created. Summary -------"
msgstr ""

