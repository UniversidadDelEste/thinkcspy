# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Lists/ConcatenationandRepetition.rst:15
msgid "Concatenation and Repetition"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:17
msgid ""
"Again, as with strings, the ``+`` operator concatenates lists. Similarly,"
" the ``*`` operator repeats the items in a list a given number of times."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:30
msgid ""
"It is important to see that these operators create new lists from the "
"elements of the operand lists.  If you concatenate a list with 2 items "
"and a list with 4 items, you will get a new list with 6 items (not a list"
" with two sublists).  Similarly, repetition of a list of 2 items 4 times "
"will give a list with 8 items."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:32
msgid ""
"One way for us to make this more clear is to run a part of this example "
"in codelens.  As you step through the code, you will see the variables "
"being created and the lists that they refer to.  Pay particular attention"
" to the fact that when ``newlist`` is created by the statement ``newlist "
"= fruit + numlist``, it refers to a completely new list formed by making "
"copies of the items from ``fruit`` and ``numlist``.  You can see this "
"very clearly in the codelens object diagram.  The objects are different."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:48
msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp09_concatid\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(chp09_concatid)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp09_concatid_trace = {\"code\": \"fruit = [\\\"apple\\\", "
"\\\"orange\\\", \\\"banana\\\", \\\"cherry\\\"]\\nnumlist = [6, "
"7]\\n\\nnewlist = fruit + numlist\\n\\nzeros = [0] * 4\", \"trace\": "
"[{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\","
" \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\"], \"stdout\":"
" \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\":"
" {\"fruit\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", \"apple\", "
"\"orange\", \"banana\", \"cherry\"]}, \"line\": 2, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"fruit\", \"numlist\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"fruit\": [\"REF\", 1], \"numlist\": [\"REF\", 2]}, "
"\"heap\": {\"1\": [\"LIST\", \"apple\", \"orange\", \"banana\", "
"\"cherry\"], \"2\": [\"LIST\", 6, 7]}, \"line\": 4, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"fruit\", \"numlist\", "
"\"newlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"newlist\": [\"REF\", 3], "
"\"fruit\": [\"REF\", 1], \"numlist\": [\"REF\", 2]}, \"heap\": {\"1\": "
"[\"LIST\", \"apple\", \"orange\", \"banana\", \"cherry\"], \"2\": "
"[\"LIST\", 6, 7], \"3\": [\"LIST\", \"apple\", \"orange\", \"banana\", "
"\"cherry\", 6, 7]}, \"line\": 6, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"fruit\", \"numlist\", \"newlist\", \"zeros\"], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"newlist\": [\"REF\", 3], \"fruit\": [\"REF\", 1], "
"\"zeros\": [\"REF\", 4], \"numlist\": [\"REF\", 2]}, \"heap\": {\"1\": "
"[\"LIST\", \"apple\", \"orange\", \"banana\", \"cherry\"], \"2\": "
"[\"LIST\", 6, 7], \"3\": [\"LIST\", \"apple\", \"orange\", \"banana\", "
"\"cherry\", 6, 7], \"4\": [\"LIST\", 0, 0, 0, 0]}, \"line\": 6, "
"\"event\": \"return\"}]};\n"
"var chp09_concatid_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp09_concatid_vis = new "
"ExecutionVisualizer('chp09_concatid',chp09_concatid_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp09_concatid_vis,'chp09_concatid');\n"
"        styleButtons('chp09_concatid');\n"
"        allVisualizers.push(chp09_concatid_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"chp09_concatid_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp09_concatid_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'chp09_concatid'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp09_concatid_vis) {\n"
"        chp09_concatid_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:49
msgid ""
"In Python, every object has a unique identification tag.  Likewise, there"
" is a built-in function that can be called on any object to return its "
"unique id.  The function is appropriately called ``id`` and takes a "
"single parameter, the object that you are interested in knowing about.  "
"You can see in the example below that a real id is usually a very large "
"integer value (corresponding to an address in memory)."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:51
msgid ""
">>> alist = [4, 5, 6]\n"
">>> id(alist)\n"
"4300840544\n"
">>>"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:58
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "6"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "[1, 2, 3, 4, 5, 6]"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "[1, 3, 5, 2, 4, 6]"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "[3, 7, 11]"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "Concatenation does not add the lengths of the lists."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "Concatenation does not reorder the items."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid ""
"Yes, a new list with all the items of the first list followed by all "
"those from the second."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:80
msgid "Concatenation does not add the individual items."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:71
msgid "list-6-1: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:73
msgid ""
"alist = [1, 3, 5]\n"
"blist = [2, 4, 6]\n"
"print(alist + blist)"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "9"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "[1, 1, 1, 3, 3, 3, 5, 5, 5]"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "[1, 3, 5, 1, 3, 5, 1, 3, 5]"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "[3, 9, 15]"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid ""
"Repetition does not multiply the lengths of the lists.  It repeats the "
"items."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "Repetition does not repeat each item individually."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "Yes, the items of the list are repeated 3 times, one after another."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:100
msgid "Repetition does not multiply the individual items."
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:92
msgid "list-6-2: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/ConcatenationandRepetition.rst:94
msgid ""
"alist = [1, 3, 5]\n"
"print(alist * 3)"
msgstr ""

