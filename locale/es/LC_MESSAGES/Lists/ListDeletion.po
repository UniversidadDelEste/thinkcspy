# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Lists/ListDeletion.rst:15
msgid "List Deletion"
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:17
msgid ""
"Using slices to delete list elements can be awkward and therefore error-"
"prone. Python provides an alternative that is more readable. The ``del`` "
"statement removes an element from a list by using its position."
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:30
msgid ""
"a = ['one', 'two', 'three']\n"
"del a[1]\n"
"print(a)\n"
"\n"
"alist = ['a', 'b', 'c', 'd', 'e', 'f']\n"
"del alist[1:5]\n"
"print(alist)"
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:31
msgid ""
"As you might expect, ``del`` handles negative indices and causes a "
"runtime error if the index is out of range. In addition, you can use a "
"slice as an index for ``del``. As usual, slices select all the elements "
"up to, but not including, the second index."
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:40
msgid ""
"This workspace is provided for your convenience.  You can use this "
"activecode window to try out anything you like."
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:42
msgid "\n"
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:47
msgid "is operator"
msgstr ""

#: ../../_sources/Lists/ListDeletion.rst:47
msgid "objects and values"
msgstr ""

