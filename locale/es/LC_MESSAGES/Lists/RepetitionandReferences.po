# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 14:52-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Lists/RepetitionandReferences.rst:15
msgid "Repetition and References"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:17
msgid ""
"We have already seen the repetition operator working on strings as well "
"as lists.  For example,"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:24
msgid ""
"With a list, the repetition operator creates copies of the references.  "
"Although this may seem simple enough, when we allow a list to refer to "
"another list, a subtle problem can arise."
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:26
msgid "Consider the following extension on the previous example."
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:37
msgid ""
"``newlist`` is a list of three references to ``origlist`` that were "
"created by the repetition operator.  The reference diagram is shown "
"below."
msgstr ""

msgid ""
".. image:: Lists/Figures/refrep1.png\n"
"   :alt: Repetition of a nested list"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:47
msgid "Now, what happens if we modify a value in ``origlist``."
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:62
msgid ""
"``newlist`` shows the change in three places.  This can easily be seen by"
" noting that in the reference diagram, there is only one ``origlist``, so"
" any changes to it appear in all three references from ``newlist``."
msgstr ""

msgid ""
".. image:: Lists/Figures/refrep2.png\n"
"   :alt: Same reference"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:67
msgid ""
"Here is the same example in codelens.  Step through the code paying "
"particular attention to the result of executing the assignment statement "
"``origlist[1] = 99``."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"reprefstep\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(reprefstep)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var reprefstep_trace = {\"code\": \"origlist = [45, 76, 34, "
"55]\\n\\nnewlist = [origlist] * 3\\n\\nprint(newlist)\\n\\noriglist[1] = "
"99\\n\\nprint(newlist)\", \"trace\": [{\"ordered_globals\": [], "
"\"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"origlist\"], \"stdout\": \"\", \"func_name\": "
"\"<module>\", \"stack_to_render\": [], \"globals\": {\"origlist\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 76, 34, 55]}, \"line\": "
"3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\", "
"\"newlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"newlist\": [\"REF\", 2], "
"\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 76, 34, "
"55], \"2\": [\"LIST\", [\"REF\", 1], [\"REF\", 1], [\"REF\", 1]]}, "
"\"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"origlist\", \"newlist\"], \"stdout\": \"[[45, 76, 34, 55], [45, 76, "
"34, 55], [45, 76, 34, 55]]\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"newlist\": [\"REF\", 2], "
"\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 76, 34, "
"55], \"2\": [\"LIST\", [\"REF\", 1], [\"REF\", 1], [\"REF\", 1]]}, "
"\"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"origlist\", \"newlist\"], \"stdout\": \"[[45, 76, 34, 55], [45, 76, "
"34, 55], [45, 76, 34, 55]]\\n\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"newlist\": [\"REF\", 2], "
"\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 99, 34, "
"55], \"2\": [\"LIST\", [\"REF\", 1], [\"REF\", 1], [\"REF\", 1]]}, "
"\"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"origlist\", \"newlist\"], \"stdout\": \"[[45, 76, 34, 55], [45, 76, "
"34, 55], [45, 76, 34, 55]]\\n[[45, 99, 34, 55], [45, 99, 34, 55], [45, "
"99, 34, 55]]\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], "
"\"globals\": {\"newlist\": [\"REF\", 2], \"origlist\": [\"REF\", 1]}, "
"\"heap\": {\"1\": [\"LIST\", 45, 99, 34, 55], \"2\": [\"LIST\", [\"REF\","
" 1], [\"REF\", 1], [\"REF\", 1]]}, \"line\": 9, \"event\": \"return\"}]};"
"\n"
"var reprefstep_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        reprefstep_vis = new "
"ExecutionVisualizer('reprefstep',reprefstep_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(reprefstep_vis,'reprefstep');\n"
"        styleButtons('reprefstep');\n"
"        allVisualizers.push(reprefstep_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"reprefstep_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#reprefstep_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'reprefstep'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (reprefstep_vis) {\n"
"        reprefstep_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:82
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:93
msgid "list-13-1: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:95
msgid ""
"alist = [4, 2, 8, 6, 5]\n"
"blist = alist * 2\n"
"blist[3] = 999\n"
"print(alist)"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:114
msgid "list-13-2: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:116
msgid ""
"alist = [4, 2, 8, 6, 5]\n"
"blist = [alist] * 2\n"
"alist[3] = 999\n"
"print(blist)"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:127
msgid "list"
msgstr ""

#: ../../_sources/Lists/RepetitionandReferences.rst:127
msgid "append"
msgstr ""

