# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Lists/Exercises.rst:11
msgid "Exercises"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:20
msgid ""
"Draw a reference diagram for ``a`` and ``b`` before and after the third "
"line of the following python code is executed:"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:23
msgid ""
"a = [1, 2, 3]\n"
"b = a[:]\n"
"b[0] = 5"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:31
msgid ""
"Your diagram should show two variables referring to two different lists."
"  ``a`` refers to the original list with 1,2, and 3. ``b`` refers to a "
"list with 5,2, and 3 since the zero-eth element was replaced with 5."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:43
msgid ""
"Create a list called ``myList`` with the following six items: 76, 92.3, "
"\"hello\", True, 4, 76.  Do it with both append and with concatenation, "
"one item at a time."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:45 ../../_sources/Lists/Exercises.rst:65
#: ../../_sources/Lists/Exercises.rst:96 ../../_sources/Lists/Exercises.rst:106
#: ../../_sources/Lists/Exercises.rst:377
#: ../../_sources/Lists/Exercises.rst:483
#: ../../_sources/Lists/Exercises.rst:572
msgid "\n"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:54
msgid ""
"Starting with the list in Exercise 2, write Python statements to do the "
"following:"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:56
msgid "Append \"apple\" and 76 to the list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:57
msgid "Insert the value \"cat\" at position 3."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:58
msgid "Insert the value 99 at the start of the list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:59
msgid "Find the index of \"hello\"."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:60
msgid "Count the number of 76s in the list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:61
msgid "Remove the first occurrence of 76 from the list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:62
msgid "Remove True from the list using ``pop`` and ``index``."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:83
msgid ""
"myList = [76, 92.3, 'hello', True, 4, 76]\n"
"\n"
"myList.append(\"apple\")         # a\n"
"myList.append(76)              # a\n"
"myList.insert(3, \"cat\")        # b\n"
"myList.insert(0, 99)           # c\n"
"\n"
"print(myList.index(\"hello\"))   # d\n"
"print(myList.count(76))        # e\n"
"myList.remove(76)              # f\n"
"myList.pop(myList.index(True)) # g\n"
"\n"
"print (myList)"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:94
msgid ""
"Create a list containing 100 random integers between 0 and 1000 (use "
"iteration, append, and the random module).  Write a function called "
"``average`` that will take the list as a parameter and return the "
"average."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:104
msgid ""
"Write a Python function that will take a the list of 100 random integers "
"between 0 and 1000 and return the maximum value.  (Note: there is a "
"builtin function named ``max`` but pretend you cannot use it.)"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:126
msgid ""
"import random\n"
"\n"
"def max(lst):\n"
"    max = 0\n"
"    for e in lst:\n"
"        if e > max:\n"
"            max = e\n"
"    return max\n"
"\n"
"lst = []\n"
"for i in range(100):\n"
"    lst.append(random.randint(0, 1000))\n"
"\n"
"print(max(lst))"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:137
msgid ""
"Write a function ``sum_of_squares(xs)`` that computes the sum of the "
"squares of the numbers in the list ``xs``.  For example, "
"``sum_of_squares([2, 3, 4])`` should return 4+9+16 which is 29:"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:156
msgid ""
"def sum_of_squares(xs):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertEqual(sum_of_squares([2,3,4]),29,\"Tested "
"sum_of_squares on input [2,3,4]\")\n"
"        self.assertEqual(sum_of_squares([0,1,-1]),2,\"Tested "
"sum_of_squares on input [0,1,-1]\")\n"
"        self.assertEqual(sum_of_squares([5,12,14]),365,\"Tested "
"sum_of_squares on input [5,12,14]\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:164
msgid "Write a function to count how many odd numbers are in a list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:182
msgid ""
"def countOdd(lst):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertEqual(countOdd([1,3,5,7,9]),5,\"Tested countOdd on "
"input [1,3,5,7,9]\")\n"
"        self.assertEqual(countOdd([1,2,3,4,5]),3,\"Tested countOdd on "
"input [-1,-2,-3,-4,-5]\")\n"
"        self.assertEqual(countOdd([2,4,6,8,10]),0,\"Tested countOdd on "
"input [2,4,6,8,10]\")\n"
"        self.assertEqual(countOdd([0,-1,12,-33]),2,\"Tested countOdd on "
"input [0,-1,12,-33]\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:204
msgid ""
"import random\n"
"\n"
"def countOdd(lst):\n"
"    odd = 0\n"
"    for e in lst:\n"
"        if e % 2 != 0:\n"
"            odd = odd + 1\n"
"    return odd\n"
"\n"
"# make a random list to test the function\n"
"lst = []\n"
"for i in range(100):\n"
"    lst.append(random.randint(0, 1000))\n"
"\n"
"print(countOdd(lst))"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:215
msgid "Sum up all the even numbers in a list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:233
msgid ""
"def sumEven(lst):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertEqual(sumEven([1,3,5,7,9]),0,\"Tested sumEven on input"
" [1,3,5,7,9]\")\n"
"        self.assertEqual(sumEven([-1,-2,-3,-4,-5]),-6,\"Tested sumEven on"
" input [-1,-2,-3,-4,-5]\")\n"
"        self.assertEqual(sumEven([2,4,6,7,9]),12,\"Tested sumEven on "
"input [2,4,6,7,9]\")\n"
"        self.assertEqual(sumEven([0,1,12,33]),12,\"Tested sumEven on "
"input [0,1,12,33]\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:241
msgid "Sum up all the negative numbers in a list."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:259
msgid ""
"def sumNegatives(lst):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertEqual(sumNegatives([-1,-2,-3,-4,-5]),-15,\"Tested "
"sumNegatives on input [-1,-2,-3,-4,-5]\")\n"
"        self.assertEqual(sumNegatives([1,-3,5,-7,9]),-10,\"Tested "
"sumNegatives on input [1,-3,5,-7,9]\")\n"
"        self.assertEqual(sumNegatives([-2,-4,6,-7,9]),-13,\"Tested "
"sumNegatives on input [-2,-4,6,-7,9]\")\n"
"        self.assertEqual(sumNegatives([0,1,2,3,4]),0,\"Tested "
"sumNegatives on input [0,1,2,3,4]\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:280
msgid ""
"import random\n"
"\n"
"def sumNegative(lst):\n"
"    sum = 0\n"
"    for e in lst:\n"
"        if e < 0:\n"
"            sum = sum + e\n"
"    return sum\n"
"\n"
"lst = []\n"
"for i in range(100):\n"
"    lst.append(random.randrange(-1000, 1000))\n"
"\n"
"print(sumNegative(lst))"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:291
msgid "Count how many words in a list have length 5."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:296
msgid ""
"def countWords(lst):\n"
"    # your code here"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:304
msgid ""
"Sum all the elements in a list up to but not including the first even "
"number."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:321
msgid ""
"def sumUntilEven(lst):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        self.assertEqual(sumUntilEven([1,2,3,4,5]),1,\"Tested "
"sumUntilEven on input [1,2,3,4.5]\")\n"
"        self.assertEqual(sumUntilEven([1,3,5,7,9]),25,\"Tested "
"sumUntilEven on input [1,3,5,7,9]\")\n"
"        self.assertEqual(sumUntilEven([2,4,6,7,9]),0,\"Tested "
"sumUntilEven on input [2,4,6,7,9]\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:342
msgid ""
"import random\n"
"\n"
"def sum(lst):\n"
"    sum = 0\n"
"    index = 0\n"
"    while index < len(lst) and lst[index] % 2 != 0:\n"
"        sum = sum + lst[index]\n"
"        index = index + 1\n"
"    return sum\n"
"\n"
"lst = []\n"
"for i in range(100):\n"
"    lst.append(random.randint(0,1000))\n"
"\n"
"print(sum(lst))"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:353
msgid ""
"Count how many words occur in a list up to and including the first "
"occurrence of the word \"sam\"."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:358
msgid ""
"def count(lst):\n"
"    # your code here"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:368
msgid ""
"Although Python provides us with many list methods, it is good practice "
"and very instructive to think about how they are implemented.  Implement "
"a Python function that works like the following:"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:370
msgid "count"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:371
msgid "in"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:372
msgid "reverse"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:373
msgid "index"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:374
msgid "insert"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:421
msgid ""
"def count(obj, lst):\n"
"    count = 0\n"
"    for e in lst:\n"
"        if e == obj:\n"
"            count = count + 1\n"
"    return count\n"
"\n"
"def is_in(obj, lst):  # cannot be called in() because in is a reserved "
"keyword\n"
"    for e in lst:\n"
"        if e == obj:\n"
"            return True\n"
"    return False\n"
"\n"
"def reverse(lst):\n"
"    reversed = []\n"
"    for i in range(len(lst)-1, -1, -1): # step through the original list "
"backwards\n"
"        reversed.append(lst[i])\n"
"    return reversed\n"
"\n"
"def index(obj, lst):\n"
"    for i in range(len(lst)):\n"
"        if lst[i] == obj:\n"
"            return i\n"
"    return -1\n"
"\n"
"def insert(obj, index, lst):\n"
"    newlst = []\n"
"    for i in range(len(lst)):\n"
"        if i == index:\n"
"            newlst.append(obj)\n"
"        newlst.append(lst[i])\n"
"    return newlst\n"
"\n"
"lst = [0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"print(count(1, lst))\n"
"print(is_in(4, lst))\n"
"print(reverse(lst))\n"
"print(index(2, lst))\n"
"print(insert('cat', 4, lst))"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:432
msgid ""
"Write a function ``replace(s, old, new)`` that replaces all occurences of"
" ``old`` with ``new`` in a string ``s``::"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:444
msgid "*Hint*: use the ``split`` and ``join`` methods."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:461
msgid ""
"def replace(s, old, new):\n"
"    # your code here\n"
"\n"
"====\n"
"from unittest.gui import TestCaseGui\n"
"\n"
"class myTests(TestCaseGui):\n"
"\n"
"    def testOne(self):\n"
"        "
"self.assertEqual(replace('Mississippi','i','I'),'MIssIssIppI',\"Tested "
"replace on input 'Mississippi','i','I'\")\n"
"        "
"self.assertEqual(replace('Bookkeeper','e','A'),'BookkAApAr',\"Tested "
"failed on input 'Bookkeeper','e','A'\")\n"
"        self.assertEqual(replace('Deeded','e','q'),'Dqqdqd',\"Tested "
"failed on input 'Deeded','e','q'\")\n"
"\n"
"myTests().main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:471
msgid ""
"Here are the rules for an L-system that creates something that resembles "
"a common garden herb.  Implement the following rules and try it.  Use an "
"angle of 25.7 degrees."
msgstr ""

#: ../../_sources/Lists/Exercises.rst:552
msgid ""
"import turtle\n"
"\n"
"def createLSystem(numIters, axiom):\n"
"    startString = axiom\n"
"    endString = \"\"\n"
"    for i in range(numIters):\n"
"        endString = processString(startString)\n"
"        startString = endString\n"
"\n"
"    return endString\n"
"\n"
"def processString(oldStr):\n"
"    newstr = \"\"\n"
"    for ch in oldStr:\n"
"        newstr = newstr + applyRules(ch)\n"
"\n"
"    return newstr\n"
"\n"
"def applyRules(ch):\n"
"    newstr = \"\"\n"
"    if ch == 'H':\n"
"        newstr = 'HFX[+H][-H]'   # Rule 1\n"
"    elif ch == 'X':\n"
"        newstr = 'X[-FFF][+FFF]FX'\n"
"    else:\n"
"        newstr = ch     # no rules apply so keep the character\n"
"\n"
"    return newstr\n"
"\n"
"def drawLsystem(aTurtle, instructions, angle, distance):\n"
"    savedInfoList = []\n"
"    for cmd in instructions:\n"
"        if cmd == 'F':\n"
"            aTurtle.forward(distance)\n"
"        elif cmd == 'B':\n"
"            aTurtle.backward(distance)\n"
"        elif cmd == '+':\n"
"            aTurtle.right(angle)\n"
"        elif cmd == '-':\n"
"            aTurtle.left(angle)\n"
"        elif cmd == '[':\n"
"            savedInfoList.append([aTurtle.heading(), aTurtle.xcor(), "
"aTurtle.ycor()])\n"
"            #print(savedInfoList)\n"
"        elif cmd == ']':\n"
"            newInfo = savedInfoList.pop()\n"
"            aTurtle.setheading(newInfo[0])\n"
"            aTurtle.setposition(newInfo[1], newInfo[2])\n"
"\n"
"\n"
"def main():\n"
"    inst = createLSystem(4, \"H\")   # create the string\n"
"    print(inst)\n"
"    t = turtle.Turtle()            # create the turtle\n"
"    wn = turtle.Screen()\n"
"    t.up()\n"
"    t.back(200)\n"
"    t.down()\n"
"    t.speed(9)\n"
"    drawLsystem(t, inst, 27.5, 5)  # draw the picture\n"
"\n"
"    wn.exitonclick()\n"
"\n"
"main()"
msgstr ""

#: ../../_sources/Lists/Exercises.rst:564
msgid "Here is another L-System.  Use an Angle of 25."
msgstr ""

