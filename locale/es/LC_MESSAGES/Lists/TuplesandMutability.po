# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 14:52-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Lists/TuplesandMutability.rst:15
msgid "Tuples and Mutability"
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:17
msgid ""
"So far you have seen two types of sequential collections: strings, which "
"are made up of characters; and lists, which are made up of elements of "
"any type.  One of the differences we noted is that the elements of a list"
" can be modified, but the characters in a string cannot. In other words, "
"strings are **immutable** and lists are **mutable**."
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:23
msgid ""
"A **tuple**, like a list, is a sequence of items of any type. Unlike "
"lists, however, tuples are immutable. Syntactically, a tuple is a comma-"
"separated sequence of values.  Although it is not necessary, it is "
"conventional to enclose tuples in parentheses:"
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:28
msgid ""
"julia = (\"Julia\", \"Roberts\", 1967, \"Duplicity\", 2009, \"Actress\", "
"\"Atlanta, Georgia\")"
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:32
msgid ""
"Tuples are useful for representing what other languages often call "
"*records* --- some related information that belongs together, like your "
"student record.  There is no description of what each of these *fields* "
"means, but we can guess.  A tuple lets us \"chunk\" together related "
"information and use it as a single thing."
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:37
msgid ""
"Tuples support the same sequence operations as strings and lists. For "
"example, the index operator selects an element from a tuple."
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:41
msgid ""
"As with strings, if we try to use item assignment to modify one of the "
"elements of the tuple, we get an error."
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:44
msgid ""
"julia[0] = 'X'\n"
"TypeError: 'tuple' object does not support item assignment"
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:49
msgid ""
"Of course, even if we can't modify the elements of a tuple, we can make a"
" variable reference a new tuple holding different information.  To "
"construct the new tuple, it is convenient that we can slice parts of the "
"old tuple and join up the bits to make the new tuple.  So ``julia`` has a"
" new recent film, and we might want to change her tuple.  We can easily "
"slice off the parts we want and concatenate them with the new tuple."
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:69
msgid ""
"To create a tuple with a single element (but you're probably not likely "
"to do that too often), we have to include the final comma, because "
"without the final comma, Python treats the ``(5)`` below as an integer in"
" parentheses:"
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:82
msgid "assignment"
msgstr ""

#: ../../_sources/Lists/TuplesandMutability.rst:82
msgid "tuple"
msgstr ""

