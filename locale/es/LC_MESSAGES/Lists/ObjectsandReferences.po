# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 14:52-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Lists/ObjectsandReferences.rst:15
msgid "Objects and References"
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:17
msgid "If we execute these assignment statements,"
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:19
msgid ""
"a = \"banana\"\n"
"b = \"banana\""
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:24
msgid ""
"we know that ``a`` and ``b`` will refer to a string with the letters "
"``\"banana\"``. But we don't know yet whether they point to the *same* "
"string."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:27
msgid ""
"There are two possible ways the Python interpreter could arrange its "
"internal states:"
msgstr ""

msgid ""
".. image:: Lists/Figures/refdiag1.png\n"
"   :alt: List illustration"
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:32
msgid "or"
msgstr ""

msgid ""
".. image:: Lists/Figures/refdiag2.png\n"
"   :alt: List illustration"
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:38
msgid ""
"In one case, ``a`` and ``b`` refer to two different string objects that "
"have the same value. In the second case, they refer to the same object. "
"Remember that an object is something a variable can refer to."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:42
msgid ""
"We already know that objects can be identified using their unique "
"identifier.  We can also test whether two names refer to the same object "
"using the *is* operator.  The *is* operator will return true if the two "
"references are to the same object.  In other words, the references are "
"the same.  Try our example from above."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:52
msgid ""
"The answer is ``True``.  This tells us that both ``a`` and ``b`` refer to"
" the same object, and that it is the second of the two reference diagrams"
" that describes the relationship. Since strings are *immutable*, Python "
"optimizes resources by making two names that refer to the same string "
"value refer to the same object."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:57
msgid ""
"This is not the case with lists.  Consider the following example.  Here, "
"``a`` and ``b`` refer to two different lists, each of which happens to "
"have the same element values."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:68
msgid "The reference diagram for this example looks like this:"
msgstr ""

msgid ""
".. image:: Lists/Figures/refdiag3.png\n"
"   :alt: Reference diagram for equal different lists"
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:73
msgid "``a`` and ``b`` have the same value but do not refer to the same object."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:75
msgid ""
"There is one other important thing to notice about this reference "
"diagram.  The variable ``a`` is a reference to a **collection of "
"references**.  Those references actually refer to the integer values in "
"the list.  In other words, a list is a collection of references to "
"objects.  Interestingly, even though ``a`` and ``b`` are two different "
"lists (two different collections of references), the integer object "
"``81`` is shared by both.  Like strings, integers are also immutable so "
"Python optimizes and lets everyone share the same object."
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:77
msgid ""
"Here is the example in codelens.  Pay particular attention to the `id` "
"values."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp09_istrace\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(chp09_istrace)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp09_istrace_trace = {\"code\": \"a = [81, 82, 83]\\nb = [81, 82, "
"83]\\n\\nprint(a is b)\\nprint(a == b)\", \"trace\": "
"[{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\","
" \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, "
"\"event\": \"step_line\"}, {\"ordered_globals\": [\"a\"], \"stdout\": "
"\"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"a\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83]}, "
"\"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", "
"\"b\"], \"stdout\": \"\", \"func_name\": \"<module>\", "
"\"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": "
"[\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": "
"[\"LIST\", 81, 82, 83]}, \"line\": 4, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"False\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", "
"81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 5, \"event\": "
"\"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": "
"\"False\\nTrue\\n\", \"func_name\": \"<module>\", \"stack_to_render\": "
"[], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": "
"{\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\":"
" 5, \"event\": \"return\"}]};\n"
"var chp09_istrace_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp09_istrace_vis = new "
"ExecutionVisualizer('chp09_istrace',chp09_istrace_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp09_istrace_vis,'chp09_istrace');\n"
"        styleButtons('chp09_istrace');\n"
"        allVisualizers.push(chp09_istrace_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"chp09_istrace_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp09_istrace_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'chp09_istrace'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp09_istrace_vis) {\n"
"        chp09_istrace_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Lists/ObjectsandReferences.rst:88
msgid "aliases"
msgstr ""

