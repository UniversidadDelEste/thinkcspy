# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Selection/BooleanFunctions.rst:15
msgid "Boolean Functions"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:17
msgid ""
"We have already seen that boolean values result from the evaluation of "
"boolean expressions.  Since the result of any expression evaluation can "
"be returned by a function (using the ``return`` statement), functions can"
" return boolean values.  This turns out to be a very convenient way to "
"hide the details of complicated tests. For example:"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:32
msgid ""
"def isDivisible(x, y):\n"
"    if x % y == 0:\n"
"        result = True\n"
"    else:\n"
"        result = False\n"
"\n"
"    return result\n"
"\n"
"print(isDivisible(10, 5))"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:33
msgid ""
"The name of this function is ``isDivisible``. It is common to give "
"**boolean functions** names that sound like yes/no questions.  "
"``isDivisible`` returns either ``True`` or ``False`` to indicate whether "
"the ``x`` is or is not divisible by ``y``."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:38
msgid ""
"We can make the function more concise by taking advantage of the fact "
"that the condition of the ``if`` statement is itself a boolean "
"expression. We can return it directly, avoiding the ``if`` statement "
"altogether:"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:42
msgid ""
"def isDivisible(x, y):\n"
"    return x % y == 0"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:48
msgid "Boolean functions are often used in conditional statements:"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:50
msgid ""
"if isDivisible(x, y):\n"
"    ... # do something ...\n"
"else:\n"
"    ... # do something else ..."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:57
msgid ""
"It might be tempting to write something like ``if isDivisible(x, y) == "
"True:`` but the extra comparison is  not necessary.  The following "
"example shows the ``isDivisible`` function at work.  Notice how "
"descriptive the code is when we move the testing details into a boolean "
"function.  Try it with a few other actual parameters to see what is "
"printed."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:77
msgid ""
"def isDivisible(x, y):\n"
"    if x % y == 0:\n"
"        result = True\n"
"    else:\n"
"        result = False\n"
"\n"
"    return result\n"
"\n"
"if isDivisible(10, 5):\n"
"    print(\"That works\")\n"
"else:\n"
"    print(\"Those values are no good\")"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:78
msgid ""
"Here is the same program in codelens.  When we evaluate the ``if`` "
"statement in the main part of the program, the evaluation of the boolean "
"expression causes a call to the ``isDivisible`` function.  This is very "
"easy to see in codelens."
msgstr ""

msgid ""
"\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch06_boolcodelens\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> "
"(ch06_boolcodelens)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch06_boolcodelens_trace = {\"code\": \"def isDivisible(x, y):\\n    "
"if x % y == 0:\\n        result = True\\n    else:\\n        result = "
"False\\n\\n    return result\\n\\nif isDivisible(10, 5):\\n    "
"print(\\\"That works\\\")\\nelse:\\n    print(\\\"Those values are no "
"good\\\")\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, "
"\"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"isDivisible\"], \"stdout\": \"\", \"func_name\":"
" \"<module>\", \"stack_to_render\": [], \"globals\": {\"isDivisible\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"isDivisible(x, y)\", "
"null]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"isDivisible\"], \"stdout\": \"\", \"func_name\": \"isDivisible\", "
"\"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 5, "
"\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"isDivisible\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"isDivisible_f1\", "
"\"ordered_varnames\": [\"x\", \"y\"]}], \"globals\": {\"isDivisible\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"isDivisible(x, y)\", "
"null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": "
"[\"isDivisible\"], \"stdout\": \"\", \"func_name\": \"isDivisible\", "
"\"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 5, "
"\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"isDivisible\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"isDivisible_f1\", "
"\"ordered_varnames\": [\"x\", \"y\"]}], \"globals\": {\"isDivisible\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"isDivisible(x, y)\", "
"null]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"isDivisible\"], \"stdout\": \"\", \"func_name\": \"isDivisible\", "
"\"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 5, "
"\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"isDivisible\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"isDivisible_f1\", "
"\"ordered_varnames\": [\"x\", \"y\"]}], \"globals\": {\"isDivisible\": "
"[\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"isDivisible(x, y)\", "
"null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": "
"[\"isDivisible\"], \"stdout\": \"\", \"func_name\": \"isDivisible\", "
"\"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 5, "
"\"x\": 10, \"result\": true}, \"is_highlighted\": true, \"is_parent\": "
"false, \"func_name\": \"isDivisible\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"isDivisible_f1\", "
"\"ordered_varnames\": [\"x\", \"y\", \"result\"]}], \"globals\": "
"{\"isDivisible\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"isDivisible(x, y)\", null]}, \"line\": 7, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"isDivisible\"], \"stdout\": \"\", \"func_name\":"
" \"isDivisible\", \"stack_to_render\": [{\"frame_id\": 1, "
"\"encoded_locals\": {\"y\": 5, \"x\": 10, \"__return__\": true, "
"\"result\": true}, \"is_highlighted\": true, \"is_parent\": false, "
"\"func_name\": \"isDivisible\", \"is_zombie\": false, "
"\"parent_frame_id_list\": [], \"unique_hash\": \"isDivisible_f1\", "
"\"ordered_varnames\": [\"x\", \"y\", \"result\", \"__return__\"]}], "
"\"globals\": {\"isDivisible\": [\"REF\", 1]}, \"heap\": {\"1\": "
"[\"FUNCTION\", \"isDivisible(x, y)\", null]}, \"line\": 7, \"event\": "
"\"return\"}, {\"ordered_globals\": [\"isDivisible\"], \"stdout\": \"\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"isDivisible\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"isDivisible(x, y)\", null]}, \"line\": 10, \"event\": \"step_line\"}, "
"{\"ordered_globals\": [\"isDivisible\"], \"stdout\": \"That works\\n\", "
"\"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": "
"{\"isDivisible\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", "
"\"isDivisible(x, y)\", null]}, \"line\": 10, \"event\": \"return\"}]};\n"
"var ch06_boolcodelens_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch06_boolcodelens_vis = new "
"ExecutionVisualizer('ch06_boolcodelens',ch06_boolcodelens_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: "
"redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch06_boolcodelens_vis,'ch06_boolcodelens');\n"
"        styleButtons('ch06_boolcodelens');\n"
"        allVisualizers.push(ch06_boolcodelens_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component "
"ch06_boolcodelens_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch06_boolcodelens_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', "
"'div_id':'ch06_boolcodelens'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch06_boolcodelens_vis) {\n"
"        ch06_boolcodelens_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:99
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:111
msgid "A function that returns True or False"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:111
msgid "A function that takes True or False as an argument"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:111
msgid "The same as a Boolean expression"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:111
msgid ""
"A Boolean function is just like any other function, but it always returns"
" True or False."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:111
msgid ""
"A Boolean function may take any number of arguments (including 0, though "
"that is rare), of any type."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:111
msgid ""
"A Boolean expression is a statement that evaluates to True or False, e.g."
" 5+3==8.  A function is a series of expressions grouped together with a "
"name that are only executed when you call the function."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:110
msgid "select-8-1: What is a Boolean function?"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:126
msgid "Yes"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:126
msgid "No"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:126
msgid ""
"It is perfectly valid to return the result of evaluating a Boolean "
"expression."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:126
msgid ""
"x +y < z is a valid Boolean expression, which will evaluate to True or "
"False.  It is perfectly legal to return True or False from a function, "
"and to have the statement to be evaluated in the same line as the return "
"keyword."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:119
msgid ""
"select-8-2: Is the following statement legal in Python (assuming x, y and"
" z are defined to be numbers)?"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:121
msgid "return x + y < z"
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:129
msgid ""
"This workspace is provided for your convenience.  You can use this "
"activecode window to try out anything you like."
msgstr ""

#: ../../_sources/Selection/BooleanFunctions.rst:131
msgid "\n"
msgstr ""

