# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Labs/astronomylab.rst:11
msgid "Astronomy Animation"
msgstr ""

#: ../../_sources/Labs/astronomylab.rst:15
msgid "Object-oriented programming"
msgstr ""

#: ../../_sources/Labs/astronomylab.rst:224
msgid ""
"import turtle\n"
"import math\n"
"\n"
"class SolarSystem:\n"
"\n"
"    def __init__(self, width, height):\n"
"        self.thesun = None\n"
"        self.planets = []\n"
"        self.ssturtle = turtle.Turtle()\n"
"        self.ssturtle.hideturtle()\n"
"        self.ssscreen = turtle.Screen()\n"
"        "
"self.ssscreen.setworldcoordinates(-width/2.0,-height/2.0,width/2.0,height/2.0)"
"\n"
"       # self.ssscreen.tracer(50)\n"
"\n"
"    def addPlanet(self, aplanet):\n"
"        self.planets.append(aplanet)\n"
"\n"
"    def addSun(self, asun):\n"
"        self.thesun = asun\n"
"\n"
"    def showPlanets(self):\n"
"        for aplanet in self.planets:\n"
"            print(aplanet)\n"
"\n"
"    def freeze(self):\n"
"        self.ssscreen.exitonclick()\n"
"\n"
"    def movePlanets(self):\n"
"        G = .1\n"
"        dt = .001\n"
"\n"
"        for p in self.planets:\n"
"           p.moveTo(p.getXPos() + dt * p.getXVel(), p.getYPos() + dt * "
"p.getYVel())\n"
"\n"
"           rx = self.thesun.getXPos() - p.getXPos()\n"
"           ry = self.thesun.getYPos() - p.getYPos()\n"
"           r = math.sqrt(rx**2 + ry**2)\n"
"\n"
"           accx = G * self.thesun.getMass()*rx/r**3\n"
"           accy = G * self.thesun.getMass()*ry/r**3\n"
"\n"
"           p.setXVel(p.getXVel() + dt * accx)\n"
"\n"
"           p.setYVel(p.getYVel() + dt * accy)\n"
"\n"
"class Sun:\n"
"   def __init__(self, iname, irad, im, itemp):\n"
"       self.name = iname\n"
"       self.radius = irad\n"
"       self.mass = im\n"
"       self.temp = itemp\n"
"       self.x = 0\n"
"       self.y = 0\n"
"\n"
"       self.sturtle = turtle.Turtle()\n"
"       self.sturtle.shape(\"circle\")\n"
"       self.sturtle.color(\"yellow\")\n"
"\n"
"   def getName(self):\n"
"       return self.name\n"
"\n"
"   def getRadius(self):\n"
"       return self.radius\n"
"\n"
"   def getMass(self):\n"
"       return self.mass\n"
"\n"
"   def getTemperature(self):\n"
"       return self.temp\n"
"\n"
"   def getVolume(self):\n"
"       v = 4.0/3 * math.pi * self.radius**3\n"
"       return v\n"
"\n"
"   def getSurfaceArea(self):\n"
"       sa = 4.0 * math.pi * self.radius**2\n"
"       return sa\n"
"\n"
"   def getDensity(self):\n"
"       d = self.mass / self.getVolume()\n"
"       return d\n"
"\n"
"   def setName(self, newname):\n"
"       self.name = newname\n"
"\n"
"   def __str__(self):\n"
"       return self.name\n"
"\n"
"   def getXPos(self):\n"
"       return self.x\n"
"\n"
"   def getYPos(self):\n"
"       return self.y\n"
"\n"
"class Planet:\n"
"\n"
"   def __init__(self, iname, irad, im, idist, ivx, ivy, ic):\n"
"       self.name = iname\n"
"       self.radius = irad\n"
"       self.mass = im\n"
"       self.distance = idist\n"
"       self.x = idist\n"
"       self.y = 0\n"
"       self.velx = ivx\n"
"       self.vely = ivy\n"
"       self.color = ic\n"
"\n"
"       self.pturtle = turtle.Turtle()\n"
"       #self.pturtle.speed('fast')\n"
"       self.pturtle.up()\n"
"       self.pturtle.color(self.color)\n"
"       self.pturtle.shape(\"circle\")\n"
"       self.pturtle.goto(self.x,self.y)\n"
"       self.pturtle.down()\n"
"\n"
"   def getName(self):\n"
"       return self.name\n"
"\n"
"   def getRadius(self):\n"
"       return self.radius\n"
"\n"
"   def getMass(self):\n"
"       return self.mass\n"
"\n"
"   def getDistance(self):\n"
"       return self.distance\n"
"\n"
"   def getVolume(self):\n"
"       v = 4.0/3 * math.pi * self.radius**3\n"
"       return v\n"
"\n"
"   def getSurfaceArea(self):\n"
"       sa = 4.0 * math.pi * self.radius**2\n"
"       return sa\n"
"\n"
"   def getDensity(self):\n"
"       d = self.mass / self.getVolume()\n"
"       return d\n"
"\n"
"   def setName(self, newname):\n"
"       self.name = newname\n"
"\n"
"   def show(self):\n"
"        print(self.name)\n"
"\n"
"   def __str__(self):\n"
"       return self.name\n"
"\n"
"   def moveTo(self, newx, newy):\n"
"       self.x = newx\n"
"       self.y = newy\n"
"       self.pturtle.goto(newx, newy)\n"
"\n"
"   def getXPos(self):\n"
"       return self.x\n"
"\n"
"   def getYPos(self):\n"
"       return self.y\n"
"\n"
"   def getXVel(self):\n"
"       return self.velx\n"
"\n"
"   def getYVel(self):\n"
"       return self.vely\n"
"\n"
"   def setXVel(self, newvx):\n"
"       self.velx = newvx\n"
"\n"
"   def setYVel(self, newvy):\n"
"       self.vely = newvy\n"
"\n"
"\n"
"def createSSandAnimate():\n"
"   ss = SolarSystem(2,2)\n"
"\n"
"   sun = Sun(\"SUN\", 5000, 10, 5800)\n"
"   ss.addSun(sun)\n"
"\n"
"\n"
"   m = Planet(\"MERCURY\", 19.5, 1000, .25, 0, 2, \"blue\")\n"
"   ss.addPlanet(m)\n"
"\n"
"   m = Planet(\"EARTH\", 47.5, 5000, 0.3, 0, 2.0, \"green\")\n"
"   ss.addPlanet(m)\n"
"\n"
"   m = Planet(\"MARS\", 50, 9000, 0.5, 0, 1.63, \"red\")\n"
"   ss.addPlanet(m)\n"
"\n"
"   m = Planet(\"JUPITER\", 100, 49000, 0.7, 0, 1, \"black\")\n"
"   ss.addPlanet(m)\n"
"\n"
"   m = Planet(\"Pluto\", 1, 500, 0.9, 0, .5, \"orange\")\n"
"   ss.addPlanet(m)\n"
"\n"
"   m = Planet(\"Asteroid\", 1, 500, 1.0, 0, .75, \"cyan\")\n"
"   ss.addPlanet(m)\n"
"\n"
"   numTimePeriods = 10000\n"
"   for amove in range(numTimePeriods):\n"
"        ss.movePlanets()\n"
"\n"
"   ss.freeze()\n"
"\n"
"createSSandAnimate()"
msgstr ""

