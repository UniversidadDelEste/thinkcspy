# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone
# Interactive
# This file is distributed under the same license as the How to Think Like a
# Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../_sources/Labs/lab03_01.rst:14
msgid "Turtle Racing Lab"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:18
msgid "Random Numbers"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:20
msgid ""
"Before we begin writing code for this lab, we need to introduce one more "
"Python module.  The ``random`` module allows us to generate random "
"numbers. It's easy to use:"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:30
msgid ""
"import random\n"
"x = random.randrange(1,10)\n"
"print(x)"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:31
msgid ""
"The ``randrange`` function as called in the example above, generates a "
"random number from 1 to 9. Even though we said 10 the randrange function "
"works just like the *range* function when it comes to starting and "
"stopping points.  Now if you run the program over and over again you "
"should see that each time you run it a different number is generated.  "
"Random numbers are the basis of all kinds of interesting programs we can "
"write, and the ``randrange`` function is just one of many functions "
"available in the random module."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:41
msgid "Turtle Races"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:43
msgid ""
"In this lab we are going to work step by step through the problem of "
"racing turtles.  The idea is that we want to create two or more turtles "
"and have them race across the screen from left to right. The turtle that "
"goes the farthest is the winner."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:48
msgid ""
"There are several different, and equally plausible, solutions to this "
"problem. Let's look at what needs to be done, and then look at some of "
"the options for the solution.  To start, let's think about a solution to "
"the simplest form of the problem, a race between two turtles. We'll look "
"at more complex races later."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:54
msgid ""
"When you are faced with a problem like this in computer science it is "
"often a good idea to find a solution to a simple problem first and then "
"figure out how to make the solution more general."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:58
msgid "Here is a possible sequence of steps that we will need to accomplish:"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:60
msgid "Import the modules we need"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:62
msgid "Create a screen"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:64
msgid "Create two turtles"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:66
msgid "Move the turtles to their starting positions"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:68
msgid "Send them moving across the screen"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:70
msgid "Here is the Python code for the first 4 steps above"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:96
msgid ""
"import turtle              # 1.  import the modules\n"
"import random\n"
"wn = turtle.Screen()       # 2.  Create a screen\n"
"wn.bgcolor('lightblue')\n"
"\n"
"lance = turtle.Turtle()    # 3.  Create two turtles\n"
"andy = turtle.Turtle()\n"
"lance.color('red')\n"
"andy.color('blue')\n"
"lance.shape('turtle')\n"
"andy.shape('turtle')\n"
"\n"
"andy.up()                  # 4.  Move the turtles to their starting point"
"\n"
"lance.up()\n"
"andy.goto(-100,20)\n"
"lance.goto(-100,-20)\n"
"\n"
"# your code goes here\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:97
msgid ""
"Now, you have several choices for how to fill in code for step 5. Here "
"are some possibilities to try.  Try coding each of the following in the "
"box above to see the different kinds of behavior."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:101
msgid ""
"Use a single call to ``forward`` for each turtle, using a random number "
"as the distance to move."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:104
msgid ""
"Create a for loop, using a random number for the parameter passed to the "
"range function.  Inside the for loop move one of the turtles forward by "
"some number of units."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:108
msgid ""
"Create a single for loop using something like 150 or 200 as the range "
"parameter. Then inside the for loop move each turtle forward using a "
"random number as the parameter to forward."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:113
msgid ""
"So, which of these programs is better?  Which of these programs is most "
"correct?  These are excellent questions. Program 1 is certainly the "
"simplest, but it isn't very satisfying as far as a race is concerned.  "
"Each turtle simply moves their distance on their turn.  That is not very "
"satisfying as far as a simulated race goes.  Program 2 ends up looking a "
"lot like Program 1 when you run it.  Program 3 is probably the most "
"'realistic' assuming realism is very important when we're talking about a"
" simulated race of virtual turtles."
msgstr ""

#: ../../_sources/Labs/lab03_01.rst:122
msgid ""
"You may be thinking why can't each turtle just move forward until they "
"cross some artificial finish line?  Good question!  We'll get to the "
"answer to this, and look at the program in a later lesson when we learn "
"about something called the ``while loop``."
msgstr ""

