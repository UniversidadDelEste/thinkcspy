# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Selection/Nestedconditionals.rst:15
msgid "Nested conditionals"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:17
msgid "One conditional can also be **nested** within another. For example, assume we have two integer variables, ``x`` and ``y``. The following pattern of selection shows how we might decide how they are related to each other."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:20
msgid "if x < y:\n"
"    print(\"x is less than y\")\n"
"else:\n"
"    if x > y:\n"
"        print(\"x is greater than y\")\n"
"    else:\n"
"        print(\"x and y must be equal\")"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:30
msgid "The outer conditional contains two branches. The second branch (the else from the outer) contains another ``if`` statement, which has two branches of its own. Those two branches could contain conditional statements as well."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:35
msgid "The flow of control for this example can be seen in this flowchart illustration."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:41
msgid ".. image:: Selection/Figures/flowchart_nested_conditional.png"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:42
msgid "Here is a complete program that defines values for ``x`` and ``y``.  Run the program and see the result.  Then change the values of the variables to change the flow of control."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:56
msgid ""
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:56
msgid "x = 10\n"
"y = 10\n"
"\n"
"if x < y:\n"
"    print(\"x is less than y\")\n"
"else:\n"
"    if x > y:\n"
"        print(\"x is greater than y\")\n"
"    else:\n"
"        print(\"x and y must be equal\")"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:59
msgid "In some programming languages, matching the if and the else is a problem.  However, in Python this is not the case. The indentation pattern tells us exactly which else belongs to which if."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:63
msgid "If you are still a bit unsure, here is the same selection as part of a codelens example.  Step through it to see how the correct ``print`` is chosen."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:None
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"sel1\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (sel1)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var sel1_trace = {\"code\": \"x = 10\\ny = 10\\n\\nif x < y:\\n    print(\\\"x is less than y\\\")\\nelse:\\n    if x > y:\\n        print(\\\"x is greater than y\\\")\\n    else:\\n        print(\\\"x and y must be equal\\\")\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"x\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"x\": 10}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"x\", \"y\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"y\": 10, \"x\": 10}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"x\", \"y\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"y\": 10, \"x\": 10}, \"heap\": {}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"x\", \"y\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"y\": 10, \"x\": 10}, \"heap\": {}, \"line\": 10, \"event\": \"step_line\"}, {\"ordered_globals\": [\"x\", \"y\"], \"stdout\": \"x and y must be equal\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"y\": 10, \"x\": 10}, \"heap\": {}, \"line\": 10, \"event\": \"return\"}]};\n"
"var sel1_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        sel1_vis = new ExecutionVisualizer('sel1',sel1_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(sel1_vis,'sel1');\n"
"        styleButtons('sel1');\n"
"        allVisualizers.push(sel1_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component sel1_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#sel1_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'sel1'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (sel1_vis) {\n"
"        sel1_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:80
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:102
msgid "No"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:102
msgid "Yes"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:102
#: ../../_sources/Selection/Nestedconditionals.rst:102
msgid "This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block."
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:89
msgid "select-6-1: Will the following code cause an error?"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:91
msgid "x = -10\n"
"if x < 0:\n"
"    print(\"The negative number \",  x, \" is not valid here.\")\n"
"else:\n"
"    if x > 0:\n"
"        print(x, \" is a positive number\")\n"
"    else:\n"
"        print(x,\" is 0\")"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:103
msgid "chained conditional"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:103
msgid "conditional"
msgstr ""

#: ../../_sources/Selection/Nestedconditionals.rst:103
msgid "chained"
msgstr ""

