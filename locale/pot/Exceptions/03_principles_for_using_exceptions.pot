# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:15
msgid "Principles for using Exceptions"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:17
msgid "There are many bad examples of *exception* use on the Internet. The purpose of an *exception* is to modify the flow-of-control, not to catch simple errors. If your ``try: except:`` block is in the same function that ``raises`` the exception, you are probably mis-using exceptions."
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:24
msgid "If a condition can be handled using the normal flow-of-control, don't use an exception!"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:27
msgid "Example 1:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:30
#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:44
#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:58
msgid "**DON'T DO THIS**:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:30
msgid "When you can just as easily test for no items in the list doing this:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:33
msgid "try:\n"
"  average = sum(a_list) / len(a_list)\n"
"except ZeroDivisionError:\n"
"  average = 0"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:33
msgid "if len(a_list) > 0:\n"
"  average = sum(a_list) / len(a_list)\n"
"else:\n"
"  average = 0"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:41
msgid "Example 2:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:44
msgid "When you can just as easily test for a valid index doing this:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:47
msgid "try:\n"
"  value = my_list[index]\n"
"except IndexError:\n"
"  value = -1"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:47
msgid "if 0 <= index < len(my_list):\n"
"  value = my_list[index]\n"
"else:\n"
"  value = -1"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:55
msgid "Example 3:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:58
msgid "When you can just as easily test to see if the key is valid doing this:"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:61
msgid "try:\n"
"  value = my_dictionary[key]\n"
"except KeyError:\n"
"  value = -1"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:61
msgid "if key in my_dictionary.keys():\n"
"  value = my_dictionary[key]\n"
"else:\n"
"  value = -1"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:71
msgid "If you call a function that potentially raises exceptions, and you can do something appropriate to deal with the exception, then surround the code that contains the function call with a ``try: except:`` block."
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:75
msgid "Example: Suppose you have a function that reads a file to set the state of an application when it starts up. You should catch any errors related to reading the file and set the state of the application to default values if they can't be set from the file."
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:80
msgid "try:\n"
"  load_state('previous_state.txt')\n"
"except OSError:\n"
"  set_state_to_defaults()"
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:89
msgid "If you call a function that potentially raises exceptions, and you can't do anything meaningful about the conditions that are raised, then don't catch the exception message(s)."
msgstr ""

#: ../../_sources/Exceptions/03_principles_for_using_exceptions.rst:94
msgid "principles for using exceptions"
msgstr ""

