# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:15
msgid "The ``while`` Statement"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:None
msgid "<div id=\"whileloop\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/whileloop.png\">\n"
"    <source src=\"http://media.interactivepython.org/thinkcsVideos/whileloop.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/thinkcsVideos/whileloop.webm\" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#whileloop_thumb').click(function(e) {\n"
"         $('#whileloop').show();\n"
"         $('#whileloop_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': 'whileloop'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#whileloop video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#whileloop video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': 'whileloop'});\n"
"      });\n"
"   });\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:24
msgid "There is another Python statement that can also be used to build an iteration.  It is called the ``while`` statement. The ``while`` statement provides a much more general mechanism for iterating.  Similar to the ``if`` statement, it uses a boolean expression to control the flow of execution.  The body of while will be repeated as long as the controlling boolean expression evaluates to ``True``."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:28
msgid "The following figure shows the flow of control."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:31
msgid ".. image:: MoreAboutIteration/Figures/while_flow.png"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:32
msgid "We can use the ``while`` loop to create any type of iteration we wish, including anything that we have previously done with a ``for`` loop.  For example, the program in the previous section could be rewritten using ``while``. Instead of relying on the ``range`` function to produce the numbers for our summation, we will need to produce them ourselves.  To to this, we will create a variable called ``aNumber`` and initialize it to 1, the first number in the summation.  Every iteration will add ``aNumber`` to the running total until all the values have been used. In order to control the iteration, we must create a boolean expression that evaluates to ``True`` as long as we want to keep adding values to our running total.  In this case, as long as ``aNumber`` is less than or equal to the bound, we should keep going."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:38
msgid "Here is a new version of the summation program that uses a while statement."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:57
#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:131
msgid ""
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:57
msgid "def sumTo(aBound):\n"
"    \"\"\" Return the sum of 1+2+3 ... n \"\"\"\n"
"\n"
"    theSum  = 0\n"
"    aNumber = 1\n"
"    while aNumber <= aBound:\n"
"        theSum = theSum + aNumber\n"
"        aNumber = aNumber + 1\n"
"    return theSum\n"
"\n"
"print(sumTo(4))\n"
"\n"
"print(sumTo(1000))"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:58
msgid "You can almost read the ``while`` statement as if it were in natural language. It means, while ``aNumber`` is less than or equal to ``aBound``, continue executing the body of the loop. Within the body, each time, update ``theSum`` using the accumulator pattern and increment ``aNumber``. After the body of the loop, we go back up to the condition of the ``while`` and reevaluate it.  When ``aNumber`` becomes greater than ``aBound``, the condition fails and flow of control continues to the ``return`` statement."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:62
msgid "The same program in codelens will allow you to observe the flow of execution."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:79
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch07_while2\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (ch07_while2)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch07_while2_trace = {\"code\": \"def sumTo(aBound):\\n    \\\"\\\"\\\" Return the sum of 1+2+3 ... n \\\"\\\"\\\"\\n\\n    theSum  = 0\\n    aNumber = 1\\n    while aNumber <= aBound:\\n        theSum = theSum + aNumber\\n        aNumber = aNumber + 1\\n    return theSum\\n\\nprint(sumTo(4))\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 11, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"theSum\": 0, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 1, \"theSum\": 0, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 1, \"theSum\": 0, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 1, \"theSum\": 1, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 2, \"theSum\": 1, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 2, \"theSum\": 1, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 2, \"theSum\": 3, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 3, \"theSum\": 3, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 3, \"theSum\": 3, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 3, \"theSum\": 6, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 4, \"theSum\": 6, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 4, \"theSum\": 6, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 4, \"theSum\": 10, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 5, \"theSum\": 10, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aNumber\": 5, \"theSum\": 10, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"\", \"func_name\": \"sumTo\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"__return__\": 10, \"aNumber\": 5, \"theSum\": 10, \"aBound\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"sumTo\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"sumTo_f1\", \"ordered_varnames\": [\"aBound\", \"theSum\", \"aNumber\", \"__return__\"]}], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 9, \"event\": \"return\"}, {\"ordered_globals\": [\"sumTo\"], \"stdout\": \"10\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"sumTo\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"sumTo(aBound)\", null]}, \"line\": 11, \"event\": \"return\"}]};\n"
"var ch07_while2_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch07_while2_vis = new ExecutionVisualizer('ch07_while2',ch07_while2_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch07_while2_vis,'ch07_while2');\n"
"        styleButtons('ch07_while2');\n"
"        allVisualizers.push(ch07_while2_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component ch07_while2_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch07_while2_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'ch07_while2'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch07_while2_vis) {\n"
"        ch07_while2_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:80
msgid "The names of the variables have been chosen to help readability."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:82
msgid "More formally, here is the flow of execution for a ``while`` statement:"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:84
msgid "Evaluate the condition, yielding ``False`` or ``True``."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:85
msgid "If the condition is ``False``, exit the ``while`` statement and continue execution at the next statement."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:87
msgid "If the condition is ``True``, execute each of the statements in the body and then go back to step 1."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:90
msgid "The body consists of all of the statements below the header with the same indentation."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:93
msgid "This type of flow is called a **loop** because the third step loops back around to the top. Notice that if the condition is ``False`` the first time through the loop, the statements inside the loop are never executed."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:97
msgid "The body of the loop should change the value of one or more variables so that eventually the condition becomes ``False`` and the loop terminates. Otherwise the loop will repeat forever. This is called an **infinite loop**. An endless source of amusement for computer scientists is the observation that the directions written on the back of the shampoo bottle (lather, rinse, repeat) create an infinite loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:104
msgid "In the case shown above, we can prove that the loop terminates because we know that the value of ``aBound`` is finite, and we can see that the value of ``aNumber`` increments each time through the loop, so eventually it will have to exceed ``aBound``. In other cases, it is not so easy to tell."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:111
msgid "Introduction of the while statement causes us to think about the types of iteration we have seen.  The ``for`` statement will always iterate through a sequence of values like the list of names for the party or the list of numbers created by ``range``.  Since we know that it will iterate once for each value in the collection, it is often said that a ``for`` loop creates a **definite iteration** because we definitely know how many times we are going to iterate.  On the other hand, the ``while`` statement is dependent on a condition that needs to evaluate to ``False`` in order for the loop to terminate.  Since we do not necessarily know when this will happen, it creates what we call **indefinite iteration**.  Indefinite iteration simply means that we don't know how many times we will repeat but eventually the condition controlling the iteration will fail and the iteration will stop. (Unless we have an infinite loop which is of course a problem)"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:117
msgid "What you will notice here is that the ``while`` loop is more work for you --- the programmer --- than the equivalent ``for`` loop.  When using a ``while`` loop you have to control the loop variable yourself.  You give it an initial value, test for completion, and then make sure you change something in the body so that the loop terminates."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:123
msgid "So why have two kinds of loop if ``for`` looks easier?  This next example shows an indefinite iteration where we need the extra power that we get from the ``while`` loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:129
msgid "This workspace is provided for your convenience.  You can use this activecode window to try out anything you like."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:131
msgid "\n"
""
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:134
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:144
msgid "True"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:144
msgid "False"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:144
msgid "Although the while loop uses a different syntax, it is just as powerful as a for-loop and often more flexible."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:144
msgid "Often a for-loop is more natural and convenient for a task, but that same task can always be expressed using a while loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:143
msgid "iter-3-1: True or False: You can rewrite any for-loop as a while-loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "n starts at 10 and is incremented by 1 each time through the loop, so it will always be positive"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "answer starts at 1 and is incremented by n each time, so it will always be positive"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "You cannot compare n to 0 in while loop.  You must compare it to another variable."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "In the while loop body, we must set n to False, and this code does not do that."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "The loop will run as long as n is positive.  In this case, we can see that n will never become non-positive."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "While it is true that answer will always be positive, answer is not considered in the loop condition."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "It is perfectly valid to compare n to 0.  Though indirectly, this is what causes the infinite loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:168
msgid "The loop condition must become False for the loop to terminate, but n by itself is not the condition in this case."
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:156
msgid "iter-3-2: The following code contains an infinite loop.  Which is the best explanation for why the loop does not terminate?"
msgstr ""

#: ../../_sources/MoreAboutIteration/ThewhileStatement.rst:158
msgid "n = 10\n"
"answer = 1\n"
"while n > 0:\n"
"    answer = answer + n\n"
"    n = n + 1\n"
"print(answer)"
msgstr ""

