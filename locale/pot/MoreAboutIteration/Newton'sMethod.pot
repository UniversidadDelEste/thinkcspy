# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:15
msgid "Newton's Method"
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:17
msgid "Loops are often used in programs that compute numerical results by starting with an approximate answer and iteratively improving it."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:20
msgid "For example, one way of computing square roots is Newton's method.  Suppose that you want to know the square root of ``n``. If you start with almost any approximation, you can compute a better approximation with the following formula:"
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:25
msgid "better =  1/2 * (approx + n/approx)"
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:29
msgid "Execute this algorithm a few times using your calculator.  Can you see why each iteration brings your estimate a little closer?  One of the amazing properties of this particular algorithm is how quickly it converges to an accurate answer."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:34
msgid "The following implementation of Newton's method requires two parameters.  The first is the value whose square root will be approximated.  The second is the number of times to iterate the calculation yielding a better result."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:52
msgid "You may have noticed that the second and third calls to ``newtonSqrt`` in the previous example both returned the same value for the square root of 10.  Using 10 iterations instead of 5 did not improve the the value.  In general, Newton's algorithm will eventually reach a point where the new approximation is no better than the previous.  At that point, we could simply stop. In other words, by repeatedly applying this formula until the better approximation gets close enough to the previous one, we can write a function for computing the square root that uses the number of iterations necessary and no more."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:56
msgid "This implementation, shown in codelens, uses a ``while`` condition to execute until the approximation is no longer changing.  Each time through the loop we compute a \"better\" approximation using the formula described earlier.  As long as the \"better\" is different, we try again.  Step through the program and watch the approximations get closer and closer."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:70
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp07_newtonswhile\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (chp07_newtonswhile)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp07_newtonswhile_trace = {\"code\": \"def newtonSqrt(n):\\n    approx = 0.5 * n\\n    better = 0.5 * (approx + n/approx)\\n    while better != approx:\\n        approx = better\\n        better = 0.5 * (approx + n/approx)\\n    return approx\\n\\nprint(newtonSqrt(10))\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"approx\": [\"SPECIAL_FLOAT\", \"5.0\"], \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.5, \"approx\": [\"SPECIAL_FLOAT\", \"5.0\"], \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.5, \"approx\": [\"SPECIAL_FLOAT\", \"5.0\"], \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.5, \"approx\": 3.5, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1786, \"approx\": 3.5, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1786, \"approx\": 3.5, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1786, \"approx\": 3.1786, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1786, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1786, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"\", \"func_name\": \"newtonSqrt\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"better\": 3.1623, \"__return__\": 3.1623, \"approx\": 3.1623, \"n\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"newtonSqrt\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"newtonSqrt_f1\", \"ordered_varnames\": [\"n\", \"approx\", \"better\", \"__return__\"]}], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 7, \"event\": \"return\"}, {\"ordered_globals\": [\"newtonSqrt\"], \"stdout\": \"3.16227766017\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"newtonSqrt\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"newtonSqrt(n)\", null]}, \"line\": 9, \"event\": \"return\"}]};\n"
"var chp07_newtonswhile_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp07_newtonswhile_vis = new ExecutionVisualizer('chp07_newtonswhile',chp07_newtonswhile_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp07_newtonswhile_vis,'chp07_newtonswhile');\n"
"        styleButtons('chp07_newtonswhile');\n"
"        allVisualizers.push(chp07_newtonswhile_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component chp07_newtonswhile_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp07_newtonswhile_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'chp07_newtonswhile'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp07_newtonswhile_vis) {\n"
"        chp07_newtonswhile_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:73
msgid "The ``while`` statement shown above uses comparison of two floating point numbers in the condition.  Since floating point numbers are themselves approximation of real numbers in mathematics, it is often better to compare for a result that is within some small threshold of the value you are looking for."
msgstr ""

#: ../../_sources/MoreAboutIteration/Newton'sMethod.rst:76
msgid "algorithm"
msgstr ""

