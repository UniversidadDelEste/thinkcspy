# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:15
msgid "The 3n + 1 Sequence"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:17
msgid "As another example of indefinite iteration, let's look at a sequence that has fascinated mathematicians for many years. The rule  for creating the sequence is to start from some positive integer, call it ``n``, and to generate the next term of the sequence from ``n``, either by halving ``n``, whenever ``n`` is even, or else by multiplying it by three and adding 1 when it is odd.  The sequence terminates when ``n`` reaches 1."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:24
msgid "This Python function captures that algorithm.  Try running this program several times supplying different values for n."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:43
msgid "The condition for this loop is ``n != 1``.  The loop will continue running until ``n == 1`` (which will make the condition false)."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:46
msgid "Each time through the loop, the program prints the value of ``n`` and then checks whether it is even or odd using the remainder operator. If it is even, the value of ``n`` is divided by 2 using integer division. If it is odd, the value is replaced by ``n * 3 + 1``. Try some other examples."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:51
msgid "Since ``n`` sometimes increases and sometimes decreases, there is no obvious proof that ``n`` will ever reach 1, or that the program terminates. For some particular values of ``n``, we can prove termination. For example, if the starting value is a power of two, then the value of ``n`` will be even each time through the loop until it reaches 1."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:57
msgid "You might like to have some fun and see if you can find a small starting number that needs more than a hundred steps before it terminates."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:61
msgid "Lab"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:63
msgid "`Experimenting with the 3n+1 Sequence <../Labs/sequencelab.html>`_ In this guided lab exercise we will try to learn more about this sequence."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:66
msgid "Particular values aside, the interesting question is whether we can prove that this sequence terminates for *all* positive values of ``n``. So far, no one has been able to prove it *or* disprove it!"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:70
msgid "Think carefully about what would be needed for a proof or disproof of the hypothesis *\"All positive integers will eventually converge to 1\"*.  With fast computers we have been able to test every integer up to very large values, and so far, they all eventually end up at 1.  But this doesn't mean that there might not be some as-yet untested number which does not reduce to 1."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:76
msgid "You'll notice that if you don't stop when you reach one, the sequence gets into its own loop:  1, 4, 2, 1, 4, 2, 1, 4, and so on.  One possibility is that there might be other cycles that we just haven't found."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:80
msgid "Choosing between ``for`` and ``while``"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:82
msgid "Use a ``for`` loop if you know the maximum number of times that you'll need to execute the body.  For example, if you're traversing a list of elements, or can formulate a suitable call to ``range``, then choose the ``for`` loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:86
msgid "So any problem like \"iterate this weather model run for 1000 cycles\", or \"search this list of words\", \"check all integers up to 10000 to see which are prime\" suggest that a ``for`` loop is best."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:89
msgid "By contrast, if you are required to repeat some computation until some condition is met, as we did in this 3n + 1 problem, you'll need a ``while`` loop."
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:92
msgid "As we noted before, the first case is called **definite iteration** --- we have some definite bounds for what is needed.   The latter case is called **indefinite iteration** --- we are not sure how many iterations we'll need --- we cannot even establish an upper bound!"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:106
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:117
msgid "iter-5-1: Consider the code that prints the 3n+1 sequence in ActiveCode box 6.  Will the while loop in this code always terminate for any positive integer value of n?"
msgstr ""

#: ../../_sources/MoreAboutIteration/The3n1Sequence.rst:103
msgid "Newton's method"
msgstr ""

