# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:15
msgid "Randomly Walking Turtles"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:17
msgid "Suppose we want to entertain ourselves by watching a turtle wander around randomly inside the screen.  When we run the program we want the turtle and program to behave in the following way:"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:21
msgid "The turtle begins in the center of the screen."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:22
msgid "Flip a coin. If its heads then turn to the left 90 degrees. If its tails then turn to the right 90 degrees."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:24
msgid "Take 50 steps forward."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:25
msgid "If the turtle has moved outside the screen then stop, otherwise go back to step 2 and repeat."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:28
msgid "Notice that we cannot predict how many times the turtle will need to flip the coin before it wanders out of the screen, so we can't use a for loop in this case. In fact, although very unlikely, this program might never end, that is why we call this indefinite iteration."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:33
msgid "So based on the problem description above, we can outline a program as follows:"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:35
msgid "create a window and a turtle\n"
"\n"
"while the turtle is still in the window:\n"
"    generate a random number between 0 and 1\n"
"    if the number == 0 (heads):\n"
"        turn left\n"
"    else:\n"
"        turn right\n"
"    move the turtle forward 50"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:47
msgid "Now, probably the only thing that seems a bit confusing to you is the part about whether or not the turtle is still in the screen.  But this is the nice thing about programming, we can delay the tough stuff and get *something* in our program working right away.  The way we are going to do this is to delegate the work of deciding whether the turtle is still in the screen or not to a boolean function.  Let's call this boolean function ``isInScreen`` We can write a very simple version of this boolean function by having it always return ``True``, or by having it decide randomly, the point is to have it do something simple so that we can focus on the parts we already know how to do well and get them working.  Since having it always return true would not be a good idea we will write our version to decide randomly.  Let's say that there is a 90% chance the turtle is still in the window and 10% that the turtle has escaped."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:90
#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:175
msgid ""
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:90
msgid "import random\n"
"import turtle\n"
"\n"
"\n"
"def isInScreen(w, t):\n"
"    if random.random() > 0.1:\n"
"        return True\n"
"    else:\n"
"        return False\n"
"\n"
"\n"
"t = turtle.Turtle()\n"
"wn = turtle.Screen()\n"
"\n"
"t.shape('turtle')\n"
"while isInScreen(wn, t):\n"
"    coin = random.randrange(0, 2)\n"
"    if coin == 0:              # heads\n"
"        t.left(90)\n"
"    else:                      # tails\n"
"        t.right(90)\n"
"\n"
"    t.forward(50)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:91
msgid "Now we have a working program that draws a random walk of our turtle that has a 90% chance of staying on the screen.  We are in a good position, because a large part of our program is working and we can focus on the next bit of work -- deciding whether the turtle is inside the screen boundaries or not."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:97
msgid "We can find out the width and the height of the screen using the ``window_width`` and ``window_height`` methods of the screen object. However, remember that the turtle starts at position 0,0 in the middle of the screen.  So we never want the turtle to go farther right than width/2 or farther left than negative width/2.  We never want the turtle to go further up than height/2 or further down than negative height/2.  Once we know what the boundaries are we can use some conditionals to check the turtle position against the boundaries and return ``False`` if the turtle is outside or ``True`` if the turtle is inside."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:107
msgid "Once we have computed our boundaries we can get the current position of the turtle and then use conditionals to decide.  Here is one implementation:"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:110
msgid "def isInScreen(wn,t):\n"
"    leftBound = -(wn.window_width() / 2)\n"
"    rightBound = wn.window_width() / 2\n"
"    topBound = wn.window_height() / 2\n"
"    bottomBound = -(wn.window_height() / 2)\n"
"\n"
"    turtleX = t.xcor()\n"
"    turtleY = t.ycor()\n"
"\n"
"    stillIn = True\n"
"    if turtleX > rightBound or turtleX < leftBound:\n"
"        stillIn = False\n"
"    if turtleY > topBound or turtleY < bottomBound:\n"
"        stillIn = False\n"
"\n"
"    return stillIn"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:129
msgid "There are lots of ways that the conditional could be written.  In this case we have given ``stillIn`` the default value of ``True`` and use two ``if`` statements to possibly set the value to ``False``.  You could rewrite this to use nested conditionals or ``elif`` statements and set ``stillIn`` to ``True`` in an else clause."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:136
msgid "Here is the full version of our random walk program."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:175
msgid "import random\n"
"import turtle\n"
"\n"
"def isInScreen(w,t):\n"
"    leftBound = - w.window_width() / 2\n"
"    rightBound = w.window_width() / 2\n"
"    topBound = w.window_height() / 2\n"
"    bottomBound = -w.window_height() / 2\n"
"\n"
"    turtleX = t.xcor()\n"
"    turtleY = t.ycor()\n"
"\n"
"    stillIn = True\n"
"    if turtleX > rightBound or turtleX < leftBound:\n"
"        stillIn = False\n"
"    if turtleY > topBound or turtleY < bottomBound:\n"
"        stillIn = False\n"
"\n"
"    return stillIn\n"
"\n"
"t = turtle.Turtle()\n"
"wn = turtle.Screen()\n"
"\n"
"t.shape('turtle')\n"
"while isInScreen(wn,t):\n"
"    coin = random.randrange(0, 2)\n"
"    if coin == 0:\n"
"        t.left(90)\n"
"    else:\n"
"        t.right(90)\n"
"\n"
"    t.forward(50)\n"
"\n"
"wn.exitonclick()"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:176
msgid "We could have written this program without using a boolean function. You might want to try to rewrite it using a complex condition on the while statement. However, using a boolean function makes the program much more readable and easier to understand.  It also gives us another tool to use if this was a larger program and we needed to have a check for whether the turtle was still in the screen in another part of the program.  Another advantage is that if you ever need to write a similar program, you can reuse this function with confidence the next time you need it.  Breaking up this program into a couple of parts is another example of functional decomposition."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:190
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:202
msgid "a for-loop or a while-loop"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:202
msgid "only a for-loop"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:202
msgid "only a while-loop"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:202
msgid "Although you do not know how many iterations you loop will run before the program starts running, once you have chosen your random integer, Python knows exactly how many iterations the loop will run, so either a for-loop or a while-loop will work."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:202
msgid "As you learned in section 7.2, a while-loop can always be used for anything a for-loop can be used for."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:202
msgid "Although you do not know how many iterations you loop will run before the program starts running, once you have chosen your random integer, Python knows exactly how many iterations the loop will run, so this is an example of definite iteration."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:201
msgid "iter-4-1: Which type of loop can be used to perform the following iteration: You choose a positive integer at random and then print the numbers from 1 up to and including the selected integer."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "Returns True if the turtle is still on the screen and False if the turtle is no longer on the screen."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "Uses a while loop to move the turtle randomly until it goes off the screen."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "Turns the turtle right or left at random and moves the turtle forward 50."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "Calculates and returns the position of the turtle in the window."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "The isInScreen function computes the boolean test of whether the turtle is still in the window.  It makes the condition of the while loop in the main part of the code simpler."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "The isInScreen function does not contain a while-loop.  That loop is outside the isInScreen function."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "The isInScreen function does not move the turtle."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:215
msgid "While the isInScreen function does use the size of the window and position of the turtle, it does not return the turtle position."
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:214
msgid "iter-4-2: In the random walk program in this section, what does the isInScreen function do?"
msgstr ""

#: ../../_sources/MoreAboutIteration/RandomlyWalkingTurtles.rst:188
msgid "3n + 1 sequence"
msgstr ""

