# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Files/FindingaFileonyourDisk.rst:15
msgid "Finding a File on your Disk"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:17
msgid "Opening a file requires that you, as a programmer, and Python agree about the location of the file on your disk.  The way that files are located on disk is by their **path**  You can think of the filename as the short name for a file, and the path as the full name.  For example on a Mac if you save the file ``hello.txt`` in your home directory the path to that file is ``/Users/yourname/hello.txt``  On a Windows machine the path looks a bit different but the same principles are in use.  For example on windows the path might be ``C:\\Users\\yourname\\My Documents\\hello.txt``"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:28
msgid "Why is the path separator a ``/`` on Unix/Linux/MacOS systems and ``\\`` on Microsoft Windows systems? The concept of a hierarchy of folders was first developed in Unix. On a Unix command line a :code:`/` is used to separate folder names in a file path and dashes are used to specify command line options, e.g.,  ``path/to/file/myfile -long -reverse``. On a Windows system the ``/`` character is used for command line options, so the designers of Windows decided to use the ``\\`` for separating folder names in a file path, e.g., ``path\\to\\file\\myfile /long /reverse``. Using a ``\\`` to separate folder names in a path is problematic because the ``\\`` character is also used as an escape character for special characters, such as ``\\n`` for a new line character. Bottom line, we will always use the ``/`` character to separate folder names in a path, and even on Windows system the file path will work just fine."
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:42
msgid "You can access files in sub-folders, also called directories, under your home directory by adding a slash and the name of the folder.  For example, if you had a file called ``hello.py`` in a folder called ``CS150`` that is inside a folder called ``PyCharmProjects`` under your home directory, then the full name for the file ``hello.py`` is ``/Users/yourname/PyCharmProjects/CS150/hello.py``. This is called an *absolute file path*. An *absolute file path* typically only works on a specific computer. Think about it for a second. What other computer in the world is going to have an *absolute file path* that starts with ``/Users/yourname``?"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:52
msgid "If a file is not in the same folder as your python program, you need to tell the computer how to reach it. A *relative file path* starts from the folder that contains your python program and follows a computer's file hierarchy. A file hierarchy contains folders which contains files and other sub-folders. Specifying a sub-folder is easy -- you simply specify the sub-folder's name. To specify a *parent* folder you use the special ``..`` notation because every file and folder has one unique parent. You can use the ``..`` notation multiple times in a file path to move multiple levels up a file hierarchy. Here is an example file hierarchy that contains multiple folders, files, and sub-folders. Folders in the diagram are displayed in **bold** type."
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:None
msgid ".. image:: Files/Figures/ExampleFileHierarchy.png"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:66
msgid "Using the example file hierarchy above, the program, ``myPythonProgram.py`` could access each of the data files using the following *relative file paths*:"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:69
msgid "``data1.txt``"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:70
msgid "``../myData/data2.txt``"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:71
msgid "``../myData/data3.txt``"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:72
msgid "``../../otherFiles/extraData/data4.txt``"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:74
msgid "Here's the important rule to remember: If your file and your Python program are in the same directory you can simply use the filename like this: ``open('myfile.txt', 'r')``. If your file and your Python program are in different directories then you must use a *relative file path* to the file like this: ``open('../myData/data3.txt', 'r')``."
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:81
msgid "Glossary"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:84
#: ../../_sources/Files/FindingaFileonyourDisk.rst:95
msgid "absolute file path"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:86
msgid "The name of a file that includes a path to the file from the *root* directory of a file system. An *absolute file path* always starts with a ``/``."
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:89
#: ../../_sources/Files/FindingaFileonyourDisk.rst:95
msgid "relative file path"
msgstr ""

#: ../../_sources/Files/FindingaFileonyourDisk.rst:91
msgid "The name of a file that includes a path to the file from the current working directory of a program. An *relative file path* never starts with a ``/``."
msgstr ""

