# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Strings/Afindfunction.rst:15
msgid "A ``find`` function"
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:17
msgid "Here is an implementation for the ``find`` method."
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:44
msgid "In a sense, ``find`` is the opposite of the indexing operator. Instead of taking an index and extracting the corresponding character, it takes a character and finds the index where that character appears for the first time. If the character is not found, the function returns ``-1``."
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:49
msgid "The ``while`` loop in this example uses a slightly more complex condition than we have seen in previous programs.  Here there are two parts to the condition.  We want to keep going if there are more characters to look through and we want to keep going if we have not found what we are looking for.  The variable ``found`` is a boolean variable that keeps track of whether we have found the character we are searching for.  It is initialized to *False*.  If we find the character, we reassign ``found`` to *True*."
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:56
msgid "The other part of the condition is the same as we used previously to traverse the characters of the string.  Since we have now combined these two parts with a logical ``and``, it is necessary for them both to be *True* to continue iterating.  If one part fails, the condition fails and the iteration stops."
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:60
msgid "When the iteration stops, we simply ask a question to find out why and then return the proper value."
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:64
msgid "This pattern of computation is sometimes called a eureka traversal because as soon as we find what we are looking for, we can cry Eureka!  and stop looking.  The way we stop looking is by setting ``found`` to True which causes the condition to fail."
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:70
msgid "optional parameter"
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:70
msgid "default value"
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:70
msgid "parameter"
msgstr ""

#: ../../_sources/Strings/Afindfunction.rst:70
msgid "optional"
msgstr ""

