# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:15
msgid "Traversal and the ``for`` Loop: By Index"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:17
msgid "It is also possible to use the ``range`` function to systematically generate the indices of the characters.  The ``for`` loop can then be used to iterate over these positions. These positions can be used together with the indexing operator to access the individual characters in the string."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:21
msgid "Consider the following codelens example."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:29
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch08_7\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (ch08_7)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch08_7_trace = {\"code\": \"fruit = \\\"apple\\\"\\nfor idx in range(5):\\n    currentChar = fruit[idx]\\n    print(currentChar)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 0}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"a\", \"idx\": 0}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"a\", \"idx\": 0}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"a\", \"idx\": 1}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"p\", \"idx\": 1}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"p\", \"idx\": 1}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"p\", \"idx\": 2}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"p\", \"idx\": 2}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"p\", \"idx\": 2}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"p\", \"idx\": 3}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"l\", \"idx\": 3}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\nl\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"l\", \"idx\": 3}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\nl\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"l\", \"idx\": 4}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\nl\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"e\", \"idx\": 4}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\nl\\ne\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"e\", \"idx\": 4}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\", \"currentChar\"], \"stdout\": \"a\\np\\np\\nl\\ne\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"currentChar\": \"e\", \"idx\": 4}, \"heap\": {}, \"line\": 2, \"event\": \"return\"}]};\n"
"var ch08_7_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch08_7_vis = new ExecutionVisualizer('ch08_7',ch08_7_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch08_7_vis,'ch08_7');\n"
"        styleButtons('ch08_7');\n"
"        allVisualizers.push(ch08_7_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component ch08_7_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch08_7_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'ch08_7'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch08_7_vis) {\n"
"        ch08_7_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:30
msgid "The index positions in \"apple\" are 0,1,2,3 and 4.  This is exactly the same sequence of integers returned by ``range(5)``.  The first time through the for loop, ``idx`` will be 0 and the \"a\" will be printed.  Then, ``idx`` will be reassigned to 1 and \"p\" will be displayed.  This will repeat for all the range values up to but not including 5.  Since \"e\" has index 4, this will be exactly right to show all of the characters."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:33
msgid "In order to make the iteration more general, we can use the ``len`` function to provide the bound for ``range``.  This is a very common pattern for traversing any sequence by position.        Make sure you understand why the range function behaves correctly when using ``len`` of the string as its parameter value."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:44
msgid ""
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:44
msgid "fruit = \"apple\"\n"
"for idx in range(len(fruit)):\n"
"    print(fruit[idx])"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:45
msgid "You may also note that iteration by position allows the programmer to control the direction of the traversal by changing the sequence of index values.  Recall that we can create ranges that count down as well as up so the following code will print the characters from right to left."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:54
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch08_8\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (ch08_8)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch08_8_trace = {\"code\": \"fruit = \\\"apple\\\"\\nfor idx in range(len(fruit)-1, -1, -1):\\n    print(fruit[idx])\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 4}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 4}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 3}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 3}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 2}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 2}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 1}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\np\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 1}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\np\\np\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 0}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\np\\np\\na\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 0}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\", \"idx\"], \"stdout\": \"e\\nl\\np\\np\\na\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": \"apple\", \"idx\": 0}, \"heap\": {}, \"line\": 2, \"event\": \"return\"}]};\n"
"var ch08_8_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch08_8_vis = new ExecutionVisualizer('ch08_8',ch08_8_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch08_8_vis,'ch08_8');\n"
"        styleButtons('ch08_8');\n"
"        allVisualizers.push(ch08_8_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component ch08_8_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch08_8_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'ch08_8'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch08_8_vis) {\n"
"        ch08_8_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:55
msgid "Trace the values of ``idx`` and satisfy yourself that they are correct.  In particular, note the start and end of the range."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:57
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "0"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "1"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "2"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "Error, the for statement cannot have an if inside."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "The for loop visits each index but the selection only prints some of them."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "o is at positions 4 and 8"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "Yes, it will print all the characters in even index positions and the o character appears both times in an even location."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:82
msgid "The for statement can have any statements inside, including if as well as for."
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:71
msgid "strings-11-1: How many times is the letter o printed by the following statements?"
msgstr ""

#: ../../_sources/Strings/TraversalandtheforLoopByIndex.rst:73
msgid "s = \"python rocks\"\n"
"for idx in range(len(s)):\n"
"    if idx % 2 == 0:\n"
"        print(s[idx])"
msgstr ""

