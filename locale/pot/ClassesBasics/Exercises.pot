# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/ClassesBasics/Exercises.rst:11
msgid "Exercises"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:20
msgid "Add a ``distanceFromPoint`` method that works similar to ``distanceFromOrigin`` except that it takes a ``Point`` as a parameter and computes the distance between that point and self."
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:24
#: ../../_sources/ClassesBasics/Exercises.rst:56
#: ../../_sources/ClassesBasics/Exercises.rst:72
#: ../../_sources/ClassesBasics/Exercises.rst:88
#: ../../_sources/ClassesBasics/Exercises.rst:119
#: ../../_sources/ClassesBasics/Exercises.rst:143
#: ../../_sources/ClassesBasics/Exercises.rst:155
#: ../../_sources/ClassesBasics/Exercises.rst:189
#: ../../_sources/ClassesBasics/Exercises.rst:203
msgid ""
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:24
#: ../../_sources/ClassesBasics/Exercises.rst:72
#: ../../_sources/ClassesBasics/Exercises.rst:88
#: ../../_sources/ClassesBasics/Exercises.rst:143
#: ../../_sources/ClassesBasics/Exercises.rst:155
#: ../../_sources/ClassesBasics/Exercises.rst:203
msgid "\n"
""
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:56
msgid "import math\n"
"\n"
"class Point:\n"
"    \"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n"
"\n"
"    def __init__(self, initX, initY):\n"
"        \"\"\" Create a new point at the given coordinates. \"\"\"\n"
"        self.x = initX\n"
"        self.y = initY\n"
"\n"
"    def getX(self):\n"
"        return self.x\n"
"\n"
"    def getY(self):\n"
"        return self.y\n"
"\n"
"    def distanceFromOrigin(self):\n"
"        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n"
"\n"
"    def distanceFromPoint(self, otherP):\n"
"        dx = (otherP.getX() - self.x)\n"
"        dy = (otherP.getY() - self.y)\n"
"        return math.sqrt(dy**2 + dx**2)\n"
"\n"
"p = Point(3, 3)\n"
"q = Point(6, 7)\n"
"print(p.distanceFromPoint(q))"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:68
msgid "Add a method ``reflect_x`` to Point which returns a new Point, one which is the reflection of the point about the x-axis.  For example, ``Point(3, 5).reflect_x()`` is (3, -5)"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:80
msgid "Add a method ``slope_from_origin`` which returns the slope of the line joining the origin to the point.   For example, ::"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:86
msgid "What cases will cause your method to fail? Return None when it happens."
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:119
msgid "class Point:\n"
"    \"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n"
"\n"
"    def __init__(self, initX, initY):\n"
"        \"\"\" Create a new point at the given coordinates. \"\"\"\n"
"        self.x = initX\n"
"        self.y = initY\n"
"\n"
"    def getX(self):\n"
"        return self.x\n"
"\n"
"    def getY(self):\n"
"        return self.y\n"
"\n"
"    def distanceFromOrigin(self):\n"
"        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n"
"\n"
"    def slope_from_origin(self):\n"
"        if self.x == 0:\n"
"           return None\n"
"        else:\n"
"           return self.y / self.x\n"
"\n"
"\n"
"p = Point(4, 10)\n"
"print(p.slope_from_origin())"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:131
msgid "The equation of a straight line is  \"y = ax + b\", (or perhaps \"y = mx + c\"). The coefficients a and b completely describe the line.  Write a method in the Point class so that if a point instance is given another point, it will compute the equation of the straight line joining the two points.  It must return the two coefficients as a tuple of two values.  For example,   ::"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:140
msgid "This tells us that the equation of the line joining the two points is \"y = 2x + 3\". When will your method fail?"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:151
msgid "Add a method called ``move`` that will take two parameters, call them ``dx`` and ``dy``.  The method will cause the point to move in the x and y direction the number of units given. (Hint: you will change the values of the state of the point)"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:189
msgid "class Point:\n"
"    \"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n"
"\n"
"    def __init__(self, initX, initY):\n"
"        \"\"\" Create a new point at the given coordinates. \"\"\"\n"
"        self.x = initX\n"
"        self.y = initY\n"
"\n"
"    def getX(self):\n"
"        return self.x\n"
"\n"
"    def getY(self):\n"
"        return self.y\n"
"\n"
"    def distanceFromOrigin(self):\n"
"        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n"
"\n"
"    def move(self, dx, dy):\n"
"        self.x = self.x + dx\n"
"        self.y = self.y + dy\n"
"\n"
"    def __str__(self):\n"
"        return str(self.x) + \",\" + str(self.y)\n"
"\n"
"\n"
"p = Point(7, 6)\n"
"print(p)\n"
"p.move(5, 10)\n"
"print(p)"
msgstr ""

#: ../../_sources/ClassesBasics/Exercises.rst:201
msgid "Given three points that fall on the circumference of a circle, find the center and radius of the circle."
msgstr ""

