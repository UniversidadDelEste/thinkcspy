# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/ClassesBasics/ObjectsasArgumentsandParameters.rst:11
msgid "Objects as Arguments and Parameters"
msgstr ""

#: ../../_sources/ClassesBasics/ObjectsasArgumentsandParameters.rst:13
msgid "You can pass an object as a argument in the usual way.  We've already seen this in some of the turtle examples where we passed the turtle to some function like ``drawRectangle`` so that the function could control and use whatever turtle instance we passed to it."
msgstr ""

#: ../../_sources/ClassesBasics/ObjectsasArgumentsandParameters.rst:18
msgid "Here is a simple function called ``distance`` involving our new ``Point`` objects.  The job of this function is to figure out the distance between two points."
msgstr ""

#: ../../_sources/ClassesBasics/ObjectsasArgumentsandParameters.rst:53
msgid ""
msgstr ""

#: ../../_sources/ClassesBasics/ObjectsasArgumentsandParameters.rst:53
msgid "import math\n"
"\n"
"class Point:\n"
"    \"\"\" Point class for representing and manipulating x,y coordinates. \"\"\"\n"
"\n"
"    def __init__(self, initX, initY):\n"
"        \"\"\" Create a new point at the given coordinates. \"\"\"\n"
"        self.x = initX\n"
"        self.y = initY\n"
"\n"
"    def getX(self):\n"
"        return self.x\n"
"\n"
"    def getY(self):\n"
"        return self.y\n"
"\n"
"    def distanceFromOrigin(self):\n"
"        return ((self.x ** 2) + (self.y ** 2)) ** 0.5\n"
"\n"
"def distance(point1, point2):\n"
"    xdiff = point2.getX() - point1.getX()\n"
"    ydiff = point2.getY() - point1.getY()\n"
"\n"
"    dist = math.sqrt(xdiff**2 + ydiff**2)\n"
"    return dist\n"
"\n"
"p = Point(4, 3)\n"
"q = Point(0, 0)\n"
"print(distance(p, q))"
msgstr ""

#: ../../_sources/ClassesBasics/ObjectsasArgumentsandParameters.rst:54
msgid "``distance`` takes two points and returns the distance between them.  Note that ``distance`` is **not** a method of the Point class.  You can see this by looking at the indentation pattern.  It is not inside the class definition.  The other way we can know that ``distance`` is not a method of Point is that ``self`` is not included as a formal parameter.  In addition, we do not invoke ``distance`` using the dot notation."
msgstr ""

