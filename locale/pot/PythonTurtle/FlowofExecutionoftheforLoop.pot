# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:15
msgid "Flow of Execution of the for Loop"
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:17
msgid "As a program executes, the interpreter always keeps track of which statement is about to be executed.  We call this the **control flow**, or the **flow of execution** of the program.  When humans execute programs, they often use their finger to point to each statement in turn.  So you could think of control flow as \"Python's moving finger\"."
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:23
msgid "Control flow until now has been strictly top to bottom, one statement at a time.  We call this type of control **sequential**.  Sequential flow of control is always assumed to be the default behavior for a computer program.  The ``for`` statement changes this."
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:26
msgid "Flow of control is often easy to visualize and understand if we draw a flowchart. This flowchart shows the exact steps and logic of how the ``for`` statement executes."
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:None
msgid ".. image:: PythonTurtle/Figures/new_flowchart_for.png"
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:35
msgid "A codelens demonstration is a good way to help you visualize exactly how the flow of control works with the for loop.  Try stepping forward and backward through the program by pressing the buttons.  You can see the value of ``name`` change as the loop iterates through the list of friends."
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:43
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"vtest\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (vtest)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var vtest_trace = {\"code\": \"for name in [\\\"Joe\\\", \\\"Amy\\\", \\\"Brad\\\", \\\"Angelina\\\", \\\"Zuki\\\", \\\"Thandi\\\", \\\"Paris\\\"]:\\n    print(\\\"Hi \\\", name, \\\"  Please come to my party on Saturday!\\\")\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Joe\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Joe\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Amy\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Amy\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Brad\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Brad\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Angelina\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Angelina\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Zuki\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n('Hi ', 'Zuki', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Zuki\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n('Hi ', 'Zuki', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Thandi\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n('Hi ', 'Zuki', '  Please come to my party on Saturday!')\\n('Hi ', 'Thandi', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Thandi\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n('Hi ', 'Zuki', '  Please come to my party on Saturday!')\\n('Hi ', 'Thandi', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Paris\"}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n('Hi ', 'Zuki', '  Please come to my party on Saturday!')\\n('Hi ', 'Thandi', '  Please come to my party on Saturday!')\\n('Hi ', 'Paris', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Paris\"}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"name\"], \"stdout\": \"('Hi ', 'Joe', '  Please come to my party on Saturday!')\\n('Hi ', 'Amy', '  Please come to my party on Saturday!')\\n('Hi ', 'Brad', '  Please come to my party on Saturday!')\\n('Hi ', 'Angelina', '  Please come to my party on Saturday!')\\n('Hi ', 'Zuki', '  Please come to my party on Saturday!')\\n('Hi ', 'Thandi', '  Please come to my party on Saturday!')\\n('Hi ', 'Paris', '  Please come to my party on Saturday!')\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"name\": \"Paris\"}, \"heap\": {}, \"line\": 1, \"event\": \"return\"}]};\n"
"var vtest_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        vtest_vis = new ExecutionVisualizer('vtest',vtest_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(vtest_vis,'vtest');\n"
"        styleButtons('vtest');\n"
"        allVisualizers.push(vtest_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component vtest_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#vtest_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'vtest'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (vtest_vis) {\n"
"        vtest_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:44
msgid "range function"
msgstr ""

#: ../../_sources/PythonTurtle/FlowofExecutionoftheforLoop.rst:44
msgid "chunking"
msgstr ""

