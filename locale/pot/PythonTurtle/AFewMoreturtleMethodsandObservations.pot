# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:15
msgid "A Few More turtle Methods and Observations"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:17
msgid "Here are a few more things that you might find useful as you write programs that use turtles."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:19
msgid "Turtle methods can use negative angles or distances.  So ``tess.forward(-100)`` will move tess backwards, and ``tess.left(-30)`` turns her to the right. Additionally, because there are 360 degrees in a circle, turning 30 to the left will leave you facing in the same direction as turning 330 to the right! (The on-screen animation will differ, though --- you will be able to tell if tess is turning clockwise or counter-clockwise!)"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:26
msgid "This suggests that we don't need both a left and a right turn method --- we could be minimalists, and just have one method.  There is also a *backward* method.  (If you are very nerdy, you might enjoy saying ``alex.backward(-100)`` to move alex forward!)"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:31
msgid "Part of *thinking like a scientist* is to understand more of the structure and rich relationships in your field.  So revising a few basic facts about geometry and number lines, like we've done here is a good start if we're going to play with turtles."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:36
msgid "A turtle's pen can be picked up or put down.  This allows us to move a turtle to a different place without drawing a line.   The methods are ``up`` and ``down``.  Note that the methods ``penup`` and ``pendown`` do the same thing."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:40
msgid "alex.up()\n"
"alex.forward(100)     # this moves alex, but no line is drawn\n"
"alex.down()"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:46
msgid "Every turtle can have its own shape.  The ones available \"out of the box\" are ``arrow``, ``blank``, ``circle``, ``classic``, ``square``, ``triangle``, ``turtle``."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:50
msgid "...\n"
"alex.shape(\"turtle\")\n"
"..."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:57
msgid "You can speed up or slow down the turtle's animation speed. (Animation controls how quickly the turtle turns and moves forward).  Speed settings can be set between 1 (slowest) to 10 (fastest).  But if you set the speed to 0, it has a special meaning --- turn off animation and go as fast as possible."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:62
msgid "alex.speed(10)"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:66
msgid "A turtle can \"stamp\" its footprint onto the canvas, and this will remain after the turtle has moved somewhere else.  Stamping works even when the pen is up."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:70
msgid "Let's do an example that shows off some of these new features."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:91
msgid "The list of integers shown above is created by printing the ``range(5,60,2)`` result.  It is only done to show you the distances being used to move the turtle forward.  The actual use appears as part of the ``for`` loop."
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:95
msgid "One more thing to be careful about.  All except one of the shapes you see on the screen here are footprints created by ``stamp``.  But the program still only has *one* turtle instance --- can you figure out which one is the real tess?  (Hint: if you're not sure, write a new line of code after the ``for`` loop to change tess' color, or to put her pen down and draw a line, or to change her shape, etc.)"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:101
#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:125
msgid "**Mixed up program**"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:124
msgid "\n"
"    <pre data-component=\"parsons\" id=\"3_10\">\n"
"        <span data-question>turtle-8-1: The following program uses the stamp method to create a circle of turtle shapes as shown to the left, <img src=\"../_static/TurtleCircle.png\" width=\"150\" align=\"left\" hspace=\"10\" vspace=\"5\"/> but the lines are mixed up.  The program should do all necessary set-up, create the turtle, set the shape to \"turtle\", and pick up the pen.  Then the turtle should repeat the following ten times: go forward 50 pixels, leave a copy of the turtle at the current position, reverse for 50 pixels, and then turn right 36 degrees.  After the loop, set the window to close when the user clicks in it.<br /><br /><p>Drag the blocks of statements from the left column to the right column and put them in the right order with the correct indention.  Click on <i>Check Me</i> to see if you are right. You will be told if any of the lines are in the wrong order or are incorrectly indented.</p></span>import turtle\n"
"wn = turtle.Screen()\n"
"jose = turtle.Turtle()\n"
"jose.shape(\"turtle\")\n"
"jose.penup()\n"
"---\n"
"for size in range(10):\n"
"---\n"
"  jose.forward(50)\n"
"---\n"
"  jose.stamp()\n"
"---\n"
"  jose.forward(-50)\n"
"---\n"
"  jose.right(36)\n"
"---\n"
"wn.exitonclick()</pre>\n"
"    "
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:147
msgid "\n"
"    <pre data-component=\"parsons\" id=\"3_11\">\n"
"        <span data-question>turtle-8-2: The following program uses the stamp method to create a line of turtle shapes as shown to the left, <img src=\"../_static/Turtle3Stamp.png\" width=\"150\" align=\"left\" hspace=\"10\" vspace=\"5\" /> but the lines are mixed up.  The program should do all necessary set-up, create the turtle, set the shape to \"turtle\", and pick up the pen.  Then the turtle should repeat the following three times: go forward 50 pixels and leave a copy of the turtle at the current position.  After the loop, set the window to close when the user clicks in it.<br /><br /><p>Drag the blocks of statements from the left column to the right column and put them in the right order with the correct indention.  Click on <i>Check Me</i> to see if you are right. You will be told if any of the lines are in the wrong order or are incorrectly indented.</p></span>import turtle\n"
"wn = turtle.Screen()\n"
"---\n"
"nikea = turtle.Turtle()\n"
"---\n"
"nikea.shape(\"turtle\")\n"
"---\n"
"nikea.penup()\n"
"---\n"
"for size in range(3):\n"
"---\n"
"  nikea.forward(50)\n"
"---\n"
"  nikea.stamp()\n"
"---\n"
"wn.exitonclick()</pre>\n"
"    "
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:148
msgid "Lab"
msgstr ""

#: ../../_sources/PythonTurtle/AFewMoreturtleMethodsandObservations.rst:150
msgid "`Turtle Race <../Labs/lab03_01.html>`_ In this guided lab exercise we will work through a simple problem solving exercise related to having some turtles race."
msgstr ""

