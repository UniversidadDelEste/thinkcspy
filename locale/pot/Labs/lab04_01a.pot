# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Labs/lab04_01a.rst:14
msgid "Lessons from a Triangle"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:16
msgid "OK, let's look at what we have learned from writing a ``drawTriangle`` and ``drawOctagon`` function.  The first thing you had to figure out was that you needed to modify the parameter to the ``range`` function based on the number of sides in the polygon.  The next thing, and this may have been the most challenging part for you was to figure out how much to turn each time.  The following table summarizes what you probably learned very nicely.  If you didn't, look at the table and then go back to the previous page and see if you can finish ``drawTriangle`` and ``drawOctagon``."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:27
msgid "Shape"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:27
msgid "Sides"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:27
msgid "range()"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:27
msgid "Angle"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:29
msgid "Triangle"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:29
#: ../../_sources/Labs/lab04_01a.rst:29
msgid "3"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:29
msgid "360/3 = 120"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:30
msgid "Square"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:30
#: ../../_sources/Labs/lab04_01a.rst:30
msgid "4"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:30
msgid "360/4 = 90"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:31
msgid "Octagon"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:31
#: ../../_sources/Labs/lab04_01a.rst:31
msgid "8"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:31
msgid "360/8 = 45"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:35
msgid "Looking at the table above you can really see that there is a pattern.  If you know the number of sides you want, the rest can be figured out from there. This leads us to the next problem solving stage of this exercise, generalization.  Why write a separate function for every kind of polygon when you can just write a single function that can be used to draw many different polygons?"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:42
msgid "Our new function ``drawPolygon`` will have three parameters, a turtle and the length of the side just like we have in the previous functions, but now we will add an additional parameter: numSides."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:46
msgid "Here's the starting point for the drawPolygon function, see if you can fill in the details on your own."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:67
msgid "Finally a Circle"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:69
msgid "Now that we have our ``drawPolygon`` function working we are almost done with the drawCircle function.  In fact if you tried to make a 100 sided polygon, you probably noticed that it looked suspiciously close to a circle.  The only thing we'll want to do differently is to remember that we don't usually specify a circle according to the number of sides it has, but rather we specify a circle by its radius."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:76
msgid "So, here is our next problem solving challenge.  Given a radius, how can we transform the radius into the parameters  we need for the ``drawPolygon`` function?   Let's figure this out in two steps.  First what should we use as the number of sides?  Second, what should we use as the side length?  To simplify the problem we can make a simple assumption about the number of sides.  Let's just assume that 360 sides is going to be good enough for any circle.  Plus, it just makes sense that a circle has 360 degrees, one side for each degree should give us a nice round circle."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:85
msgid "Now that we have the number of sides figured out, we can use a bit of math to figure out the length of each of those sides. Since we are given the radius we know how large the circumference of the circle is.  Right?  You may remember from math class that the circumference of a circle is 2 * pi * radius.  If we know the circumference and the number of sides (360), then the length of each side should be an equal proportion of the circumference.  circumference / 360."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:93
msgid "Here's the final solution:"
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:119
msgid "One annoying limitation of this ``drawCircle`` function is that it draws the circle to the right of the turtle's current position and heading.  As a short aside, how could you change one line of the code to draw the circle to the left of the turtle's current position and heading? What we would really like is to have the circle centered on the turtle's current position when drawCircle is called.  Modify the program above to make it so."
msgstr ""

#: ../../_sources/Labs/lab04_01a.rst:127
msgid "Finally, write another function ``drawFilledCircle`` that takes a turtle, a radius, and a color to fill in the circle."
msgstr ""

