# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:15
msgid "Command Events"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:17
msgid "When a user clicks on certain types of widgets, like a button, you typically want a specific action to be performed. This is accomplished by setting the ``command`` attribute of a widget to a specific ``event handler`` function. This can be any function that receives no arguments as parameters. You can set the ``event handler`` function using a \"named parameter\" when you create the widget, or set the widget's ``command`` attribute using a dictionary lookup. For example:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:25
msgid "def my_function():\n"
"  print(\"my_function was called.\")\n"
"\n"
"my_button = tk.Button(application_window, text=\"Example\", command=my_function)\n"
"\n"
"# or\n"
"\n"
"my_button = tk.Button(application_window, text=\"Example\")\n"
"my_button['command'] = my_function"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:37
msgid "Note that you are setting the ``command`` property of the widget to a *function reference* -- you are not calling the function! Therefore, do not put parentheses after the function name when you make the assignment."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:41
msgid "The following widgets define a ``command`` property which defines a function that is called from the application's event loop whenever a specific, predefined event is performed by a user."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:46
#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:61
msgid "Widget"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:46
msgid "The user event that causes the ``command`` function to be executed:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:48
msgid "``Button``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:48
msgid "The user places their pointing device cursor over the button and presses and releases the left mouse button. The function is actually called on the button release."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:51
msgid "``Checkbutton``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:51
msgid "If the state of the check box changes, the function is called."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:52
msgid "``Radiobutton``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:52
msgid "If the state of the radio box changes, the function is called."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:53
msgid "``Scale``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:53
msgid "The function is called if the slider moves. The function is passed one argument, the new scale value."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:57
msgid "The following widgets do **not** have a ``command`` property, but they use other properties to respond to user events:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:61
msgid "Property"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:61
msgid "User events:"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:63
msgid "``Menu``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:63
#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:64
msgid "``postcommand``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:63
msgid "Every time someone brings up this menu."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:64
#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:65
msgid "``Combobox``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:64
msgid "When the user clicks on the down-arrow."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:65
#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:66
msgid "``validatecommand``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:65
#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:66
msgid "Dynamically validate the widget's text content."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:66
msgid "``Entry``"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:69
msgid "Note that the ``Label``, ``Message``, and ``Separator`` widgets do not respond to user events and therefore have no associated event handlers."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:73
msgid "Hello World Again"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:75
msgid "As a simple example, here is an enhanced \"Hello World\" program that contains a quit button that has a single ``command`` event handler. If the quit button is pressed by a user, the window's destroy method is called -- which closes the window."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:80
msgid "import tkinter as tk\n"
"from tkinter import ttk\n"
"\n"
"# Create the application window\n"
"window = tk.Tk()\n"
"\n"
"# Create the user interface\n"
"my_label = ttk.Label(window, text=\"Hello World\")\n"
"my_label.grid(row=1, column=1)\n"
"\n"
"quit_button = ttk.Button(window, text=\"Quit\")\n"
"quit_button.grid(row=2, column=1)\n"
"quit_button['command'] = window.destroy\n"
"\n"
"# Start the GUI event loop\n"
"window.mainloop()"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:100
msgid "Other Events"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:102
msgid "Using ``command`` events for simple actions is the easiest way to handle user events. For more complex situations, the next lesson explains how to associate \"lower level\" events with ``event handler`` functions."
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:106
msgid "event"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:106
msgid "event description"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:106
msgid "event object"
msgstr ""

#: ../../_sources/GUIandEventDrivenProgramming/06_command_events.rst:106
msgid "widget command property"
msgstr ""

