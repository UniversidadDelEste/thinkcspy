# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:15
msgid "Statements and Expressions"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:None
msgid "<div id=\"expression_vid\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/expressions.png\">\n"
"    <source src=\"http://media.interactivepython.org/thinkcsVideos/Expressions.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/thinkcsVideos/Expressions.webm\" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#expression_vid_thumb').click(function(e) {\n"
"         $('#expression_vid').show();\n"
"         $('#expression_vid_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': 'expression_vid'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#expression_vid video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#expression_vid video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': 'expression_vid'});\n"
"      });\n"
"   });\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:24
msgid "A **statement** is an instruction that the Python interpreter can execute. We have only seen the assignment statement so far.  Some other kinds of statements that we'll see shortly are ``while`` statements, ``for`` statements, ``if`` statements,  and ``import`` statements.  (There are other kinds too!)"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:32
msgid "An **expression** is a combination of values, variables, operators, and calls to functions. Expressions need to be evaluated.  If you ask Python to ``print`` an expression, the interpreter **evaluates** the expression and displays the result."
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:43
msgid "In this example ``len`` is a built-in Python function that returns the number of characters in a string.  We've previously seen the ``print`` and the ``type`` functions, so this is our third example of a function!"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:47
msgid "The *evaluation of an expression* produces a value, which is why expressions can appear on the right hand side of assignment statements. A value all by itself is a simple expression, and so is a variable.  Evaluating a variable gives the value that the variable refers to."
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:59
msgid "If we take a look at this same example in the Python shell, we will see one of the distinct differences between statements and expressions."
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:61
msgid ">>> y = 3.14\n"
">>> x = len(\"hello\")\n"
">>> print(x)\n"
"5\n"
">>> print(y)\n"
"3.14\n"
">>> y\n"
"3.14\n"
">>>"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:73
msgid "Note that when we enter the assignment statement, ``y = 3.14``, only the prompt is returned.  There is no value.  This is due to the fact that statements, such as the assignment statement, do not return a value.  They are simply executed."
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:76
msgid "On the other hand, the result of executing the assignment statement is the creation of a reference from a variable, ``y``, to a value, ``3.14``.  When we execute the print function working on ``y``, we see the value that y is referring to.  In fact, evaluating ``y`` by itself results in the same response."
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:30
#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:79
msgid "expression"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:79
msgid "operator"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:79
msgid "operand"
msgstr ""

#: ../../_sources/SimplePythonData/StatementsandExpressions.rst:79
msgid "integer division"
msgstr ""

