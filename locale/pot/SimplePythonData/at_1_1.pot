# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/SimplePythonData/at_1_1.rst:6
msgid "Python Beyond the Browser"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:8
msgid "Although having Python available for you to use right in the browser is convenient, there are some limitations, and Python is a real programming language used for real applications by some very large and impressive corporations.  In this Advanced Topic we'll show you how to use the Python shell along with a simple text editor.  In a later advanced topic we will introduce you to something called an Integrated Development Environment or IDE that will make life even better for you when working on a larger Python project."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:18
msgid "The Python Shell"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:20
msgid "One of the most important ways you can learn computer science is by simply experimenting or trying things.  Unlike chemistry where you can explode things and do real damage, in computer science you really can't go wrong by just experimenting a bit.  In the worst case you might have to reboot your computer, but its pretty hard to do any long lasting damage."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:26
msgid "For those of you used to fancy graphical user interfaces the Python shell make look a bit primitive, but don't be fooled by the lack of fancy interface, you can do a lot of powerful stuff in the shell.  On a Mac or with Linux Python is already installed for you.  There is a short video link at the end of this topic that explains how to download and install Python on Windows.  Here is an example of what the shell looks like once you have it started up."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:36
msgid ".. image:: SimplePythonData/Figures/python_shell.png"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:37
msgid "To run the Python shell you will first need to start up the Terminal application, on the Mac you can find this under Utilities in the Applications folder, on most versions of Linux you can find it under the accessories menu. Once you have a terminal started, you simply type python and press the return key.  To start the shell under windows simply go to the start menu and choose `Python (command line)` from the menu."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:45
msgid "Now that you have the shell started you may wonder what you can do with it? In the shell you can do anything you would do in a Python program.  Any of the examples you have seen in this chapter can be typed in directly to the shell.  Any Python expression can be entered into the shell and you will see the result printed out for you right underneath.  Here are some examples using the functions and expressions introduced in this chapter."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:54
msgid ".. image:: SimplePythonData/Figures/shell_expressions.png"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:55
msgid "It's a good idea to get in the habit of using the shell.  Very often if you have a question about how something works you can answer the question for yourself by simply trying it in the shell.  If you need a really extensable calculator you can simply start up your Python shell and use it to calculate just about anything.  Soon you'll find yourself writing little Python snippets for all kinds of things."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:63
msgid "Running a Python Program"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:65
msgid "Of course the problem with the Python shell is that you can't save anything, so you always have to retype whatever you want to do over again.  It's also difficult to do anything more than a few lines long because if you make a typo you end up retying everything.  Fortunately there is a solution for that as well.  Python allows you to write a program, and save it as a text file with the extension `.py` and then you can run that program right from the command line."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:73
msgid "Here is a simple example of a Python program."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:75
msgid "print('Hello World')\n"
"print('2 + 3 = ', 2 + 3)"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:80
msgid "Let's assume that you have typed in the lines above in Notepad or TextEdit or some similar editor, if you already know emacs or vi you are a awesome!  Now save the file as `testprog1.py` and then head back to the terminal.  Now at the command line of the terminal type `python testprog1.py` and you will see the following output"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:86
msgid "bmiller@chronos> python testprog1.py\n"
"Hello World\n"
"2 + 3 =  5"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:93
msgid "Anything we do in the following chapters that appears in the editing window in the web page can be done exactly the same in the terminal just like the small example above.  This example illustrates one very important difference between entering expressions in the Python shell, and writing a Python program.  The Python shell uses what we call a read eval print loop.  That is, Python *reads* an expression from the command line, then *evaluates* that expression, and finally *prints* the result.  In a python program that you run using the Python interpreter, you have to be explicit about what it is you want to print.  That is why in the Python program we use the print function on both lines."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:106
msgid "Installing Python on Windows"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:108
msgid "If you are using windows you will need to install Python for yourself.  Here is a video that explains how to do it."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:111
msgid "<iframe width=\"425\" height=\"349\" src=\"http://www.youtube.com/embed/9EfGpN1Pnsg\"\n"
"        frameborder=\"0\" allowfullscreen></iframe>"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:116
msgid "We are assuming that you use Python 3.x, as of this writing the latest version is Python 3.2.1.  This link will tell you how to update or install Python on Linux, Mac, or Windows. `Install Python <http://interactivepython.org/courselib/static/diveintopython3/installing-python.html>`_"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:121
msgid "Glossary"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:124
msgid "terminal"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:126
msgid "A terminal is a program now days, but not too many years ago computer scientists did their work at a hardware device called a terminal. The terminal was connected by wire, or phone line to a computer somewhere else.  Yes, the internet has not always been here."
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:130
msgid "command line"
msgstr ""

#: ../../_sources/SimplePythonData/at_1_1.rst:132
msgid "The command line is often synonymous with terminal in that when you are using the terminal you are also using the command line.  It's where you type in commands, and then the computer interprets those commands and responds to you with results."
msgstr ""

