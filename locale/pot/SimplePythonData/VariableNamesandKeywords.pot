# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:15
msgid "Variable Names and Keywords"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:17
msgid "**Variable names** can be arbitrarily long. They can contain both letters and digits, but they have to begin with a letter or an underscore. Although it is legal to use uppercase letters, by convention we don't. If you do, remember that case matters. ``Bruce`` and ``bruce`` are different variables."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:24
msgid "Variable names can never contain spaces."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:26
msgid "The underscore character ( ``_``) can also appear in a name. It is often used in names with multiple words, such as ``my_name`` or ``price_of_tea_in_china``. There are some situations in which names beginning with an underscore have special meaning, so a safe rule for beginners is to start all names with a letter."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:32
msgid "If you give a variable an illegal name, you get a syntax error.  In the example below, each of the variable names is illegal."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:37
msgid "76trombones = \"big parade\"\n"
"more$ = 1000000\n"
"class = \"Computer Science 101\""
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:42
msgid "``76trombones`` is illegal because it does not begin with a letter.  ``more$`` is illegal because it contains an illegal character, the dollar sign. But what's wrong with ``class``?"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:46
msgid "It turns out that ``class`` is one of the Python **keywords**. Keywords define the language's syntax rules and structure, and they cannot be used as variable names. Python has thirty-something keywords (and every now and again improvements to Python introduce or eliminate one or two):"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:53
msgid "and"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:53
msgid "as"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:53
msgid "assert"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:53
msgid "break"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:53
msgid "class"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:53
msgid "continue"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:54
msgid "def"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:54
msgid "del"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:54
msgid "elif"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:54
msgid "else"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:54
msgid "except"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:54
msgid "exec"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:55
msgid "finally"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:55
msgid "for"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:55
msgid "from"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:55
msgid "global"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:55
msgid "if"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:55
msgid "import"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:56
msgid "in"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:56
msgid "is"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:56
msgid "lambda"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:56
msgid "nonlocal"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:56
msgid "not"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:56
msgid "or"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:57
msgid "pass"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:57
msgid "raise"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:57
msgid "return"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:57
msgid "try"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:57
msgid "while"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:57
msgid "with"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:58
msgid "yield"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:58
#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:95
msgid "True"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:58
#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:95
msgid "False"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:58
msgid "None"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:61
msgid "You might want to keep this list handy. If the interpreter complains about one of your variable names and you don't know why, see if it is on this list."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:64
msgid "Programmers generally choose names for their variables that are meaningful to the human readers of the program --- they help the programmer document, or remember, what the variable is used for."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:70
msgid "Beginners sometimes confuse \"meaningful to the human readers\" with \"meaningful to the computer\".  So they'll wrongly think that because they've called some variable ``average`` or ``pi``, it will somehow automagically calculate an average, or automagically associate the variable ``pi`` with the value 3.14159.  No! The computer doesn't attach semantic meaning to your variable names."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:77
msgid "So you'll find some instructors who deliberately don't choose meaningful names when they teach beginners --- not because they don't think it is a good habit, but because they're trying to reinforce the message that you, the programmer, have to write some program code to calculate the average, or you must write an assignment statement to give a variable the value you want it to have."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:84
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:95
msgid "-  The + character is not allowed in variable names."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:95
msgid "-  The + character is not allowed in variable names (everything else in this name is fine)."
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:93
msgid "data-5-1: True or False:  the following is a legal variable name in Python:   A_good_grade_is_A+"
msgstr ""

#: ../../_sources/SimplePythonData/VariableNamesandKeywords.rst:96
msgid "statement"
msgstr ""

