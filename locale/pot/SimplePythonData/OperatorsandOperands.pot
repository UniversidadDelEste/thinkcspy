# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:15
msgid "Operators and Operands"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:17
msgid "**Operators** are special tokens that represent computations like addition, multiplication and division. The values the operator works on are called **operands**."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:21
msgid "The following are all legal Python expressions whose meaning is more or less clear::"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:24
msgid "20 + 32\n"
"hour - 1\n"
"hour * 60 + minute\n"
"minute / 60\n"
"5 ** 2\n"
"(5 + 9) * (15 - 7)"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:31
msgid "The tokens ``+``, ``-``, and ``*``, and the use of parenthesis for grouping, mean in Python what they mean in mathematics. The asterisk (``*``) is the token for multiplication, and ``**`` is the token for exponentiation. Addition, subtraction, multiplication, and exponentiation all do what you expect."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:46
msgid "When a variable name appears in the place of an operand, it is replaced with the value that it refers to before the operation is performed. For example, what if we wanted to convert 645 minutes into hours. In Python 3, division is denoted by the operator token ``/`` which always evaluates to a floating point result."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:59
msgid "What if, on the other hand, we had wanted to know how many *whole* hours there are and how many minutes remain.  To help answer this question, Python gives us a second flavor of the division operator.  This version, called **integer division**, uses the token ``//``.  It always *truncates* its result down to the next smallest integer (to the left on the number line)."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:74
msgid "Pay particular attention to the first two examples above.  Notice that the result of floating point division is ``1.75`` but the result of the integer division is simply ``1``. Take care that you choose the correct flavor of the division operator.  If you're working with expressions where you need floating point values, use the division operator ``/``.  If you want an integer result, use ``//``."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:82
msgid "The **modulus operator**, sometimes also called the **remainder operator** or **integer remainder operator** works on integers (and integer expressions) and yields the remainder when the first operand is divided by the second. In Python, the modulus operator is a percent sign (``%``). The syntax is the same as for other operators."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:96
msgid "In the above example, 7 divided by 3 is 2 when we use integer division and there is a remainder of 1."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:98
msgid "The modulus operator turns out to be surprisingly useful. For example, you can check whether one number is divisible by another---if ``x % y`` is zero, then ``x`` is divisible by ``y``. Also, you can extract the right-most digit or digits from a number.  For example, ``x % 10`` yields the right-most digit of ``x`` (in base 10). Similarly ``x % 100`` yields the last two digits."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:105
msgid "Finally, returning to our time example, the remainder operator is extremely useful for doing conversions, say from seconds, to hours, minutes and seconds. If we start with a number of seconds, say 7684, the following program uses integer division and remainder to convert to an easier form.  Step through it to be sure you understand how the division and remainder operators are being used to compute the correct values."
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:118
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch02_19_codelens\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (ch02_19_codelens)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch02_19_codelens_trace = {\"code\": \"total_secs = 7684\\nhours = total_secs // 3600\\nsecs_still_remaining = total_secs % 3600\\nminutes =  secs_still_remaining // 60\\nsecs_finally_remaining = secs_still_remaining  % 60\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"total_secs\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"total_secs\": 7684}, \"heap\": {}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"total_secs\", \"hours\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"hours\": 2, \"total_secs\": 7684}, \"heap\": {}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"total_secs\", \"hours\", \"secs_still_remaining\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"hours\": 2, \"total_secs\": 7684, \"secs_still_remaining\": 484}, \"heap\": {}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"total_secs\", \"hours\", \"secs_still_remaining\", \"minutes\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"hours\": 2, \"total_secs\": 7684, \"secs_still_remaining\": 484, \"minutes\": 8}, \"heap\": {}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"total_secs\", \"hours\", \"secs_still_remaining\", \"minutes\", \"secs_finally_remaining\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"hours\": 2, \"total_secs\": 7684, \"secs_still_remaining\": 484, \"minutes\": 8, \"secs_finally_remaining\": 4}, \"heap\": {}, \"line\": 5, \"event\": \"return\"}]};\n"
"var ch02_19_codelens_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch02_19_codelens_vis = new ExecutionVisualizer('ch02_19_codelens',ch02_19_codelens_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch02_19_codelens_vis,'ch02_19_codelens');\n"
"        styleButtons('ch02_19_codelens');\n"
"        allVisualizers.push(ch02_19_codelens_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component ch02_19_codelens_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch02_19_codelens_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'ch02_19_codelens'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch02_19_codelens_vis) {\n"
"        ch02_19_codelens_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:119
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:132
msgid "data-7-1: What value is printed when the following statement executes?"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:134
msgid "print(18 / 4)"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:151
msgid "data-7-2: What value is printed when the following statement executes?"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:153
msgid "print(18 // 4)"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:169
msgid "data-7-3: What value is printed when the following statement executes?"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:171
msgid "print(18 % 4)"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:80
msgid "modulus"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:176
msgid "input"
msgstr ""

#: ../../_sources/SimplePythonData/OperatorsandOperands.rst:176
msgid "input dialog"
msgstr ""

