# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 13:50-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/SimplePythonData/Variables.rst:15
msgid "Variables"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:24
msgid "One of the most powerful features of a programming language is the ability to manipulate **variables**. A variable is a name that refers to a value."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:27
msgid "**Assignment statements** create new variables and also give them values to refer to."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:35
msgid "This example makes three assignments. The first assigns the string value ``\"What's up, Doc?\"`` to a new variable named ``message``. The second gives the integer ``17`` to ``n``, and the third assigns the floating-point number ``3.14159`` to a variable called ``pi``."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:40
msgid "The **assignment token**, ``=``, should not be confused with *equality* (we will see later that equality uses the ``==`` token).  The assignment statement links a *name*, on the left hand side of the operator, with a *value*, on the right hand side.  This is why you will get an error if you enter:"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:51
msgid "When reading or writing code, say to yourself \"n is assigned 17\" or \"n gets the value 17\" or \"n is a reference to the object 17\" or \"n refers to the object 17\".  Don't say \"n equals 17\"."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:54
msgid "A common way to represent variables on paper is to write the name with an arrow pointing to the variable's value. This kind of figure, known as a **reference diagram**, is often called a **state snapshot** because it shows what state each of the variables is in at a particular instant in time.  (Think of it as the variable's state of mind). This diagram shows the result of executing the assignment statements shown above."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:63
msgid "If you ask Python to evaluate a variable, it will produce the value that is currently linked to the variable.  In other words, evaluating a variable will give you the value that is referred to by the variable."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:78
msgid "In each case the result is the value of the variable. To see this in even more detail, we can run the program using codelens."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:92
msgid "Now, as you step through the statements, you can see the variables and the values they reference as those references are created."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:99
msgid "Variables also have types; again, we can ask the interpreter what they are."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:114
msgid "The type of a variable is the type of the object it currently refers to."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:117
msgid "We use variables in a program to \"remember\" things, like the current score at the football game.  But variables are *variable*. This means they can change over time, just like the scoreboard at a football game.  You can assign a value to a variable, and later assign a different value to the same variable."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:124
msgid "This is different from math. In math, if you give `x` the value 3, it cannot change to refer to a different value half-way through your calculations!"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:128
msgid "To see this, read and then run the following program. You'll notice we change the value of `day` three times, and on the third assignment we even give it a value that is of a different type."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:146
msgid "A great deal of programming is about having the computer remember things.  For example, we might want to keep track of the number of missed calls on your phone.  Each time another call is missed, we will arrange to update or change the variable so that it will always reflect the correct value."
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:150
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/SimplePythonData/Variables.rst:163
msgid "data-4-1: What is printed when the following statements execute?"
msgstr ""

