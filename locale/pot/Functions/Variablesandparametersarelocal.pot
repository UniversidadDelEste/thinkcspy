# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:15
msgid "Variables and Parameters are Local"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:17
msgid "An assignment statement in a function creates a **local variable** for the variable on the left hand side of the assignment operator. It is called local because this variable only exists inside the function and you cannot use it outside. For example, consider again the ``square`` function:"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:31
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"bad_local\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (bad_local)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var bad_local_trace = {\"code\": \"def square(x):\\n    y = x * x\\n    return y\\n\\nz = square(10)\\nprint(y)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\"]}], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\"]}], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 100, \"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"y\"]}], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 100, \"x\": 10, \"__return__\": 100}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"y\", \"__return__\"]}], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"return\"}, {\"ordered_globals\": [\"square\", \"z\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1], \"z\": 100}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"z\"], \"stdout\": \"\", \"exception_msg\": \"NameError: name 'y' is not defined\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1], \"z\": 100}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 6, \"event\": \"exception\"}]};\n"
"var bad_local_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        bad_local_vis = new ExecutionVisualizer('bad_local',bad_local_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(bad_local_vis,'bad_local');\n"
"        styleButtons('bad_local');\n"
"        allVisualizers.push(bad_local_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component bad_local_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#bad_local_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'bad_local'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (bad_local_vis) {\n"
"        bad_local_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:32
msgid "If you press the 'last >>' button you will see an error message. When we try to use ``y`` on line 6 (outside the function) Python looks for a global variable named ``y`` but does not find one.  This results in the error: ``Name Error: 'y' is not defined.``"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:37
msgid "The variable ``y`` only exists while the function is being executed --- we call this its **lifetime**. When the execution of the function terminates (returns), the local variables  are destroyed.  Codelens helps you  visualize this because the local variables disappear after the function returns.  Go back and step through the statements paying particular attention to the variables that are created when the function is called. Note when they are subsequently destroyed as the function returns."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:45
msgid "Formal parameters are also local and act like local variables. For example, the lifetime of ``x`` begins when ``square`` is called, and its lifetime ends when the function completes its execution."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:50
msgid "So it is not possible for a function to set some local variable to a value, complete its execution, and then when it is called again next time, recover the local variable.  Each call of the function creates new local variables, and their lifetimes expire when the function returns to the caller."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:56
msgid "On the other hand, it is legal for a function to access a global variable.  However, this is considered **bad form** by nearly all programmers and should be avoided.  Look at the following, nonsensical variation of the square function."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:71
msgid "Although the ``badsquare`` function works, it is silly and poorly written.  We have done it here to illustrate an important rule about how variables are looked up in Python. First, Python looks at the variables that are defined as local variables in the function.  We call this the **local scope**.  If the variable name is not found in the local scope, then Python looks at the global variables, or **global scope**.  This is exactly the case illustrated in the code above. ``power`` is not found locally in ``badsquare`` but it does exist globally. The appropriate way to write this function would be to pass power as a parameter. For practice, you should rewrite the badsquare example to have a second parameter called power."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:81
msgid "There is another variation on this theme of local versus global variables.  Assignment statements in the local function cannot change variables defined outside the function.  Consider the following codelens example:"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:95
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"cl_powerof_bad\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (cl_powerof_bad)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var cl_powerof_bad_trace = {\"code\": \"def powerof(x, p):\\n    power = p   # Another dumb mistake\\n    y = x ** power\\n    return y\\n\\npower = 3\\nresult = powerof(10, 2)\\nprint(result)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"powerof\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\", \"power\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"powerof\": [\"REF\", 1], \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\", \"power\"], \"stdout\": \"\", \"func_name\": \"powerof\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"p\": 2, \"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"powerof\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"powerof_f1\", \"ordered_varnames\": [\"x\", \"p\"]}], \"globals\": {\"powerof\": [\"REF\", 1], \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"powerof\", \"power\"], \"stdout\": \"\", \"func_name\": \"powerof\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"p\": 2, \"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"powerof\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"powerof_f1\", \"ordered_varnames\": [\"x\", \"p\"]}], \"globals\": {\"powerof\": [\"REF\", 1], \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\", \"power\"], \"stdout\": \"\", \"func_name\": \"powerof\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"p\": 2, \"power\": 2, \"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"powerof\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"powerof_f1\", \"ordered_varnames\": [\"x\", \"p\", \"power\"]}], \"globals\": {\"powerof\": [\"REF\", 1], \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\", \"power\"], \"stdout\": \"\", \"func_name\": \"powerof\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 100, \"p\": 2, \"power\": 2, \"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"powerof\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"powerof_f1\", \"ordered_varnames\": [\"x\", \"p\", \"power\", \"y\"]}], \"globals\": {\"powerof\": [\"REF\", 1], \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\", \"power\"], \"stdout\": \"\", \"func_name\": \"powerof\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 100, \"p\": 2, \"__return__\": 100, \"power\": 2, \"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"powerof\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"powerof_f1\", \"ordered_varnames\": [\"x\", \"p\", \"power\", \"y\", \"__return__\"]}], \"globals\": {\"powerof\": [\"REF\", 1], \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 4, \"event\": \"return\"}, {\"ordered_globals\": [\"powerof\", \"power\", \"result\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"powerof\": [\"REF\", 1], \"result\": 100, \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"powerof\", \"power\", \"result\"], \"stdout\": \"100\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"powerof\": [\"REF\", 1], \"result\": 100, \"power\": 3}, \"heap\": {\"1\": [\"FUNCTION\", \"powerof(x, p)\", null]}, \"line\": 8, \"event\": \"return\"}]};\n"
"var cl_powerof_bad_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        cl_powerof_bad_vis = new ExecutionVisualizer('cl_powerof_bad',cl_powerof_bad_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(cl_powerof_bad_vis,'cl_powerof_bad');\n"
"        styleButtons('cl_powerof_bad');\n"
"        allVisualizers.push(cl_powerof_bad_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component cl_powerof_bad_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#cl_powerof_bad_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'cl_powerof_bad'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (cl_powerof_bad_vis) {\n"
"        cl_powerof_bad_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:96
msgid "Now step through the code.  What do you notice about the values of variable ``power`` in the local scope compared to the variable ``power`` in the global scope?"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:99
msgid "The value of ``power`` in the local scope was different than the global scope. That is because in this example ``power`` was used on the left hand side of the assignment statement ``power = p``.  When a variable name is used on the left hand side of an assignment statement Python creates a local variable. When a local variable has the same name as a global variable we say that the local shadows the global.  A **shadow** means that the global variable cannot be accessed by Python because the local variable will be found first. This is another good reason not to use global variables. As you can see, it makes your code confusing and difficult to understand."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:110
msgid "To cement all of these ideas even further lets look at one final example. Inside the ``square`` function we are going to make an assignment to the parameter ``x``  There's no good reason to do this other than to emphasize the fact that the parameter ``x`` is a local variable.  If you step through the example in codelens you will see that although ``x`` is 0 in the local variables for ``square``, the ``x`` in the global scope remains 2.  This is confusing to many beginning programmers who think that an assignment to a formal parameter will cause a change to the value of the variable that was used as the actual parameter, especially when the two share the same name. But this example demonstrates that that is clearly not how Python operates."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:134
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"cl_change_parm\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (cl_change_parm)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var cl_change_parm_trace = {\"code\": \"def square(x):\\n    y = x * x\\n    x = 0       # assign a new value to the parameter x\\n    return y\\n\\nx = 2\\nz = square(x)\\nprint(z)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"x\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"x\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 2}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\"]}], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"square\", \"x\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 2}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\"]}], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"x\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 4, \"x\": 2}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"y\"]}], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"x\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 4, \"x\": 0}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"y\"]}], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"x\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"y\": 4, \"x\": 0, \"__return__\": 4}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"y\", \"__return__\"]}], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"return\"}, {\"ordered_globals\": [\"square\", \"x\", \"z\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1], \"z\": 4}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"x\", \"z\"], \"stdout\": \"4\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"x\": 2, \"square\": [\"REF\", 1], \"z\": 4}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 8, \"event\": \"return\"}]};\n"
"var cl_change_parm_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        cl_change_parm_vis = new ExecutionVisualizer('cl_change_parm',cl_change_parm_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(cl_change_parm_vis,'cl_change_parm');\n"
"        styleButtons('cl_change_parm');\n"
"        allVisualizers.push(cl_change_parm_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component cl_change_parm_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#cl_change_parm_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'cl_change_parm'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (cl_change_parm_vis) {\n"
"        cl_change_parm_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:135
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:147
msgid "Its value"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:147
msgid "The range of statements in the code where a variable can be accessed."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:147
msgid "Its name"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:147
msgid "Value is the contents of the variable.  Scope concerns where the variable is &quot;known&quot;."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:147
msgid ""
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:147
msgid "The name of a variable is just an identifier or alias.  Scope concerns where the variable is &quot;known&quot;."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:146
msgid "func-3-1: What is a variable's scope?"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:158
msgid "A temporary variable that is only used inside a function"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:158
msgid "The same as a parameter"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:158
msgid "Another name for any variable"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:158
msgid "Yes, a local variable is a temporary variable that is only known (only exists) in the function it is defined in."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:158
msgid "While parameters may be considered local variables, functions may also define and use additional local variables."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:158
msgid "Variables that are used outside a function are not local, but rather global variables."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:157
msgid "func-3-2: What is a local variable?"
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:169
msgid "Yes, and there is no reason not to."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:169
msgid "Yes, but it is considered bad form."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:169
msgid "No, it will cause an error."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:169
msgid "While there is no problem as far as Python is concerned, it is generally considered bad style because of the potential for the programmer to get confused."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:169
msgid "it is generally considered bad style because of the potential for the programmer to get confused.  If you must use global variables (also generally bad form) make sure they have unique names."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:169
msgid "Python manages global and local scope separately and has clear rules for how to handle variables with the same name in different scopes, so this will not cause a Python error."
msgstr ""

#: ../../_sources/Functions/Variablesandparametersarelocal.rst:168
msgid "func-3-3: Can you use the same name for a local variable as a global variable?"
msgstr ""

