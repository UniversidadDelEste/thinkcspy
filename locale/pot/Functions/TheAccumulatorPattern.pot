# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Functions/TheAccumulatorPattern.rst:15
msgid "The Accumulator Pattern"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:None
msgid "<div id=\"function_accumulator_pattern\" class=\"video_popup\" >\n"
"<video controls preload=\"none\"  poster=\"../_static/accumulatorpattern.png\">\n"
"    <source src=\"http://media.interactivepython.org/thinkcsVideos/accumulatorpattern.mov\" type=\"video/mp4\"></source>\n"
"    <source src=\"http://media.interactivepython.org/thinkcsVideos/accumulatorpattern.webm\" type=\"video/webm\"></source>\n"
"    No supported video types\n"
"</video>\n"
"</div>\n"
"<script>\n"
"   jQuery(function($) {\n"
"      var rb = new RunestoneBase();\n"
"      $('#function_accumulator_pattern_thumb').click(function(e) {\n"
"         $('#function_accumulator_pattern').show();\n"
"         $('#function_accumulator_pattern_thumb').hide();\n"
"         rb.logBookEvent({'event':'video','act':'play','div_id': 'function_accumulator_pattern'});\n"
"         // Log the run event\n"
"      });\n"
"      $('#function_accumulator_pattern video').one(\"click\", function(){\n"
"        this.play();\n"
"      });\n"
"      $('#function_accumulator_pattern video').one(\"play\", function(){\n"
"        rb.logBookEvent({'event':'video','act':'play','div_id': 'function_accumulator_pattern'});\n"
"      });\n"
"   });\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:24
msgid "In the previous example, we wrote a function that computes the square of a number.  The algorithm we used in the function was simple: multiply the number by itself. In this section we will reimplement the square function and use a different algorithm, one that relies on addition instead of multiplication."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:29
msgid "If you want to multiply two numbers together, the most basic approach is to think of it as repeating the process of adding one number to itself.  The number of repetitions is where the second number comes into play.  For example, if we wanted to multiply three and five, we could think about it as adding three to itself five times.  Three plus three is six, plus three is nine, plus three is 12, and finally plus three is 15.  Generalizing this, if we want to implement the idea of squaring a number, call it `n`, we would add `n` to itself `n` times."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:34
msgid "Do this by hand first and try to isolate exactly what steps you take.  You'll find you need to keep some \"running total\" of the sum so far, either on a piece of paper, or in your head.  Remembering things from one step to the next is precisely why we have variables in a program.  This means that we will need some variable to remember the \"running total\".  It should be initialized with a value of zero.  Then, we need to **update** the \"running total\" the correct number of times.  For each repetition, we'll want to update the running total by adding the number to it."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:41
msgid "In words we could say it this way.  To square the value of `n`, we will repeat the process of updating a running total `n` times.  To update the running total, we take the old value of the \"running total\" and add `n`.  That sum becomes the new value of the \"running total\"."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:44
msgid "Here is the program in activecode.  Note that the function definition is the same as it was before.  All that has changed is the details of how the squaring is done.  This is a great example of \"black box\" design.  We can change out the details inside of the box and still use the function exactly as we did before."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:64
#: ../../_sources/Functions/TheAccumulatorPattern.rst:109
msgid ""
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:64
msgid "def square(x):\n"
"    runningtotal = 0\n"
"    for counter in range(x):\n"
"        runningtotal = runningtotal + x\n"
"\n"
"    return runningtotal\n"
"\n"
"toSquare = 10\n"
"squareResult = square(toSquare)\n"
"print(\"The result of\", toSquare, \"squared is\", squareResult)"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:65
msgid "In the program above, notice that the variable ``runningtotal`` starts out with a value of 0.  Next, the iteration is performed ``x`` times.  Inside the for loop, the update occurs. ``runningtotal`` is reassigned a new value which is the old value plus the value of ``x``."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:68
msgid "This pattern of iterating the updating of a variable is commonly referred to as the **accumulator pattern**.  We refer to the variable as the **accumulator**.  This pattern will come up over and over again.  Remember that the key to making it work successfully is to be sure to initialize the variable before you start the iteration. Once inside the iteration, it is required that you update the accumulator."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:75
msgid "What would happen if we put the assignment ``runningTotal = 0`` inside the for statement?  Not sure? Try it and find out."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:80
msgid "Here is the same program in codelens.  Step through the function and watch the \"running total\" accumulate the result."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:98
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"sq_accum3\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (sq_accum3)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var sq_accum3_trace = {\"code\": \"def square(x):\\n    runningtotal = 0\\n    for counter in range(x):\\n        runningtotal = runningtotal + x\\n\\n    return runningtotal\\n\\ntoSquare = 10\\nsquareResult = square(toSquare)\\nprint(\\\"The result of\\\", toSquare, \\\"squared is\\\", squareResult)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"runningtotal\": 0}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 0, \"runningtotal\": 0}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 0, \"runningtotal\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 1, \"runningtotal\": 10}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 1, \"runningtotal\": 20}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 2, \"runningtotal\": 20}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 2, \"runningtotal\": 30}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 3, \"runningtotal\": 30}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 3, \"runningtotal\": 40}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 4, \"runningtotal\": 40}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 4, \"runningtotal\": 50}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 5, \"runningtotal\": 50}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 5, \"runningtotal\": 60}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 6, \"runningtotal\": 60}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 6, \"runningtotal\": 70}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 7, \"runningtotal\": 70}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 7, \"runningtotal\": 80}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 8, \"runningtotal\": 80}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 8, \"runningtotal\": 90}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 9, \"runningtotal\": 90}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 9, \"runningtotal\": 100}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"x\": 10, \"counter\": 9, \"runningtotal\": 100}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\"], \"stdout\": \"\", \"func_name\": \"square\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"__return__\": 100, \"x\": 10, \"counter\": 9, \"runningtotal\": 100}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"square\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"square_f1\", \"ordered_varnames\": [\"x\", \"runningtotal\", \"counter\", \"__return__\"]}], \"globals\": {\"square\": [\"REF\", 1], \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 6, \"event\": \"return\"}, {\"ordered_globals\": [\"square\", \"toSquare\", \"squareResult\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1], \"squareResult\": 100, \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 10, \"event\": \"step_line\"}, {\"ordered_globals\": [\"square\", \"toSquare\", \"squareResult\"], \"stdout\": \"('The result of', 10, 'squared is', 100)\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"square\": [\"REF\", 1], \"squareResult\": 100, \"toSquare\": 10}, \"heap\": {\"1\": [\"FUNCTION\", \"square(x)\", null]}, \"line\": 10, \"event\": \"return\"}]};\n"
"var sq_accum3_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        sq_accum3_vis = new ExecutionVisualizer('sq_accum3',sq_accum3_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(sq_accum3_vis,'sq_accum3');\n"
"        styleButtons('sq_accum3');\n"
"        allVisualizers.push(sq_accum3_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component sq_accum3_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#sq_accum3_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'sq_accum3'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (sq_accum3_vis) {\n"
"        sq_accum3_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:107
msgid "This workspace is provided for your convenience.  You can use this activecode window to try out anything you like."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:109
msgid "\n"
""
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:111
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "The square function will return x instead of x * x"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "The square function will cause an error"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "The square function will work as expected and return x * x"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "The square function will return 0 instead of x * x"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "The variable runningtotal will be reset to 0 each time through the loop.   However because this assignment happens as the first instruction, the next instruction in the loop will set it back to x.   When the loop finishes, it will have the value x, which is what is returned."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "Assignment statements are perfectly legal inside loops and will not cause an error."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "By putting the statement that sets runningtotal to 0 inside the loop, that statement gets executed every time through the loop, instead of once before the loop begins.  The result is that runningtotal is 'cleared' (reset to 0) each time through the loop."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:138
msgid "The line runningtotal = 0 is the first line in the for loop, but immediately after this line, the line runningtotal = runningtotal + x will execute, giving runningtotal a non-zero value  (assuming x is non-zero)."
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:124
msgid "func-4-1: Consider the following code:"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:126
msgid "def square(x):\n"
"    runningtotal = 0\n"
"    for counter in range(x):\n"
"        runningtotal = runningtotal + x\n"
"    return runningtotal"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:134
msgid "What happens if you put the initialization of runningtotal (the line runningtotal = 0) inside the for loop as the first instruction in the loop?"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:156
msgid "\n"
"    <pre data-component=\"parsons\" id=\"question5_4_1p\">\n"
"        <span data-question>func-4-2: Rearrange the code statements so that the program will add up the first n odd numbers where n is provided by the user.</span>n = int(input('How many odd numbers would\n"
"you like to add together?'))\n"
"thesum = 0\n"
"oddnumber = 1\n"
"---\n"
"for counter in range(n):\n"
"---\n"
"   thesum = thesum + oddnumber\n"
"   oddnumber = oddnumber + 2\n"
"---\n"
"print(thesum)</pre>\n"
"    "
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:99
msgid "functional decomposition"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:99
msgid "generalization"
msgstr ""

#: ../../_sources/Functions/TheAccumulatorPattern.rst:99
msgid "abstraction"
msgstr ""

