# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-25 15:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Functions/thinkcspyExercises.rst:12
msgid "Exercises"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid "number"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:16
msgid "1"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:22
msgid "Use the drawsquare function we wrote in this chapter in a program to draw the image shown below. Assume each side is 20 units. (Hint: notice that the turtle has already moved away from the ending point of the last square when the program ends.)"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/five_squares.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:87
msgid "Write a program to draw this. Assume the innermost square is 20 units per side, and each successive square is 20 units bigger, per side, than the one inside it."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/nested_squares.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:102
msgid "Write a non-fruitful function ``drawPoly(someturtle, somesides, somesize)`` which makes a turtle draw a regular polygon. When called with ``drawPoly(tess, 8, 50)``, it will draw a shape like this:"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/regularpolygon.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:139
msgid "Draw this pretty pattern."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/tess08.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:151
msgid "The two spirals in this picture differ only by the turn angle.  Draw both."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/tess_spirals.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:207
msgid "Write a non-fruitful function ``drawEquitriangle(someturtle, somesize)`` which calls ``drawPoly`` from the previous question to have its turtle draw a equilateral triangle."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:219
msgid "Write a fruitful function ``sumTo(n)`` that returns the sum of all integer numbers up to and including `n`.   So ``sumTo(10)`` would be ``1+2+3...+10`` which would return the value 55.  Use the equation  (n * (n + 1)) / 2."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:268
msgid "Write a function `areaOfCircle(r)` which returns the area of a circle of radius `r`.  Make sure you use the math module in your solution."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:296
msgid "Write a non-fruitful function to draw a five pointed star, where the length of each side is 100 units."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/star.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:324
msgid "Extend your program above.  Draw five stars, but between each, pick up the pen, move forward by 350 units, turn right by 144, put the pen down, and draw the next star. You'll get something like this (note that you will need to move to the left before drawing your first star in order to fit everything in the window):"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:0
msgid ".. image:: Functions/Figures/five_stars.png"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:330
msgid "What would it look like if you didn't pick up the pen?"
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:341
msgid "Extend the star function to draw an n pointed star.  (Hint: n must be an odd number greater or equal to 3)."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:369
msgid "Write a function called drawSprite that will draw a sprite.  The function will need parameters for the turtle, the number of legs, and the length of the legs.  Invoke the function to create a sprite with 15 legs of length 120."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:382
msgid "Rewrite the function ``sumTo(n)`` that returns the sum of all integer numbers up to and including `n`.   This time use the accumulator pattern."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:430
msgid "Write a function called ``mySqrt`` that will approximate the square root of a number, call it n, by using Newton's algorithm. Newton's approach is an iterative guessing algorithm where the initial guess is n/2 and each subsequent guess is computed using   the formula:  newguess = (1/2) * (oldguess + (n/oldguess))."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:460
msgid "Write a function called ``myPi`` that will return an approximation of PI (3.14159...).  Use the `Leibniz <http://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80>`_ approximation."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:500
msgid "Write a function called `myPi` that will return an approximation of PI (3.14159...).  Use the `Madhava <http://en.wikipedia.org/wiki/Madhava_of_Sangamagrama>`_ approximation."
msgstr ""

#: ../../_sources/Functions/thinkcspyExercises.rst:516
msgid "Write a function called `fancySquare` that will draw a square with fancy corners (spites on the corners).  You should implement and use the `drawSprite` function from above.  For an even more interesting look, how about adding small triangles to the ends of the sprite legs."
msgstr ""

