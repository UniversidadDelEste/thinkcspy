# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/AppendversusConcatenate.rst:15
msgid "Append versus Concatenate"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:17
msgid "The ``append`` method adds a new item to the end of a list.  It is also possible to add a new item to the end of a list by using the concatenation operator.  However, you need to be careful."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:19
msgid "Consider the following example.  The original list has 3 integers.  We want to add the word \"cat\" to the end of the list."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:28
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"appcon1\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (appcon1)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var appcon1_trace = {\"code\": \"origlist = [45, 32, 88]\\n\\noriglist.append(\\\"cat\\\")\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 32, 88]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 32, 88, \"cat\"]}, \"line\": 3, \"event\": \"return\"}]};\n"
"var appcon1_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        appcon1_vis = new ExecutionVisualizer('appcon1',appcon1_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(appcon1_vis,'appcon1');\n"
"        styleButtons('appcon1');\n"
"        allVisualizers.push(appcon1_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component appcon1_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#appcon1_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'appcon1'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (appcon1_vis) {\n"
"        appcon1_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:29
msgid "Here we have used ``append`` which simply modifies the list.  In order to use concatenation, we need to write an assignment statement that uses the accumulator pattern::"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:31
msgid "origlist = origlist + [\"cat\"]"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:33
msgid "Note that the word \"cat\" needs to be placed in a list since the concatenation operator needs two lists to do its work."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:41
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"appcon2\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (appcon2)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var appcon2_trace = {\"code\": \"origlist = [45, 32, 88]\\n\\noriglist = origlist + [\\\"cat\\\"]\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 32, 88]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"origlist\": [\"REF\", 2]}, \"heap\": {\"2\": [\"LIST\", 45, 32, 88, \"cat\"]}, \"line\": 3, \"event\": \"return\"}]};\n"
"var appcon2_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        appcon2_vis = new ExecutionVisualizer('appcon2',appcon2_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(appcon2_vis,'appcon2');\n"
"        styleButtons('appcon2');\n"
"        allVisualizers.push(appcon2_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component appcon2_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#appcon2_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'appcon2'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (appcon2_vis) {\n"
"        appcon2_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:42
msgid "It is also important to realize that with append, the original list is simply modified. On the other hand, with concatenation, an entirely new list is created.  This can be seen in the following codelens example where ``newlist`` refers to a list which is a copy of the original list, ``origlist``, with the new item \"cat\" added to the end.  ``origlist`` still contains the three values it did before the concatenation.  This is why the assignment operation is necessary as part of the accumulator pattern."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:53
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"appcon3\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (appcon3)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var appcon3_trace = {\"code\": \"origlist = [45, 32, 88]\\n\\nnewlist = origlist + [\\\"cat\\\"]\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 32, 88]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"origlist\", \"newlist\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"newlist\": [\"REF\", 2], \"origlist\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 45, 32, 88], \"2\": [\"LIST\", 45, 32, 88, \"cat\"]}, \"line\": 3, \"event\": \"return\"}]};\n"
"var appcon3_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        appcon3_vis = new ExecutionVisualizer('appcon3',appcon3_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(appcon3_vis,'appcon3');\n"
"        styleButtons('appcon3');\n"
"        allVisualizers.push(appcon3_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component appcon3_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#appcon3_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'appcon3'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (appcon3_vis) {\n"
"        appcon3_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:54
msgid "**Check you understanding**"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:71
msgid "[4, 2, 8, 6, 5, 999]"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:71
msgid "Error, you cannot concatenate a list with an integer."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:71
msgid "You cannot concatenate a list with an integer."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:71
msgid "Yes, in order to perform concatenation you would need to write alist+[999].  You must have two lists."
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:63
msgid "list-16-1: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:65
msgid "alist = [4, 2, 8, 6, 5]\n"
"alist = alist + 999\n"
"print(alist)"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:72
#: ../../_sources/Lists/AppendversusConcatenate.rst:74
msgid "for loop"
msgstr ""

#: ../../_sources/Lists/AppendversusConcatenate.rst:72
msgid "enumerate"
msgstr ""

