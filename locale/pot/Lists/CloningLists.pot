# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/CloningLists.rst:15
msgid "Cloning Lists"
msgstr ""

#: ../../_sources/Lists/CloningLists.rst:17
msgid "If we want to modify a list and also keep a copy of the original, we need to be able to make a copy of the list itself, not just the reference. This process is sometimes called **cloning**, to avoid the ambiguity of the word copy."
msgstr ""

#: ../../_sources/Lists/CloningLists.rst:21
msgid "The easiest way to clone a list is to use the slice operator."
msgstr ""

#: ../../_sources/Lists/CloningLists.rst:23
msgid "Taking any slice of ``a`` creates a new list. In this case the slice happens to consist of the whole list."
msgstr ""

#: ../../_sources/Lists/CloningLists.rst:None
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp09_is4\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (chp09_is4)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp09_is4_trace = {\"code\": \"a = [81, 82, 83]\\n\\nb = a[:]       # make a clone using slice\\nprint(a == b)\\nprint(a is b)\\n\\nb[0] = 5\\n\\nprint(a)\\nprint(b)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 5, 82, 83]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\n[81, 82, 83]\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 5, 82, 83]}, \"line\": 10, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\n[81, 82, 83]\\n[5, 82, 83]\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 5, 82, 83]}, \"line\": 10, \"event\": \"return\"}]};\n"
"var chp09_is4_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp09_is4_vis = new ExecutionVisualizer('chp09_is4',chp09_is4_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp09_is4_vis,'chp09_is4');\n"
"        styleButtons('chp09_is4');\n"
"        allVisualizers.push(chp09_is4_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component chp09_is4_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp09_is4_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'chp09_is4'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp09_is4_vis) {\n"
"        chp09_is4_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/CloningLists.rst:40
msgid "Now we are free to make changes to ``b`` without worrying about ``a``.  Again, we can clearly see in codelens that ``a`` and ``b`` are entirely different list objects."
msgstr ""

