# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/ListsareMutable.rst:15
msgid "Lists are Mutable"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:17
msgid "Unlike strings, lists are **mutable**.  This means we can change an item in a list by accessing it directly as part of the assignment statement. Using the indexing operator (square brackets) on the left side of an assignment, we can update one of the list items."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:31
msgid "An assignment to an element of a list is called **item assignment**. Item assignment does not work for strings.  Recall that strings are immutable."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:35
msgid "Here is the same example in codelens so that you can step through the statements and see the changes to the list elements."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:45
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"item_assign\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (item_assign)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var item_assign_trace = {\"code\": \"fruit = [\\\"banana\\\", \\\"apple\\\", \\\"cherry\\\"]\\n\\nfruit[0] = \\\"pear\\\"\\nfruit[-1] = \\\"orange\\\"\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", \"banana\", \"apple\", \"cherry\"]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", \"pear\", \"apple\", \"cherry\"]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"fruit\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"fruit\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", \"pear\", \"apple\", \"orange\"]}, \"line\": 4, \"event\": \"return\"}]};\n"
"var item_assign_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        item_assign_vis = new ExecutionVisualizer('item_assign',item_assign_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(item_assign_vis,'item_assign');\n"
"        styleButtons('item_assign');\n"
"        allVisualizers.push(item_assign_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component item_assign_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#item_assign_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'item_assign'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (item_assign_vis) {\n"
"        item_assign_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:46
msgid "By combining assignment with the slice operator we can update several elements at once."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:54
msgid "We can also remove elements from a list by assigning the empty list to them."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:62
msgid "We can even insert elements into a list by squeezing them into an empty slice at the desired location."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:73
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:92
msgid "[4, 2, True, 8, 6, 5]"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:92
msgid "[4, 2, True, 6, 5]"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:92
msgid "Error, it is illegal to assign"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:92
msgid "Item assignment does not insert the new item into the list."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:92
msgid "Yes, the value True is placed in the list at index 2.  It replaces 8."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:92
msgid "Item assignment is allowed with lists.  Lists are mutable."
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:84
msgid "list-8-1: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:86
msgid "alist = [4, 2, 8, 6, 5]\n"
"alist[2] = True\n"
"print(alist)"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:93
msgid "del statement"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:93
msgid "statement"
msgstr ""

#: ../../_sources/Lists/ListsareMutable.rst:93
msgid "del"
msgstr ""

