# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/UsingListsasParameters.rst:15
msgid "Using Lists as Parameters"
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:17
msgid "Functions which take lists as arguments and change them during execution are called **modifiers** and the changes they make are called **side effects**. Passing a list as an argument actually passes a reference to the list, not a copy of the list. Since lists are mutable, changes made to the elements referenced by the parameter change the same list that the argument is referencing. For example, the function below takes a list as an argument and multiplies each element in the list by 2:"
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:40
msgid "The parameter ``aList`` and the variable ``things`` are aliases for the same object."
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:None
msgid ".. image:: Lists/Figures/references4.png\n"
"   :alt: State snapshot for multiple references to a list as a parameter"
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:46
msgid "Since the list object is shared by two references, there is only one copy. If a function modifies the elements of a list parameter, the caller sees the change since the change is occurring to the original."
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:50
msgid "This can be easily seen in codelens.  Note that after the call to ``doubleStuff``, the formal parameter ``aList`` refers to the same object as the actual parameter ``things``.  There is only one copy of the list object itself."
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:65
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp09_parm1_trace\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (chp09_parm1_trace)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp09_parm1_trace_trace = {\"code\": \"def doubleStuff(aList):\\n    \\\"\\\"\\\" Overwrite each element in aList with double its value. \\\"\\\"\\\"\\n    for position in range(len(aList)):\\n        aList[position] = 2 * aList[position]\\n\\nthings = [2, 5, 9]\\n\\ndoubleStuff(things)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"position\": 0, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"position\": 0, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 5, 9]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"position\": 1, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 5, 9]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"position\": 1, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 10, 9]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"position\": 2, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 10, 9]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"position\": 2, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 10, 18]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"__return__\": null, \"position\": 2, \"aList\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"aList\", \"position\", \"__return__\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 10, 18]}, \"line\": 3, \"event\": \"return\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(aList)\", null], \"2\": [\"LIST\", 4, 10, 18]}, \"line\": 8, \"event\": \"return\"}]};\n"
"var chp09_parm1_trace_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp09_parm1_trace_vis = new ExecutionVisualizer('chp09_parm1_trace',chp09_parm1_trace_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp09_parm1_trace_vis,'chp09_parm1_trace');\n"
"        styleButtons('chp09_parm1_trace');\n"
"        allVisualizers.push(chp09_parm1_trace_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component chp09_parm1_trace_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp09_parm1_trace_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'chp09_parm1_trace'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp09_parm1_trace_vis) {\n"
"        chp09_parm1_trace_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:66
msgid "side effect"
msgstr ""

#: ../../_sources/Lists/UsingListsasParameters.rst:66
msgid "modifier"
msgstr ""

