# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/Aliasing.rst:15
msgid "Aliasing"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:17
msgid "Since variables refer to objects, if we assign one variable to another, both variables refer to the same object:"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:26
msgid "In this case, the reference diagram looks like this:"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:None
msgid ".. image:: Lists/Figures/refdiag4.png\n"
"   :alt: State snapshot for multiple references (aliases) to a list"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:31
msgid "Because the same list has two different names, ``a`` and ``b``, we say that it is **aliased**. Changes made with one alias affect the other.  In the codelens example below, you can see that ``a`` and ``b`` refer to the same list after executing the assignment statement ``b = a``."
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:None
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"chp09_is3\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (chp09_is3)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var chp09_is3_trace = {\"code\": \"a = [81, 82, 83]\\nb = [81, 82, 83]\\n\\nprint(a == b)\\nprint(a is b)\\n\\nb = a\\nprint(a == b)\\nprint(a is b)\\n\\nb[0] = 5\\nprint(a)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83]}, \"line\": 2, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 2]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83], \"2\": [\"LIST\", 81, 82, 83]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83]}, \"line\": 8, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\nTrue\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\nTrue\\nTrue\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 81, 82, 83]}, \"line\": 11, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\nTrue\\nTrue\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 5, 82, 83]}, \"line\": 12, \"event\": \"step_line\"}, {\"ordered_globals\": [\"a\", \"b\"], \"stdout\": \"True\\nFalse\\nTrue\\nTrue\\n[5, 82, 83]\\n\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"a\": [\"REF\", 1], \"b\": [\"REF\", 1]}, \"heap\": {\"1\": [\"LIST\", 5, 82, 83]}, \"line\": 12, \"event\": \"return\"}]};\n"
"var chp09_is3_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        chp09_is3_vis = new ExecutionVisualizer('chp09_is3',chp09_is3_trace,\n"
"                                    {embeddedMode: false,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(chp09_is3_vis,'chp09_is3');\n"
"        styleButtons('chp09_is3');\n"
"        allVisualizers.push(chp09_is3_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component chp09_is3_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#chp09_is3_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'chp09_is3'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (chp09_is3_vis) {\n"
"        chp09_is3_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:54
msgid "Although this behavior can be useful, it is sometimes unexpected or undesirable. In general, it is safer to avoid aliasing when you are working with mutable objects. Of course, for immutable objects, there's no problem. That's why Python is free to alias strings and integers when it sees an opportunity to economize."
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:60
msgid "**Check your understanding**"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:78
msgid "[4, 2, 8, 6, 5]"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:78
msgid "[4, 2, 8, 999, 5]"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:78
msgid "blist is not a copy of alist, it is a reference to the list alist refers to."
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:78
msgid "Yes, since alist and blist both reference the same list, changes to one also change the other."
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:69
msgid "list-11-1: What is printed by the following statements?"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:71
msgid "alist = [4, 2, 8, 6, 5]\n"
"blist = alist\n"
"blist[3] = 999\n"
"print(alist)"
msgstr ""

#: ../../_sources/Lists/Aliasing.rst:79
msgid "clone"
msgstr ""

