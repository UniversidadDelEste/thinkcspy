# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 21:02-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/PureFunctions.rst:15
msgid "Pure Functions"
msgstr ""

#: ../../_sources/Lists/PureFunctions.rst:18
msgid "A **pure function** does not produce side effects. It communicates with the calling program only through parameters (which it does not modify) and a return value. Here is the ``doubleStuff`` function from the previous section written as a pure function. To use the pure function version of ``double_stuff`` to modify ``things``, you would assign the return value back to ``things``."
msgstr ""

#: ../../_sources/Lists/PureFunctions.rst:39
msgid ""
msgstr ""

#: ../../_sources/Lists/PureFunctions.rst:39
msgid "def doubleStuff(a_list):\n"
"    \"\"\" Return a new list in which contains doubles of the elements in a_list. \"\"\"\n"
"    new_list = []\n"
"    for value in a_list:\n"
"        new_elem = 2 * value\n"
"        new_list.append(new_elem)\n"
"    return new_list\n"
"\n"
"things = [2, 5, 9]\n"
"print(things)\n"
"things = doubleStuff(things)\n"
"print(things)"
msgstr ""

#: ../../_sources/Lists/PureFunctions.rst:40
msgid "Once again, codelens helps us to see the actual references and objects as they are passed and returned."
msgstr ""

#: ../../_sources/Lists/PureFunctions.rst:56
msgid "\n"
"<div class=\"alert alert-warning cd_section\">\n"
"<div id=\"ch09_mod3\"></div>\n"
"<p class=\"cl_caption\"><span class=\"cl_caption_text\"> (ch09_mod3)</span> </p>\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"var ch09_mod3_trace = {\"code\": \"def doubleStuff(a_list):\\n    \\\"\\\"\\\" Return a new list in which contains doubles of the elements in a_list. \\\"\\\"\\\"\\n    new_list = []\\n    for value in a_list:\\n        new_elem = 2 * value\\n        new_list.append(new_elem)\\n    return new_list\\n\\nthings = [2, 5, 9]\\nthings = doubleStuff(things)\", \"trace\": [{\"ordered_globals\": [], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {}, \"heap\": {}, \"line\": 1, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null]}, \"line\": 9, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 10, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"a_list\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 1, \"event\": \"call\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"a_list\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9]}, \"line\": 3, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\"]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 2}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\"]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 4, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 2}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\"]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 4, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 2}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 4, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 5}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 10, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 5}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 10, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 5}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4, 10]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 10, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 9}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4, 10]}, \"line\": 5, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 18, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 9}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4, 10]}, \"line\": 6, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 18, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 9}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4, 10, 18]}, \"line\": 4, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 18, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 9}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4, 10, 18]}, \"line\": 7, \"event\": \"step_line\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"doubleStuff\", \"stack_to_render\": [{\"frame_id\": 1, \"encoded_locals\": {\"new_elem\": 18, \"new_list\": [\"REF\", 3], \"a_list\": [\"REF\", 2], \"value\": 9, \"__return__\": [\"REF\", 3]}, \"is_highlighted\": true, \"is_parent\": false, \"func_name\": \"doubleStuff\", \"is_zombie\": false, \"parent_frame_id_list\": [], \"unique_hash\": \"doubleStuff_f1\", \"ordered_varnames\": [\"a_list\", \"new_list\", \"value\", \"new_elem\", \"__return__\"]}], \"globals\": {\"things\": [\"REF\", 2], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"2\": [\"LIST\", 2, 5, 9], \"3\": [\"LIST\", 4, 10, 18]}, \"line\": 7, \"event\": \"return\"}, {\"ordered_globals\": [\"doubleStuff\", \"things\"], \"stdout\": \"\", \"func_name\": \"<module>\", \"stack_to_render\": [], \"globals\": {\"things\": [\"REF\", 3], \"doubleStuff\": [\"REF\", 1]}, \"heap\": {\"1\": [\"FUNCTION\", \"doubleStuff(a_list)\", null], \"3\": [\"LIST\", 4, 10, 18]}, \"line\": 10, \"event\": \"return\"}]};\n"
"var ch09_mod3_vis;\n"
"\n"
"$(document).ready(function() {\n"
"    try {\n"
"        ch09_mod3_vis = new ExecutionVisualizer('ch09_mod3',ch09_mod3_trace,\n"
"                                    {embeddedMode: true,\n"
"                                    verticalStack: false,\n"
"                                    heightChangeCallback: redrawAllVisualizerArrows,\n"
"                                    codeDivWidth: 500,\n"
"                                    lang : 'py2'\n"
"                                    });\n"
"        attachLoggers(ch09_mod3_vis,'ch09_mod3');\n"
"        styleButtons('ch09_mod3');\n"
"        allVisualizers.push(ch09_mod3_vis);\n"
"    } catch (e) {\n"
"        console.log(\"Failed to Initialize CodeLens component ch09_mod3_vis\" );\n"
"        console.log(e.toString());\n"
"    }\n"
"\n"
"});\n"
"\n"
"$(document).ready(function() {\n"
"    $(\"#ch09_mod3_tracecheck\").click(function() {\n"
"        logBookEvent({'event':'codelens', 'act': 'check', 'div_id':'ch09_mod3'});\n"
"    });\n"
"});\n"
"\n"
"if (allVisualizers === undefined) {\n"
"   var allVisualizers = [];\n"
"}\n"
"\n"
"\n"
"$(window).resize(function() {\n"
"    if (ch09_mod3_vis) {\n"
"        ch09_mod3_vis.redrawConnectors();\n"
"    }\n"
"});\n"
"</script>\n"
""
msgstr ""

