# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Brad Miller, David Ranum, Created using Runestone Interactive
# This file is distributed under the same license as the How to Think Like a Computer Scientist package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-26 18:20-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../_sources/Lists/FunctionsthatProduceLists.rst:15
msgid "Functions that Produce Lists"
msgstr ""

#: ../../_sources/Lists/FunctionsthatProduceLists.rst:17
msgid "The pure version of ``doubleStuff`` above made use of an important **pattern** for your toolbox. Whenever you need to write a function that creates and returns a list, the pattern is usually::"
msgstr ""

#: ../../_sources/Lists/FunctionsthatProduceLists.rst:22
msgid "initialize a result variable to be an empty list\n"
"loop\n"
"   create a new element\n"
"   append it to result\n"
"return the result"
msgstr ""

#: ../../_sources/Lists/FunctionsthatProduceLists.rst:28
msgid "Let us show another use of this pattern.  Assume you already have a function ``is_prime(x)`` that can test if x is prime.  Now, write a function to return a list of all prime numbers less than n::"
msgstr ""

#: ../../_sources/Lists/FunctionsthatProduceLists.rst:32
msgid "def primes_upto(n):\n"
"    \"\"\" Return a list of all prime numbers less than n. \"\"\"\n"
"    result = []\n"
"    for i in range(2, n):\n"
"        if is_prime(i):\n"
"            result.append(i)\n"
"    return result"
msgstr ""

